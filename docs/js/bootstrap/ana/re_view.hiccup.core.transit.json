["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_view/hiccup/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",24],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:shadow/protocol-prefixes",["~#set",["re-view$hiccup$core$IElement$","re-view$hiccup$core$IEmitHiccup$"]],"~:use-macros",null,"~:excludes",["^<",[]],"~:name","~$re-view.hiccup.core","~:imports",null,"~:requires",["^ ","~$re-view.hiccup.hiccup","^C","~$hiccup","^C","~$cljs.core","^E","~$goog","^F"],"~:seen",["^<",["~:require"]],"~:shadow/js-access-global",["^<",["Symbol","Error"]],"~:uses",null,"~:defs",["^ ","~$IElement",["^ ","^2",["^ ","~:protocol-symbol",true,"^3","re_view/hiccup/core.cljs","^7",22,"^5",14,"^4",14,"~:protocol-info",["^ ","~:methods",["^ ","~$to-element",[["~$this"]]]],"^6",14,"~:sigs",["^ ","~:to-element",["^ ","^?","^P","~:arglists",["~#list",[["^Q"]]],"~:doc","Returns a React element representing `this`"]],"~:jsdoc",["^U",["@interface"]]],"^M",true,"^?","~$re-view.hiccup.core/IElement","^3","re_view/hiccup/core.cljs","^7",22,"^5",1,"^4",14,"^N",["^ ","^O",["^ ","^P",[["^Q"]]]],"~:info",null,"^6",14,"~:tag","~$any","^R",["^ ","^S",["^ ","^?","^P","^T",["^U",[["^Q"]]],"^V","Returns a React element representing `this`"]],"~:impls",["^<",[]],"^W",["^U",["@interface"]]],"^P",["^ ","~:protocol-inline",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",15,"^5",4,"^6",15,"^7",14,"~:protocol","^X","^V","Returns a React element representing `this`","^T",["^U",["~$quote",["^U",[["^Q"]]]]]],"^12","^X","^?","~$re-view.hiccup.core/to-element","^3","re_view/hiccup/core.cljs","^7",14,"~:method-params",["^U",[["^Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^5",1,"~:variadic?",false,"^4",14,"~:ret-tag","^[","^6",15,"~:max-fixed-arity",1,"~:fn-var",true,"^T",["^U",["^13",["^U",[["^Q"]]]]],"^V","Returns a React element representing `this`"],"~$IEmitHiccup",["^ ","^2",["^ ","^M",true,"^3","re_view/hiccup/core.cljs","^7",25,"^5",14,"^4",17,"^N",["^ ","^O",["^ ","~$to-hiccup",[["^Q"]]]],"^6",17,"^R",["^ ","~:to-hiccup",["^ ","^?","^1=","^T",["^U",[["^Q"]]],"^V","Returns a hiccup form representing `this`"]],"^W",["^U",["@interface"]]],"^M",true,"^?","~$re-view.hiccup.core/IEmitHiccup","^3","re_view/hiccup/core.cljs","^7",25,"^5",1,"^4",17,"^N",["^ ","^O",["^ ","^1=",[["^Q"]]]],"^Y",null,"^6",17,"^Z","^[","^R",["^ ","^1>",["^ ","^?","^1=","^T",["^U",[["^Q"]]],"^V","Returns a hiccup form representing `this`"]],"^10",["^<",[]],"^W",["^U",["@interface"]]],"^1=",["^ ","^11",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",18,"^5",4,"^6",18,"^7",13,"^12","^1?","^V","Returns a hiccup form representing `this`","^T",["^U",["^13",["^U",[["^Q"]]]]]],"^12","^1?","^?","~$re-view.hiccup.core/to-hiccup","^3","re_view/hiccup/core.cljs","^7",13,"^15",["^U",[["^Q"]]],"^16",null,"^17",["^U",[null,null]],"^5",1,"^18",false,"^4",17,"^19","^[","^6",18,"^1:",1,"^1;",true,"^T",["^U",["^13",["^U",[["^Q"]]]]],"^V","Returns a hiccup form representing `this`"],"~$-to-element",["^ ","^11",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",20,"^5",7,"^6",20,"^7",18,"^T",["^U",["^13",["^U",[["~$form"]]]]]],"^?","~$re-view.hiccup.core/-to-element","^3","re_view/hiccup/core.cljs","^7",18,"^15",["^U",[["^1B"]]],"^16",null,"^17",["^U",[null,null]],"^5",1,"^18",false,"^4",20,"^19",["^<",[null,"^["]],"^6",20,"^1:",1,"^1;",true,"^T",["^U",["^13",["^U",[["^1B"]]]]]],"~$element",["^ ","^11",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",46,"^5",7,"^6",46,"^7",14,"^T",["^U",["^13",["^U",[["^1B"],["^1B",["^ ","~:keys",["~$wrap-props","~$create-element"]]]]]]],"^V","Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement.","~:top-fn",["^ ","^18",false,"~:fixed-arity",2,"^1:",2,"^15",[["^1B"],["^1B",["^ ","^1E",["^1F","^1G"]]]],"^T",["^U",[["^1B"],["^1B",["^ ","^1E",["^1F","^1G"]]]]],"^17",["^U",[null,null]]]],"^?","~$re-view.hiccup.core/element","^3","re_view/hiccup/core.cljs","^7",14,"^1H",["^ ","^18",false,"^1I",2,"^1:",2,"^15",[["^1B"],["^1B",["^ ","^1E",["^1F","^1G"]]]],"^T",["^U",[["^1B"],["^1B",["^ ","^1E",["^1F","^1G"]]]]],"^17",["^U",[null,null]]],"^15",[["^1B"],["^1B",["^ ","^1E",["^1F","^1G"]]]],"^16",null,"^1I",2,"^17",["^U",[null,null]],"^5",1,"^18",false,"^O",[["^ ","^1I",1,"^18",false,"^Z",["^<",[null,"^["]]],["^ ","^1I",2,"^18",false]],"^4",46,"^6",46,"^1:",2,"^1;",true,"^T",["^U",[["^1B"],["^1B",["^ ","^1E",["^1F","^1G"]]]]],"^V","Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement."]],"~:require-macros",["^ ","^E","^E"],"~:cljs.analyzer/constants",["^ ","^G",["^<",["~:else","~:wrap-props","~:create-element"]],"~:order",["^1M","^1N","^1O"]],"~:flags",["^ ","^H",["^<",[]]],"~:js-deps",["^ "],"~:deps",["^F","^E","^C"]]