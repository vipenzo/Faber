{"version":3,"sources":["faber/model.cljs"],"mappings":";AAQA,AAAKA,AAAGC;AACR,AAAKC,AAAI,AAAA,AAAKF;AAEd,AAAA,AAAMG,AAAUC;AAAhB,AACE,AAAG,AAAA,AAAGA,AAAaJ;;AAErB,AAAA,AAAMK,AAAUC;AAAhB,AACE,AAAG,AAAA,AAAGA,AAAaN;;AAIrB,AAAA,AAAA,AAAAO,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAASU,AAAIC;AAAnB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACcM,AAAIC;;;AADlB,AAAA,AAAA,AAAMX;;AAAN;AAAA,AAAA,AAAA,AAAAK,AAAML;AAAN,AAAA,AAAAM,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAIA,AAAA,AAAA,AAAAX,AAAMkB;AAAN,AAAA,AAAAjB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAAd;;;AAAA,AAAA,AAAA,AAAA,AAAMc,AAASF,AAAIC;AAAnB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACcM,AAAIC;;;AADlB,AAAA,AAAA,AAAMC;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAP,AAAAM;AAAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAAA,AAAAK,AAAAD;;;AAAA,AAIA,AAAA,AAAA,AAAAnB,AAAMqB;AAAN,AAAA,AAAApB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAAjB;;;AAAA,AAAA,AAAA,AAAA,AAAMiB,AAASL,AAAIC;AAAnB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACcM,AAAIC;;;AADlB,AAAA,AAAA,AAAMI;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAV,AAAAS;AAAAA,AAAA,AAAAR,AAAAQ;AAAA,AAAA,AAAAP,AAAA;AAAA,AAAA,AAAAA,AAAAQ,AAAAD;;;AAAA,AAKA,AA+BA,AAAA,AAAA,AAAAtB,AAAMwB;AAAN,AAAA,AAAAvB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAApB;;;AAAA,AAAA,AAAA,AAAA,AAAMoB,AAAUG,AAAWV;AAA3B,AACE,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACW,AAAOD;AAAZ,AAAApB,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACe,AAACmB,AAAKF,AAAYV;;AADjC;;;;AADF,AAAA,AAAA,AAAMO;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAb,AAAAY;AAAAA,AAAA,AAAAX,AAAAW;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAA,AAAAA,AAAAW,AAAAD;;;AAAA,AAIA,AAAA,AAAA,AAAAzB,AAAM8B;AAAN,AAAA,AAAA7B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6B,AAAA1B;;;AAAA,AAAA,AAAA,AAAA,AAAM0B,AAAMb;AAAZ,AAAmB,AAAA,AAACgB,AAAYhB;;;AAAhC,AAAA,AAAA,AAAMa;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAAuB;;;AAAA,AACA,AAAA,AAAA,AAAA/B,AAAMkC;AAAN,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiC,AAAA9B;;;AAAA,AAAA,AAAA,AAAA,AAAM8B,AAAMjB;AAAZ,AAAmB,AAAA,AAACgB,AAAYhB;;;AAAhC,AAAA,AAAA,AAAMiB;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAA2B;;;AAAA,AACA,AAAA,AAAA,AAAAnC,AAAMoC;AAAN,AAAA,AAAAnC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmC,AAAAhC;;;AAAA,AAAA,AAAA,AAAA,AAAMgC,AAAMnB;AAAZ,AAAmB,AAAA,AAACgB,AAAYhB;;;AAAhC,AAAA,AAAA,AAAMmB;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAA6B;;;AAAA,AACA,AAAA,AAAA,AAAArC,AAAMsC;AAAN,AAAA,AAAArC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqC,AAAAlC;;;AAAA,AAAA,AAAA,AAAA,AAAMkC,AAAMrB;AAAZ,AAAmB,AAAA,AAACgB,AAAYhB;;;AAAhC,AAAA,AAAA,AAAMqB;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAA+B;;;AAAA,AAGA,AAyBA,AAAA,AAAA,AAAAvC,AAAMwC;AAAN,AAAA,AAAAvC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuC,AAAA,AAAA,AAAA,AAAApC;;;AAAA,AAAA,AAAA,AAAA,AAAMoC,AAAeK,AAASC;AAA9B,AAAA,AAAAvC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAC6B,AAACmB,AAAKgB,AAAUC;;;AAD7C,AAAA,AAAA,AAAMN;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA/B,AAAA8B;AAAAA,AAAA,AAAA7B,AAAA6B;AAAA,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAAA,AAAA6B,AAAAD;;;AAAA,AAMA,AAAA,AAAMI,AAAQ/B,AAAEgC;AAAhB,AAAA,AAAAzC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACiBM,AAAMgC;;AASvB,AAAA,AAAA,AAAAhD,AAAMkD;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAjD,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAiD,AAAA,AAAA,AAAAhD;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAiD,AAAA,AAAA/C,AAAA,AAAA8C,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE;;;;;AAAA,AAAA,AAAA,AAAMF,AACFW;AADJ,AAAA,AAAAtD,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEwBmD;;;AAFxB,AAAA,AAAA,AAAA,AAAAR,AAAMH,AAGFW,AAAOC;AAHX,AAAA,AAAAR,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAe,AAAAF,AAAAA;AAAA,AAAAG,AAAAH,AAAA,AAG2BS;AAH3B,AAAA,AAAAxD,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIwBmD,AAAgBC,AAAmBC;;;AAJ3D;AAAA,AAAA,AAAA,AAAAL,AAAMR;AAAN,AAAA,AAAAS,AAAA,AAAA9C,AAAA6C;AAAAA,AAAA,AAAA5C,AAAA4C;AAAAE,AAAA,AAAA/C,AAAA6C;AAAAA,AAAA,AAAA5C,AAAA4C;AAAA,AAAA,AAAA3C,AAAA;AAAA,AAAA,AAAAA,AAAA4C,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMR;;AAAN,AASA,AAAA,AAAMc,AAAQC;AAAd,AAAA,AAAA1D,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACauD;;AAEb,AAAA,AAAMC,AAAMlD,AAAEgC,AAAEmB;AAAhB,AAAA,AAAA5D,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACeM,AAAMgC,AAAMmB;;AAE3B,AAAA,AAAMC,AAAUC,AAAGC;AAAnB,AACE,AAAI,AAAK,AAACC,AAAQF,AAAI,AAAA,AAACG,AAAI,AAACC,AAAMJ;AAChC,AAAAK,AAAcL;AAAd,AAAAM,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAUG;AAAV,AAAA,AAAAtE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACe4D,AAAGM,AAAIC;;AAFxB,AAAAtE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAGe4D,AAAGD;;;AAEpB,AAAA,AAAMS,AACHjB,AAAOkB;AADV,AAAA,AAAAxE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAEiBmD,AAAQkB;;AAKzB,AAAA,AAAA,AAAA/E,AAAMgF;AAAN,AAAA,AAAA/E,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+E,AAAA,AAAA,AAAA,AAAA5E;;;AAAA,AAAA,AAAA,AAAA,AAAA6E,AAAMD,AAAkB/D;AAAxB,AAAA,AAAAiE,AAAAD;AAAA,AAAAN,AAAAO,AAAA,AAAA,AAAelE;AAAf,AAAA2D,AAAAO,AAAA,AAAA,AAAiBlC;AAAjB,AAAA2B,AAAAO,AAAA,AAAA,AAAmBf;AAAnB,AACE,AAAMkB,AAAQ,AAAK,AAAAC,AAAU,AAACzE,AAAMI,AACjB,AAAA,AAACuD,AAAQ,AAAC3D,AAAMI;AAC7BsE,AAAK,AAAA,AAAIF,AAAQ,AAACG,AAAOvE;AACzBA,AAAM,AAAIoE,AAAQ,AAACI,AAAK,AAACA,AAAKxE,AAAQA;AAH5C,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIiBM,AAAMgC,AAAMmB,AAASoB,AAAQtE;;;AALhD,AAAA,AAAA,AAAM+D;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAvE,AAAAsE;AAAAA,AAAA,AAAArE,AAAAqE;AAAA,AAAA,AAAApE,AAAA;AAAA,AAAA,AAAAA,AAAAqE,AAAAD;;;AAAA,AAOA,AAAA,AAAA,AAAAnF,AAAM0F;AAAN,AAAA,AAAAzF,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyF,AAAA,AAAA,AAAA,AAAAtF;;;AAAA,AAAA,AAAA,AAAA,AAAAuF,AAAMD,AAAqBzE;AAA3B,AAAA,AAAA2E,AAAAD;AAAA,AAAAhB,AAAAiB,AAAA,AAAA,AAAkB5E;AAAlB,AAAA2D,AAAAiB,AAAA,AAAA,AAAoB5C;AAApB,AAAA2B,AAAAiB,AAAA,AAAA,AAAsBzB;AAAtB,AAAA,AAAA5D,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAmF,AAAA,AAAAtF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACiBM,AAAGgC,AAAGmB,AAAKlD;;;AAD5B,AAAA,AAAA,AAAMyE;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAlF,AAAAiF;AAAAA,AAAA,AAAAhF,AAAAgF;AAAA,AAAA,AAAA/E,AAAA;AAAA,AAAA,AAAAA,AAAAgF,AAAAD;;;AAAA,AAIA,AAAA,AAAA,AAAA9F,AAAMgG;AAAN,AAAA,AAAA/F,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+F,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA5F;;;AAAA,AAAA,AAAA,AAAA,AAAA6F,AAAMD,AAASM,AAAYrF;AAA3B,AAAA,AAAAiF,AAAAD;AAAA,AAAAtB,AAAAuB,AAAA,AAAA,AAAkBlF;AAAlB,AAAA2D,AAAAuB,AAAA,AAAA,AAAoBlD;AAApB,AAAA2B,AAAAuB,AAAA,AAAA,AAAsB/B;AAAtB,AAAA,AAAA5D,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAmF,AAAA,AAAAtF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACc4F,AAAItF,AAAGgC,AAAGmB,AAAKlD;;;AAD7B,AAAA,AAAA,AAAM+E;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAvF,AAAAsF;AAAAA,AAAA,AAAArF,AAAAqF;AAAAE,AAAA,AAAAxF,AAAAsF;AAAAA,AAAA,AAAArF,AAAAqF;AAAA,AAAA,AAAApF,AAAA;AAAA,AAAA,AAAAA,AAAAqF,AAAAC,AAAAF;;;AAAA,AAGA,AAAA,AAAA,AAAAnG,AAAMuG;AAAN,AAAA,AAAAtG,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsG,AAAA,AAAA,AAAA,AAAAnG;;;AAAA,AAAA,AAAA,AAAA,AAAAoG,AAAMD,AAAmBtF;AAAzB,AAAA,AAAAwF,AAAAD;AAAA,AAAA7B,AAAA8B,AAAA,AAAA,AAAgBzF;AAAhB,AAAA2D,AAAA8B,AAAA,AAAA,AAAkBzD;AAAlB,AAAA2B,AAAA8B,AAAA,AAAA,AAAoBtC;AAApB,AAAA,AAAA5D,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAmF,AAAA,AAAAtF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACeM,AAAGgC,AAAGmB,AAAKlD;;;AAD1B,AAAA,AAAA,AAAMsF;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA9F,AAAA6F;AAAAA,AAAA,AAAA5F,AAAA4F;AAAA,AAAA,AAAA3F,AAAA;AAAA,AAAA,AAAAA,AAAA4F,AAAAD;;;AAAA,AAGA,AAAA,AAAA,AAAA1G,AAAM4G;AAAN,AAAA,AAAA3G,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2G,AAAAxG;;;AAAA,AAAA,AAAA,AAAA,AAAMwG,AAAU3F;AAAhB,AACE,AAAI,AAAS,AAACJ,AAAMI;AAClB,AAAC6F,AAAQ,AAACjG,AAAMI,AAAO,AAACuE,AAAOvE,AAAO,AAACwE,AAAK,AAACA,AAAKxE;;AAClD,AAAC8F,AAAQ,AAAClG,AAAMI,AAAO,AAACwE,AAAKxE;;;;AAHjC,AAAA,AAAA,AAAM2F;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAA5E,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAAqG;;;AAAA,AAKA,AAAA,AAAA,AAAA7G,AAAMgH;AAAN,AAAA,AAAA/G,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+G,AAAA,AAAA,AAAA,AAAA5G;;;AAAA,AAAA,AAAA,AAAA,AAAA6G,AAAMD,AAAiB/F;AAAvB,AAAA,AAAAiG,AAAAD;AAAA,AAAAtC,AAAAuC,AAAA,AAAA,AAAclG;AAAd,AAAA2D,AAAAuC,AAAA,AAAA,AAAgBlE;AAAhB,AAAA2B,AAAAuC,AAAA,AAAA,AAAkB/C;AAAlB,AAAA,AAAA5D,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAmF,AAAA,AAAAtF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACaM,AAAGgC,AAAGmB,AAAKlD;;;AADxB,AAAA,AAAA,AAAM+F;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAvG,AAAAsG;AAAAA,AAAA,AAAArG,AAAAqG;AAAA,AAAA,AAAApG,AAAA;AAAA,AAAA,AAAAA,AAAAqG,AAAAD;;;AAAA,AAGA,AAAA,AAAA,AAAAnH,AAAMqH;AAAN,AAAA,AAAApH,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAAjH;;;AAAA,AAAA,AAAA,AAAA,AAAAkH,AAAMD,AAAkBpG;AAAxB,AAAA,AAAAsG,AAAAD;AAAA,AAAA3C,AAAA4C,AAAA,AAAA,AAAevG;AAAf,AAAA2D,AAAA4C,AAAA,AAAA,AAAiBvE;AAAjB,AAAA2B,AAAA4C,AAAA,AAAA,AAAmBpD;AAAnB,AAAA,AAAA5D,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAmF,AAAA,AAAAtF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACcM,AAAGgC,AAAGmB,AAAKlD;;;AADzB,AAAA,AAAA,AAAMoG;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA5G,AAAA2G;AAAAA,AAAA,AAAA1G,AAAA0G;AAAA,AAAA,AAAAzG,AAAA;AAAA,AAAA,AAAAA,AAAA0G,AAAAD;;;AAAA,AAGA,AAAA,AAAA,AAAAxH,AAAM0H;AAAN,AAAA,AAAAzH,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyH,AAAA,AAAA,AAAA,AAAAtH;;;AAAA,AAAA,AAAA,AAAA,AAAAuH,AAAMD,AAAmBzG;AAAzB,AAAA,AAAA2G,AAAAD;AAAA,AAAAhD,AAAAiD,AAAA,AAAA,AAAc3D;AAAd,AAAAU,AAAAiD,AAAA,AAAA,AAAgBG;AAAhB,AAAApD,AAAAiD,AAAA,AAAA,AAAkBI;AAAlB,AAAArD,AAAAiD,AAAA,AAAA,AAAoBtB;AAApB,AAAA,AAAA/F,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAmF,AAAA,AAAAtF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACauD,AAAG8D,AAAGC,AAAG1B,AAAKrF;;;AAD3B,AAAA,AAAA,AAAMyG;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAjH,AAAAgH;AAAAA,AAAA,AAAA/G,AAAA+G;AAAA,AAAA,AAAA9G,AAAA;AAAA,AAAA,AAAAA,AAAA+G,AAAAD;;;AAAA,AAGA,AAAA,AAAA,AAAA7H,AAAMiI;AAAN,AAAA,AAAAhI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgI,AAAA7H;;;AAAA,AAAA,AAAA,AAAA,AAAM6H,AAAShH;AAAf,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AACaO;;;AADb,AAAA,AAAA,AAAMgH;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAjG,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAA0H;;;AAAA,AAGA,AAAA;;;AAAA,AAAAlI,AAAOmI;AAAP,AAAA,AAAAlI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkI,AAAA,AAAA,AAAA,AAAA/H;;;AAAA,AAAA,AAAA,AAAA,AAAO+H,AAEJlE,AAAIhD;AAFP,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGiBuD,AAAKhD;;;AAHtB,AAAA,AAAA,AAAOkH;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAE,AAAA,AAAAxH,AAAAuH;AAAAA,AAAA,AAAAtH,AAAAsH;AAAA,AAAA,AAAArH,AAAA;AAAA,AAAA,AAAAA,AAAAsH,AAAAD;;;AAAA,AAKA,AAAA;;;AAAA,AAAApI,AAAOsI;AAAP,AAAA,AAAArI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqI,AAAA,AAAA,AAAA,AAAAlI;;;AAAA,AAAA,AAAA,AAAA,AAAAmI,AAAOD,AAEwBrH;AAF/B,AAAA,AAAAuH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjF,AAAA,AAAAiF,AAAA,AAAA,AAAA,AAAA,AAAA/F,AAAAe,AAAAgF,AAAAA;AAAA,AAAA/E,AAAA+E,AAAA,AAEWvE;AAFX,AAAAR,AAAA+E,AAAA,AAEaG;AAFb,AAAAlF,AAAA+E,AAAA,AAEmBI;AAFnB,AAAA,AAAArI,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGiBuD,AAAU0E,AAAgBC,AAAW3H;;;AAHtD,AAAA,AAAA,AAAOqH;;AAAP;AAAA,AAAA,AAAA,AAAAG,AAAOH;AAAP,AAAA,AAAAI,AAAA,AAAA7H,AAAA4H;AAAAA,AAAA,AAAA3H,AAAA2H;AAAA,AAAA,AAAA1H,AAAA;AAAA,AAAA,AAAAA,AAAA2H,AAAAD;;;AAAA,AAKA,AAAA;;;AAAA,AAAAzI,AAAM6I;AAAN,AAAA,AAAA5I,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4I,AAAA,AAAA,AAAA,AAAAzI;;;AAAA,AAAA,AAAA,AAAA,AAAMyI,AAEHG,AAAU/H;AAFb,AAGE,AAACwB,AAAM,AAACwG,AAAQ,AAAI,AAACC,AAAKF,AAASV,AAAWH,AAAYa,AAAS/H;;;AAHrE,AAAA,AAAA,AAAM4H;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAlI,AAAAiI;AAAAA,AAAA,AAAAhI,AAAAgI;AAAA,AAAA,AAAA/H,AAAA;AAAA,AAAA,AAAAA,AAAAgI,AAAAD;;;AAAA,AAKA,AAAA,AAAA,AAAA9I,AAAMmJ;AAAN,AAAA,AAAAlJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkJ,AAAA/I;;;AAAA,AAAA,AAAA,AAAA,AAAM+I,AAAclI;AAApB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AACiBO;;;AADjB,AAAA,AAAA,AAAMkI;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAnH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAA4I;;;AAAA,AAGA,AAAA,AAAA,AAAApJ,AAAMqJ;AAAN,AAAA,AAAApJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoJ,AAAA,AAAA,AAAA,AAAAjJ;;;AAAA,AAAA,AAAA,AAAA,AAAMiJ,AAAYG,AAAIvI;AAAtB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACiB8I,AAAIvI;;;AADrB,AAAA,AAAA,AAAMoI;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAA1I,AAAAyI;AAAAA,AAAA,AAAAxI,AAAAwI;AAAA,AAAA,AAAAvI,AAAA;AAAA,AAAA,AAAAA,AAAAwI,AAAAD;;;AAAA,AAMA,AAAA,AAAA,AAAAtJ,AAAMyJ;AAAN,AAAA,AAAAxJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwJ,AAAArJ;;;AAAA,AAAA,AAAA,AAAA,AAAMqJ,AAAUxI;AAAhB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AACcO;;;AADd,AAAA,AAAA,AAAMwI;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAzH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAAkJ;;;AAAA,AAGA,AAAA,AAAA,AAAA1J,AAAM2J;AAAN,AAAA,AAAA1J,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0J,AAAAvJ;;;AAAA,AAAA,AAAA,AAAA,AAAMuJ,AAAiB1I;AAAvB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AACqBO;;;AADrB,AAAA,AAAA,AAAM0I;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAA3H,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAAoJ;;;AAAA,AAGA,AAAA,AAAA,AAAA5J,AAAM6J;AAAN,AAAA,AAAA5J,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4J,AAAAzJ;;;AAAA,AAAA,AAAA,AAAA,AAAMyJ,AAAe5I;AAArB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AACmBO;;;AADnB,AAAA,AAAA,AAAM4I;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAA7H,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAAsJ;;;AAAA,AAqBA,AAAA,AAAA,AAAA9J,AAAM+J;AAAN,AAAA,AAAA9J,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8J,AAAA,AAAA,AAAA,AAAA3J;;;AAAA,AAAA,AAAA,AAAA,AAAM2J,AAAYG,AAAMjJ;AAAxB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC6BO;;;AAD7B,AAAA,AAAA,AAAM8I;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAApJ,AAAAmJ;AAAAA,AAAA,AAAAlJ,AAAAkJ;AAAA,AAAA,AAAAjJ,AAAA;AAAA,AAAA,AAAAA,AAAAkJ,AAAAD;;;AAAA,AAGA,AAAA,AAAA,AAAAhK,AAAMmK;AAAN,AAAA,AAAAlK,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkK,AAAA/J;;;AAAA,AAAA,AAAA,AAAA,AAAM+J,AAAWlJ;AAAjB,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC+BO;;;AAD/B,AAAA,AAAA,AAAMkJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAnI,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAA4J;;;AAAA,AAGA,AAAA,AAAA,AAAApK,AAAMqK;AAAN,AAAA,AAAApK,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoK,AAAAjK;;;AAAA,AAAA,AAAA,AAAA,AAAMiK,AAAOpJ;AAAb,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC8BO;;;AAD9B,AAAA,AAAA,AAAMoJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAArI,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAA8J;;;AAAA,AAGA,AAAA,AAAA,AAAAtK,AAAMuK;AAAN,AAAA,AAAAtK,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsK,AAAAnK;;;AAAA,AAAA,AAAA,AAAA,AAAMmK,AAAUtJ;AAAhB,AACE,AAAI,AAAK,AAACT,AAAIS,AACL,AAAS,AAACJ,AAAMI;AACvB,AAAAwJ,AAAexJ;AAAfyJ,AAAA,AAAAlK,AAAAiK;AAAAE,AAAA,AAAA9J,AAAA6J;AAAAA,AAAA,AAAA5J,AAAA4J;AAAAC,AAAOC;AAAPF,AAAWG;AAAX,AAAA,AAAAtK,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyBkK,AAAKC;;AAHhC,AAAAtK,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA+B,AAAAC,AAAA,AAAAnC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAI6BO;;;;AAL/B,AAAA,AAAA,AAAMsJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAvI,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAAgK;;;AAAA,AAOA,AAAA;;;AAAA,AAAAxK,AAAM8K;AAAN,AAAA,AAAA7K,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6K,AAAA1K;;;AAAA,AAAA,AAAA,AAAA,AAAM0K,AAEDE;AAFL,AAGE,AAACC,AAAW,AAACC,AAAKF,AAAO,AAACG,AAAUH;;;AAHtC,AAAA,AAAA,AAAMF;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAA9I,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxB,AAAAuK;;;AAAA","names":["faber.model/pi","Math/PI","faber.model/tau","faber.model/rad->deg","radians","faber.model/deg->rad","degrees","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","faber.model/with-fn","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","seq53586","G__53587","cljs.core/first","cljs.core/next","self__4723__auto__","x","block","faber.model/with-fa","seq53658","G__53659","faber.model/with-fs","seq53674","G__53675","faber.model/modifier","seq53707","G__53708","modifier","cljs.core/some","cljs.core/name","faber.model/-#","seq53711","self__4724__auto__","faber.model.modifier","faber.model/-%","seq53714","faber.model/-*","seq53740","faber.model/-!","seq53763","faber.model/define-module","cljs.core.apply","cljs.core/array-map","seq53773","G__53774","module","body","faber.model/square","y","G__53798","faber.model/polygon","args-arr__4757__auto__","argseq__4758__auto__","p__53818","map__53819","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","seq53791","G__53792","G__53793","points","paths","convexity","faber.model/sphere","r","faber.model/cube","z","faber.model/cylinder","rs","h","cljs.core/vector?","cljs.core._EQ_","cljs.core/count","vec__53866","cljs.core.nth","r1","r2","faber.model/polyhedron","faces","faber.model/resize","p__53906","vec__53907","seq53896","G__53897","is-auto","cljs.core/Keyword","auto","cljs.core/second","cljs.core/rest","faber.model/translate","p__53914","vec__53915","cljs.core/vec","seq53912","G__53913","faber.model/rotatev","p__53924","vec__53925","seq53920","G__53921","G__53922","a","faber.model/rotatec","p__53930","vec__53931","seq53928","G__53929","faber.model/rotate","seq53945","faber.model.rotatev","faber.model.rotatec","faber.model/scale","p__53999","vec__54000","seq53973","G__53974","faber.model/mirror","p__54028","vec__54029","seq54026","G__54027","faber.model/color","p__54051","vec__54053","seq54033","G__54034","g","b","faber.model/hull","seq54072","faber.model/offset-num","seq54119","G__54120","faber.model/offset-map","p__54189","map__54193","seq54166","G__54167","delta","chamfer","faber.model/offset","seq54216","G__54217","options","cljs.core.partial","cljs.core/map?","faber.model/minkowski","seq54221","faber.model/multmatrix","seq54230","G__54231","m","faber.model/union","seq54253","faber.model/intersection","seq54268","faber.model/difference","seq54277","faber.model/projection","seq54282","G__54283","cut","faber.model/project","seq54300","faber.model/cut","seq54303","faber.model/render","seq54308","vec__54310","seq__54311","first__54312","c","bl","faber.model/excise","seq54313","nodes","faber.model.difference","cljs.core/last","cljs.core.drop_last"],"sourcesContent":["(ns faber.model\n  ;(:refer-clojure :exclude [import use])\n  (:require [clojure.walk :refer [postwalk]]\n            ;[scad-clj.text :refer [text-parts]]\n            )\n  )\n\n\n(def pi Math/PI)\n(def tau (* 2 pi))\n\n(defn rad->deg [radians]\n  (/ (* radians 180) pi))\n\n(defn deg->rad [degrees]\n  (* (/ degrees 180) pi))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; special variables\n(defn with-fn [x & block]\n  `(:with-fn ~x ~@block)\n  )\n\n(defn with-fa [x & block]\n  `(:with-fa ~x ~@block)\n  )\n\n(defn with-fs [x & block]\n  `(:with-fs ~x ~@block)\n  )\n\n\n(comment\n  ; couldn't make these macros work in the self hosted clojurescript\n  (defn fa! [x]\n    `(:fa ~x))\n\n  (defn fn! [x]\n    `(:fn ~x))\n\n  (defn fs! [x]\n    `(:fs ~x))\n\n  (def ^:dynamic *fa* false)\n  (def ^:dynamic *fn* false)\n  (def ^:dynamic *fs* false)\n  (def ^:dynamic *center* true)\n\n  (defmacro with-fa [x & block]\n    (with-f* 'faber.model/*fa* x block))\n\n  (defmacro with-fn [x & block]\n    (with-f* 'faber.model/*fn* x block))\n\n  (defmacro with-fs [x & block]\n    (with-f* 'faber.model/*fs* x block))\n\n  (defmacro with-center [x & block]\n    (with-f* 'faber.model/*center* x block)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Modifier\n\n(defn modifier [modifier & block]\n  (if (some #{modifier} [:# :% :* :!])\n    `(:modifier ~(name modifier) ~@block)))\n\n(defn -# [& block] (modifier :# block))\n(defn -% [& block] (modifier :% block))\n(defn -* [& block] (modifier :* block))\n(defn -! [& block] (modifier :! block))\n\n\n(comment\n  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  ;; Include & call into Scad libraries\n\n  (defn import [file]\n    `(:import ~file))\n\n  (defn include [library]\n    `(:include {:library ~library}))\n\n  (defn use [library]\n    `(:use {:library ~library}))\n\n  (defn libraries [& {uses :use includes :include}]\n    (concat\n      (map use uses)\n      (map include includes)))\n\n  (defn call [function & args]\n    `(:call {:function ~(name function)} ~args))\n\n  (defn call-module [module & args]\n    `(:call-module-no-block {:module ~(name module)} ~args))\n  (defn call-module-with-block [module & args]\n    `(:call-module-with-block {:module ~(name module)} ~args)))\n(defn define-module [module & body]\n  `(:define-module {:module ~(name module)} ~body))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 2D\n\n(defn square [x y]\n  `(:square ~{:x x, :y y}))\n\n#_(defn circle [r]\n  (let [args (merge {:r r}\n                    (if *fa* {:fa *fa*})\n                    (if *fn* {:fn *fn*})\n                    (if *fs* {:fs *fs*}))]\n    `(:circle ~args)))\n\n(defn polygon\n  ([points]\n   `(:polygon {:points ~points}))\n  ([points paths & {:keys [convexity]}]\n   `(:polygon {:points ~points, :paths ~paths, :convexity ~convexity})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; 3D\n\n(defn sphere [r]\n  `(:sphere ~r))\n\n(defn cube [x y z]\n  `(:cube ~{:x x, :y y, :z z}))\n\n(defn cylinder [rs h]\n  (if (and (vector? rs) (= 2 (count rs)))\n    (let [[r1 r2] rs]\n      `(:cylinder ~h ~r1 ~r2))\n    `(:cylinder ~h ~rs)))\n\n(defn polyhedron\n  [points faces]\n  `(:polyhedron ~points ~faces))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; transformations\n\n(defn resize [[x y z] & block]\n  (let [is-auto (and (keyword? (first block))\n                     (= :auto (first block)))\n        auto (if is-auto (second block))\n        block (if is-auto (rest (rest block)) block)]\n    `(:resize {:x ~x :y ~y :z ~z :auto ~auto} ~@block)))\n\n(defn translate [[x y z] & block]\n  `(:translate [~x ~y ~z] ~@block))\n\n; multi-arity can't have more than one signature with variable arity. '&'.\n(defn rotatev [a [x y z] & block]\n  `(:rotatev ~a [~x ~y ~z] ~@block))\n\n(defn rotatec [[x y z] & block]\n  `(:rotatec [~x ~y ~z] ~@block))\n\n(defn rotate [& block]\n  (if (number? (first block))\n    (rotatev (first block) (second block) (rest (rest block)))\n    (rotatec (first block) (rest block))))\n\n(defn scale [[x y z] & block]\n  `(:scale [~x ~y ~z] ~@block))\n\n(defn mirror [[x y z] & block]\n  `(:mirror [~x ~y ~z] ~@block))\n\n(defn color [[r g b a] & block]\n  `(:color [~r ~g ~b ~a] ~@block))\n\n(defn hull [ & block]\n  `(:hull  ~@block))\n\n(defn- offset-num\n  \"A narrow implementation of OpenSCAD\u2019 offset() for radius only.\"\n  [r & block]\n  `(:offset {:r ~r} ~@block))\n\n(defn- offset-map\n  \"A broad implementation of OpenSCAD\u2019s offset(), supporting more parameters.\"\n  [{:keys [r delta chamfer]} & block]\n  `(:offset {:r ~r :delta ~delta :chamfer ~chamfer} ~@block))\n\n(defn offset\n  \"Implement OpenSCAD\u2019s offset() for two different call signatures.\"\n  [options & block]\n  (apply (partial (if (map? options) offset-map offset-num) options) block))\n\n(defn minkowski [ & block]\n  `(:minkowski ~@block))\n\n(defn multmatrix [m & block]\n  `(:multmatrix ~m ~@block))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Boolean operations\n\n(defn union [ & block]\n  `(:union  ~@block))\n\n(defn intersection [ & block]\n  `(:intersection  ~@block))\n\n(defn difference [ & block]\n  `(:difference  ~@block))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; other\n\n#_(defn extrude-linear [{:keys [height twist convexity center slices scale] :or {center *center*}} & block]\n  `(:extrude-linear {:height ~height :twist ~twist :convexity ~convexity :center ~center :slices ~slices :scale ~scale} ~@block))\n\n#_(defn extrude-rotate\n  ([block]\n   (let [args (if *fn* {:fn *fn*} {})]\n     `(:extrude-rotate ~args ~block)))\n  ([{:keys [convexity angle]} block]\n   (let [args (merge {:convexity convexity :angle angle}\n                     (if *fn* {:fn *fn*} {}))]\n     `(:extrude-rotate ~args ~block))))\n\n#_(defn surface [filepath & {:keys [convexity center invert] :or {center *center*}}]\n  `(:surface ~{:filepath filepath :convexity convexity :center center :invert invert}))\n\n(defn projection [cut & block]\n  `(:projection {:cut cut} ~@block))\n\n(defn project [& block]\n  `(:projection {:cut false} ~@block))\n\n(defn cut [& block]\n  `(:projection {:cut true} ~@block))\n\n(defn render [& block]\n  (if (and (seq block)\n           (number? (first block)))\n    (let [[c & bl] block]\n      `(:render {:convexity ~c} ~@bl))\n    `(:render {:convexity 1} ~@block)))\n\n(defn excise\n  \"Like difference, but subtraction is from the last node, not the first.\"\n  [& nodes]\n  (difference (last nodes) (drop-last nodes)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; text\n\n#_(defn text [text & {:as args}]\n  (let [args (merge {:text text}\n                    (if *fn* {:fn *fn*})\n                    args)]\n    `(:text ~args)))\n\n#_(defn polygon-text [font size text]\n  (let [even-odd-paths (text-parts font size text)]\n    (:shape\n      (reduce (fn [{:keys [union? shape]} paths]\n                (if union?\n                  {:union? false\n                   :shape (apply union shape (map polygon paths))}\n                  {:union? true\n                   :shape (apply difference shape (map polygon paths))}))\n              {:union? true}\n              even-odd-paths))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; extended\n\n#_(defn extrude-curve [{:keys [height radius angle n]} block]\n  (let [lim (Math/floor (/ n 2))\n        phi (/ (/ angle (dec n)) 2)]\n    (apply union\n           (map (fn [x]\n                  (let [theta (* 0.5 angle (/ x lim))\n                        r radius\n                        dx (* r (- (Math/sin theta)\n                                   (* theta (Math/cos theta))))\n                        dz (* r (+ (Math/cos theta)\n                                   (* theta (Math/sin theta)) (- 1)))]\n                    (translate [(+ dx (* 0 (Math/sin theta) (/ height 2)))\n                                0\n                                (+ dz (* 0 (Math/cos theta) (/ height 2)))]\n                               (rotate theta [0 1 0]\n                                       (intersection\n                                         (translate [(* r theta) 0 0]\n                                                    (cube (* 2 (+  r height) (Math/sin phi))\n                                                          1000 (* 2 height)))\n                                         (extrude-linear {:height height}\n                                                         block))))))\n                (range (- lim) (inc lim))))))\n"]}