{"version":3,"sources":["thi/ng/math/core.cljc"],"mappings":"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","names":["thi.ng.math.core/PI","Math/PI","thi.ng.math.core/TWO_PI","thi.ng.math.core/HALF_PI","thi.ng.math.core/THIRD_PI","thi.ng.math.core/QUARTER_PI","thi.ng.math.core/SIXTH_PI","thi.ng.math.core/THREE_HALVES_PI","thi.ng.math.core/MAX","thi.ng.math.core/MIN","thi.ng.math.core/SQRT2","Math/sqrt","thi.ng.math.core/SQRT3","thi.ng.math.core/PHI","thi.ng.math.core/THIRD","thi.ng.math.core/LOG2","Math/log","thi.ng.math.core/INF+","js/Number","thi.ng.math.core/INF-","thi.ng.math.core/DEG","thi.ng.math.core/RAD","thi.ng.math.core/*eps*","thi.ng.math.core/*rnd*","Math/random","thi.ng.math.core/abs","Math/abs","thi.ng.math.core/abs-diff","x","y","G__45320","thi.ng.math.core/sign","thi$ng$math$core$PDeltaEquals$delta_EQ_$dyn","x__4428__auto__","m__4429__auto__","thi.ng.math.core/delta=","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","var_args","G__45327","js/Error","thi.ng.math.core/PDeltaEquals","a","b","eps","goog.object/set","cljs.core/PROTOCOL_SENTINEL","G__45333","G__45334","cljs.core/PersistentVector","cljs.core/sequential?","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/List","cljs.core/LazySeq","cljs.core/IndexedSeq","_","thi.ng.math.core/ensure-even","cljs.core/even?","thi.ng.math.core/ensure-odd","G__45367","thi.ng.math.core/signum","delta","thi.ng.math.core/clamp","min","max","thi.ng.math.core/clamp-normalized","G__45381","thi.ng.math.core/map-interval","p__45384","p__45385","vec__45386","cljs.core.nth","vec__45389","in1","in2","out1","out2","G__45396","thi.ng.math.core/map-interval-clamped","p__45399","p__45400","vec__45401","vec__45404","p__45415","p__45416","p__45417","vec__45418","vec__45421","vec__45424","thi.ng.math.core.map_interval_clamped","thi.ng.math.core.map_interval","c1","c2","G__45431","thi.ng.math.core/in-range?","p__45434","vec__45435","thi.ng.math.core/wrap-range","cljs.core/rem","thi.ng.math.core/norm-range","n","p1__45442#","cljs.core.map","cljs.core.range","thi.ng.math.core/mix","t","thi.ng.math.core/step","edge","thi.ng.math.core/smoothstep","e0","e1","thi.ng.math.core/mix-circular","thi.ng.math.core/mix-circular-flipped","thi.ng.math.core/mix-cosine","Math/cos","thi.ng.math.core/mix-bezier","tsq","invt","itsq","thi.ng.math.core/mix-exp","e","Math/pow","thi.ng.math.core/mix-decimated","thi.ng.math.core/mix-lens","pos","strength","v","G__45463","G__45464","G__45465","fexpr__45462","G__45467","G__45468","G__45469","fexpr__45466","thi.ng.math.core/mix-bounce","k","t'","Math/sin","thi.ng.math.core/floor","Math/floor","thi.ng.math.core/ceil","Math/ceil","thi.ng.math.core/roundto","prec","thi.ng.math.core/ceil-pow2","pow2","thi.ng.math.core/floor-pow2","thi.ng.math.core/bit-count","thi.ng.math.core/trunc","thi.ng.math.core/fract","thi.ng.math.core/fdim","thi.ng.math.core/radians","thi.ng.math.core/degrees","thi.ng.math.core/maxmag","ax","ay","thi.ng.math.core/minmag","thi.ng.math.core/ldexp","thi.ng.math.core/remquo","f","cljs.core._EQ_","thi.ng.math.core/hypot","thi.ng.math.core/rootn","thi.ng.math.core/rsqrt","r","thi.ng.math.core/impulse","h","Math/exp","G__45497","thi.ng.math.core/sinc","freq","x'","G__45502","thi.ng.math.core/random","thi.ng.math.core/randnorm","thi.ng.math.core/percentile-index","num","Math/round","thi.ng.math.core/percentile","sorted","thi.ng.math.core/quartile-index","thi.ng.math.core/quartile-range","thi.ng.math.core/quartile","vec__45509","cljs.core.drop","cljs.core.take","G__45516","thi.ng.math.core/normdist-weights","thi.ng.math.core.normdist_weights","scale","ws","cljs.core.repeatedly","s","cljs.core.reduce","cljs.core/+","p1__45514#"],"sourcesContent":["(ns thi.ng.math.core\n  (:refer-clojure :exclude [bit-count])\n  #?(:clj\n     (:require [thi.ng.math.macros :as mm])\n     :cljs\n     (:require-macros [thi.ng.math.macros :as mm])))\n\n(def ^:const PI Math/PI)\n(def ^:const TWO_PI (* PI 2.0))\n(def ^:const HALF_PI (/ PI 2.0))\n(def ^:const THIRD_PI (/ PI 3.0))\n(def ^:const QUARTER_PI (/ PI 4.0))\n(def ^:const SIXTH_PI (/ PI 6.0))\n(def ^:const THREE_HALVES_PI (* PI 1.5))\n\n(def ^:const MAX 1.7976931348623157E308)\n(def ^:const MIN 4.9E-324)\n\n(def ^:const SQRT2 (Math/sqrt 2))\n(def ^:const SQRT3 (Math/sqrt 3))\n(def ^:const PHI (/ (inc (Math/sqrt 5.0)) 2))\n\n(def ^:const THIRD (/ 1.0 3.0))\n\n(def ^:const LOG2 (Math/log 2.0))\n\n(def ^:const INF+ #?(:clj Double/POSITIVE_INFINITY :cljs (.-POSITIVE_INFINITY js/Number)))\n(def ^:const INF- #?(:clj Double/NEGATIVE_INFINITY :cljs (.-NEGATIVE_INFINITY js/Number)))\n\n(def ^:const DEG (/ 180.0 PI))\n(def ^:const RAD (/ PI 180.0))\n(def ^:dynamic *eps* 1e-6)\n(def ^:dynamic *rnd* #?(:clj (java.util.Random.) :cljs Math/random))\n\n#?(:clj\n   (defn abs [x] (if (neg? x) (- x) x))\n   :cljs\n   (def abs Math/abs))\n\n(defn abs-diff\n  [x y] (abs (- x y)))\n\n(defn sign\n  [x] (if (zero? x) 0 (if (pos? x) 1 -1)))\n(defprotocol PDeltaEquals\n  (delta= [a b] [a b eps]))\n\n(extend-protocol PDeltaEquals\n  #?@(:clj\n       [Integer\n        (delta= ([a b] (if (number? b) (<= (abs (- a b)) *eps*))) ([a b eps] (if (number? b) (<= (abs (- a b)) eps))))\n        Long\n        (delta= ([a b] (if (number? b) (<= (abs (- a b)) *eps*))) ([a b eps] (if (number? b) (<= (abs (- a b)) eps))))\n        Float\n        (delta= ([a b] (if (number? b) (<= (abs (- a b)) *eps*))) ([a b eps] (if (number? b) (<= (abs (- a b)) eps))))\n        Double]\n       :cljs [number])\n  (delta= ([a b] (if (number? b) (<= (abs (- a b)) *eps*))) ([a b eps] (if (number? b) (<= (abs (- a b)) eps))))\n\n  #?(:clj clojure.lang.PersistentVector :cljs PersistentVector)\n  (delta=\n   ([a b]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b))\n                 (recur (next a) (next b))\n                 false)\n               true))))\n   ([a b eps]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b) eps)\n                 (recur (next a) (next b))\n                 false)\n               true)))))\n  #?(:clj clojure.lang.PersistentList :cljs List)\n  (delta=\n   ([a b]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b))\n                 (recur (next a) (next b))\n                 false)\n               true))))\n   ([a b eps]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b) eps)\n                 (recur (next a) (next b))\n                 false)\n               true)))))\n  #?(:clj clojure.lang.LazySeq :cljs LazySeq)\n  (delta=\n   ([a b]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b))\n                 (recur (next a) (next b))\n                 false)\n               true))))\n   ([a b eps]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b) eps)\n                 (recur (next a) (next b))\n                 false)\n               true)))))\n  #?(:clj clojure.lang.PersistentVector$ChunkedSeq :cljs IndexedSeq)\n  (delta=\n   ([a b]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b))\n                 (recur (next a) (next b))\n                 false)\n               true))))\n   ([a b eps]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b) eps)\n                 (recur (next a) (next b))\n                 false)\n               true)))))\n\n  nil\n  (delta= ([_ b] (nil? b)) ([_ b _] (nil? b))))\n(defn ensure-even\n  \"Returns x if even or `x+1` if `x` is odd.\"\n  [x] (if (even? x) x (inc x)))\n\n(defn ensure-odd\n  \"Returns x if odd or `x+1` if `x` is even.\"\n  [x] (if (even? x) (inc x) x))\n\n(defn signum\n  ([x] (if (neg? x) -1 (if (zero? x) 0 1)))\n  ([x delta]\n     (if (delta= 0.0 x delta) 0\n         (if (neg? x) -1 1))))\n(defn clamp\n  [x min max] (if (< x min) min (if (> x max) max x)))\n\n(defn clamp-normalized\n  [x] (if (< x -1.0) -1.0 (if (> x 1.0) 1.0 x)))\n\n(defn map-interval\n  \"Maps x from one interval into another. Intervals can be defined as vectors.\"\n  ([x [in1 in2] [out1 out2]]\n     (mm/madd (- out2 out1) (mm/subdiv x in1 in2 in1) out1))\n  ([x in1 in2 out1 out2]\n     (mm/madd (- out2 out1) (mm/subdiv x in1 in2 in1) out1)))\n\n(defn map-interval-clamped\n  ([x [in1 in2] [out1 out2]]\n     (map-interval-clamped x in1 in2 out1 out2))\n  ([x in1 in2 out1 out2]\n     (if (<= x in1)\n       out1\n       (if (>= x in2)\n         out2\n         (map-interval x in1 in2 out1 out2))))\n  ([x [in1 in2] [out1 out2] [c1 c2]]\n     (clamp (map-interval x in1 in2 out1 out2) c1 c2))\n  ([x in1 in2 out1 out2 c1 c2]\n     (clamp (map-interval x in1 in2 out1 out2) c1 c2)))\n\n(defn in-range?\n  \"Returns true if x >= min and x <= max.\"\n  ([[min max] x]\n     (if (>= x min) (<= x max)))\n  ([min max x]\n     (if (>= x min) (<= x max))))\n\n(defn wrap-range\n  ([x y] (let [x (rem x y)] (if (neg? x) (+ x y) x))))\n\n(defn norm-range\n  \"Returns lazy-seq of n values in the closed interval [0.0, 1.0] at\n  resolution 1/x.\"\n  [n] (map #(/ % (double n)) (range (inc n))))\n(defn mix\n  [a b t] (mm/submadd b a t a))\n\n(defn step\n  [edge x] (if (< x edge) 0.0 1.0))\n\n(defn smoothstep\n  [e0 e1 x]\n  (let [t (clamp (mm/subdiv x e0 e1 e0) 0.0 1.0)]\n    (* t (* t (mm/madd t -2.0 3.0)))))\n\n(defn mix-circular\n  [a b t]\n  (let [t (- 1.0 t)]\n    (mm/submadd b a (Math/sqrt (- 1.0 (* t t))) a)))\n\n(defn mix-circular-flipped\n  [a b t] (mm/submadd b a (- (- (Math/sqrt (- 1.0 (* t t))) 1.0)) a))\n\n(defn mix-cosine\n  [a b t] (mm/submadd a b (mm/madd (Math/cos (* t PI)) 0.5 0.5) b))\n\n(defn mix-bezier\n  [a b t c1 c2]\n  (let [tsq (* t t)\n        invt (- 1.0 t)\n        itsq (* invt invt)]\n    (mm/add\n     (mm/mul a t itsq)\n     (mm/mul (mm/submadd b a c1 a) 3.0 t itsq)\n     (mm/mul (mm/submadd b a c2 b) 3.0 tsq invt)\n     (mm/mul b t tsq))))\n\n(defn mix-exp\n  [a b t e] (mm/submadd b a (Math/pow t e) a))\n\n(defn mix-decimated\n  [a b t n] (mm/submadd b a (/ (int (* t n)) (double n)) a))\n\n(defn mix-lens\n  [a b t pos strength]\n  (let [v (mm/submadd b a t a)]\n    (+ (if (< t pos)\n         (mm/subm\n          ((if (pos? strength) mix-circular-flipped mix-circular)\n           a (mm/submadd b a pos a) (/ t pos)) v (abs strength))\n         (mm/subm\n          ((if (neg? strength) mix-circular-flipped mix-circular)\n           (mm/submadd b a pos a) b (mm/subdiv t pos 1.0 pos)) v (abs strength)))\n       v)))\n\n(defn mix-bounce\n  [a b t k]\n  (if-not (zero? t)\n    (let [t' (* t k)\n          t' (- 1.0 (* (/ (Math/sin t') t') (Math/cos (* t HALF_PI))))]\n      (mm/submadd b a t a))\n    a))\n(defn floor\n  [x]\n  #?(:clj\n     (long (Math/floor x))\n     :cljs\n     (Math/floor x)))\n\n(defn ceil\n  [x]\n  #?(:clj\n     (long (Math/ceil x))\n     :cljs\n     (Math/ceil x)))\n\n(defn roundto\n  [x prec] (* (floor (+ (/ x prec) 0.5)) prec))\n\n(defn ceil-pow2\n  [x]\n  (loop [pow2 1]\n    (if (>= pow2 x) pow2 (recur (bit-shift-left pow2 1)))))\n\n(defn floor-pow2\n  [x]\n  #?(:clj\n     (long (Math/pow 2 (long (/ (Math/log x) LOG2))))\n     :cljs\n     (Math/pow 2 (int (/ (Math/log x) LOG2)))))\n\n(defn bit-count\n  [x] (ceil (/ (Math/log x) LOG2)))\n\n(defn trunc\n  [x] (if (neg? x) (ceil x) (floor x)))\n\n(defn fract\n  [x] (- x (Math/floor x)))\n\n(defn fdim\n  [x y] (if (> x y) (- x y) 0))\n(defn radians [x] (* x RAD))\n\n(defn degrees [x] (* x DEG))\n(defn maxmag\n  [x y]\n  (let [ax (abs x) ay (abs y)]\n    (cond\n     (> ax ay) x\n     (> ay ax) y\n     :default x)))\n\n(defn minmag\n  [x y]\n  (let [ax (abs x) ay (abs y)]\n    (cond\n     (< ax ay) x\n     (< ay ax) y\n     :default x)))\n\n(defn ldexp\n  [x k] (* x (Math/pow 2 (int k))))\n\n(defn remquo\n  [x y]\n  (let [k (/ x y)\n        f (fract k)\n        k (cond\n           (= f 0.5) (if (even? (int k)) (int k) (ceil k))\n           (< f 0.5) (floor k)\n           :default (ceil k))]\n    (- x (* k y))))\n\n(defn hypot\n  [x y] (Math/sqrt (mm/madd x x y y)))\n\n(defn rootn\n  [x y] (Math/pow x (/ 1.0 y)))\n\n(defn rsqrt\n  [x] (let [r (Math/sqrt x)] (if (pos? r) (/ 1.0 r) 0)))\n\n(defn impulse\n  [k t]\n  (let [h (* k t)] (* h (Math/exp (- 1.0 h)))))\n\n(defn sinc\n  ([x] (if (zero? x) 0.0 (/ (Math/sin x) x)))\n  ([x freq] (if (zero? x) 0.0 (let [x' (* x freq)] (/ (Math/sin x') x')))))\n(defn random\n  #?@(:clj\n      [([] (.nextDouble ^java.util.Random *rnd*))\n       ([max] (* (.nextDouble ^java.util.Random *rnd*) max))\n       ([min max] (mm/submadd max min (.nextDouble ^java.util.Random *rnd*) min))]\n      :cljs\n      [([] (*rnd*))\n       ([max] (* (*rnd*) max))\n       ([min max] (mm/submadd max min (*rnd*) min))]))\n\n(defn randnorm\n  []\n  #?(:clj\n     (dec (* (.nextDouble ^java.util.Random *rnd*) 2.0))\n     :cljs\n     (dec (* (*rnd*) 2.0))))\n(defn percentile-index\n  [n num]\n  (dec\n   (if (< n 100)\n     (int (Math/round (mm/madd (/ n 100.0) num 0.5)))\n     num)))\n\n(defn percentile\n  [n sorted]\n  (->> sorted\n       (count)\n       (percentile-index n)\n       (nth sorted)))\n\n(defn quartile-index\n  [n num] (percentile-index (* n 25) num))\n\n(defn quartile-range\n  [n num]\n  (let [a (quartile-index (dec n) num)\n        b (quartile-index n num)]\n    [a (if (= n 4) (inc b) b)]))\n\n(defn quartile\n  \"Takes a quartile index (1..4) and sorted seq of samples, returns set of items in quartile.\"\n  [n sorted]\n  (let [[a b] (quartile-range n (count sorted))]\n    (->> sorted (drop a) (take (- b a)))))\n(defn normdist-weights\n  ([n] (normdist-weights n 1.0))\n  ([n scale]\n     (let [ws (repeatedly n random)\n           s (/ scale (reduce + ws))]\n       (map #(* s %) ws))))\n"]}