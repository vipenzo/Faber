{
"version":3,
"file":"module$node_modules$three_js_csg$index.js",
"lineCount":25,
"mappings":"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",
"sources":["node_modules/three-js-csg/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three_js_csg$index\"] = function(global,require,module,exports) {\n'use strict';\n\t\n\tvar ThreeBSP,\n\t\tEPSILON = 1e-5,\n\t\tCOPLANAR = 0,\n\t\tFRONT = 1,\n\t\tBACK = 2,\n\t\tSPANNING = 3;\n\t\n  module.exports = function( THREE ) {\n    var ThreeBSP = function( geometry ) {\n      // Convert THREE.Geometry to ThreeBSP\n      var i, _length_i,\n        face, vertex, faceVertexUvs, uvs,\n        polygon,\n        polygons = [],\n        tree;\n    \n      if ( geometry instanceof THREE.Geometry ) {\n        this.matrix = new THREE.Matrix4;\n      } else if ( geometry instanceof THREE.Mesh ) {\n        // #todo: add hierarchy support\n        geometry.updateMatrix();\n        this.matrix = geometry.matrix.clone();\n        geometry = geometry.geometry;\n      } else if ( geometry instanceof ThreeBSP.Node ) {\n        this.tree = geometry;\n        this.matrix = new THREE.Matrix4;\n        return this;\n      } else {\n        throw 'ThreeBSP: Given geometry is unsupported';\n      }\n    \n      for ( i = 0, _length_i = geometry.faces.length; i < _length_i; i++ ) {\n        face = geometry.faces[i];\n        faceVertexUvs = geometry.faceVertexUvs[0][i];\n        polygon = new ThreeBSP.Polygon;\n        \n        if ( face instanceof THREE.Face3 ) {\n          vertex = geometry.vertices[ face.a ];\n                                  uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[0].x, faceVertexUvs[0].y ) : null;\n                                  vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[0], uvs );\n          vertex.applyMatrix4(this.matrix);\n          polygon.vertices.push( vertex );\n          \n          vertex = geometry.vertices[ face.b ];\n                                  uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[1].x, faceVertexUvs[1].y ) : null;\n                                  vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n          vertex.applyMatrix4(this.matrix);\n          polygon.vertices.push( vertex );\n          \n          vertex = geometry.vertices[ face.c ];\n                                  uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[2].x, faceVertexUvs[2].y ) : null;\n                                  vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n          vertex.applyMatrix4(this.matrix);\n          polygon.vertices.push( vertex );\n        } else if ( typeof THREE.Face4 ) {\n          vertex = geometry.vertices[ face.a ];\n                                  uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[0].x, faceVertexUvs[0].y ) : null;\n                                  vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[0], uvs );\n          vertex.applyMatrix4(this.matrix);\n          polygon.vertices.push( vertex );\n          \n          vertex = geometry.vertices[ face.b ];\n                                  uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[1].x, faceVertexUvs[1].y ) : null;\n                                  vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[1], uvs );\n          vertex.applyMatrix4(this.matrix);\n          polygon.vertices.push( vertex );\n          \n          vertex = geometry.vertices[ face.c ];\n                                  uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[2].x, faceVertexUvs[2].y ) : null;\n                                  vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n          vertex.applyMatrix4(this.matrix);\n          polygon.vertices.push( vertex );\n          \n          vertex = geometry.vertices[ face.d ];\n                                  uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[3].x, faceVertexUvs[3].y ) : null;\n                                  vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[3], uvs );\n          vertex.applyMatrix4(this.matrix);\n          polygon.vertices.push( vertex );\n        } else {\n          throw 'Invalid face type at index ' + i;\n        }\n        \n        polygon.calculateProperties();\n        polygons.push( polygon );\n      };\n    \n      this.tree = new ThreeBSP.Node( polygons );\n    };\n    ThreeBSP.prototype.subtract = function( other_tree ) {\n      var a = this.tree.clone(),\n        b = other_tree.tree.clone();\n      \n      a.invert();\n      a.clipTo( b );\n      b.clipTo( a );\n      b.invert();\n      b.clipTo( a );\n      b.invert();\n      a.build( b.allPolygons() );\n      a.invert();\n      a = new ThreeBSP( a );\n      a.matrix = this.matrix;\n      return a;\n    };\n    ThreeBSP.prototype.union = function( other_tree ) {\n      var a = this.tree.clone(),\n        b = other_tree.tree.clone();\n      \n      a.clipTo( b );\n      b.clipTo( a );\n      b.invert();\n      b.clipTo( a );\n      b.invert();\n      a.build( b.allPolygons() );\n      a = new ThreeBSP( a );\n      a.matrix = this.matrix;\n      return a;\n    };\n    ThreeBSP.prototype.intersect = function( other_tree ) {\n      var a = this.tree.clone(),\n        b = other_tree.tree.clone();\n      \n      a.invert();\n      b.clipTo( a );\n      b.invert();\n      a.clipTo( b );\n      b.clipTo( a );\n      a.build( b.allPolygons() );\n      a.invert();\n      a = new ThreeBSP( a );\n      a.matrix = this.matrix;\n      return a;\n    };\n    ThreeBSP.prototype.toGeometry = function() {\n      var i, j,\n        matrix = new THREE.Matrix4().getInverse( this.matrix ),\n        geometry = new THREE.Geometry(),\n        polygons = this.tree.allPolygons(),\n        polygon_count = polygons.length,\n        polygon, polygon_vertice_count,\n        vertice_dict = {},\n        vertex_idx_a, vertex_idx_b, vertex_idx_c,\n        vertex, face,\n        verticeUvs;\n    \n      for ( i = 0; i < polygon_count; i++ ) {\n        polygon = polygons[i];\n        polygon_vertice_count = polygon.vertices.length;\n        \n        for ( j = 2; j < polygon_vertice_count; j++ ) {\n          verticeUvs = [];\n          \n          vertex = polygon.vertices[0];\n          verticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n          vertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n          vertex.applyMatrix4(matrix);\n          \n          if ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n            vertex_idx_a = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n          } else {\n            geometry.vertices.push( vertex );\n            vertex_idx_a = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n          }\n          \n          vertex = polygon.vertices[j-1];\n          verticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n          vertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n          vertex.applyMatrix4(matrix);\n          if ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n            vertex_idx_b = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n          } else {\n            geometry.vertices.push( vertex );\n            vertex_idx_b = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n          }\n          \n          vertex = polygon.vertices[j];\n          verticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n          vertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n          vertex.applyMatrix4(matrix);\n          if ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n            vertex_idx_c = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n          } else {\n            geometry.vertices.push( vertex );\n            vertex_idx_c = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n          }\n          \n          face = new THREE.Face3(\n            vertex_idx_a,\n            vertex_idx_b,\n            vertex_idx_c,\n            new THREE.Vector3( polygon.normal.x, polygon.normal.y, polygon.normal.z )\n          );\n          \n          geometry.faces.push( face );\n          geometry.faceVertexUvs[0].push( verticeUvs );\n        }\n        \n      }\n      return geometry;\n    };\n    ThreeBSP.prototype.toMesh = function( material ) {\n      var geometry = this.toGeometry(),\n        mesh = new THREE.Mesh( geometry, material );\n      \n      mesh.position.setFromMatrixPosition( this.matrix );\n      mesh.rotation.setFromRotationMatrix( this.matrix );\n      \n      return mesh;\n    };\n    \n    \n    ThreeBSP.Polygon = function( vertices, normal, w ) {\n      if ( !( vertices instanceof Array ) ) {\n        vertices = [];\n      }\n      \n      this.vertices = vertices;\n      if ( vertices.length > 0 ) {\n        this.calculateProperties();\n      } else {\n        this.normal = this.w = undefined;\n      }\n    };\n    ThreeBSP.Polygon.prototype.calculateProperties = function() {\n      var a = this.vertices[0],\n        b = this.vertices[1],\n        c = this.vertices[2];\n        \n      this.normal = b.clone().subtract( a ).cross(\n        c.clone().subtract( a )\n      ).normalize();\n      \n      this.w = this.normal.clone().dot( a );\n      \n      return this;\n    };\n    ThreeBSP.Polygon.prototype.clone = function() {\n      var i, vertice_count,\n        polygon = new ThreeBSP.Polygon;\n      \n      for ( i = 0, vertice_count = this.vertices.length; i < vertice_count; i++ ) {\n        polygon.vertices.push( this.vertices[i].clone() );\n      };\n      polygon.calculateProperties();\n      \n      return polygon;\n    };\n    \n    ThreeBSP.Polygon.prototype.flip = function() {\n      var i, vertices = [];\n      \n      this.normal.multiplyScalar( -1 );\n      this.w *= -1;\n      \n      for ( i = this.vertices.length - 1; i >= 0; i-- ) {\n        vertices.push( this.vertices[i] );\n      };\n      this.vertices = vertices;\n      \n      return this;\n    };\n    ThreeBSP.Polygon.prototype.classifyVertex = function( vertex ) {  \n      var side_value = this.normal.dot( vertex ) - this.w;\n      \n      if ( side_value < -EPSILON ) {\n        return BACK;\n      } else if ( side_value > EPSILON ) {\n        return FRONT;\n      } else {\n        return COPLANAR;\n      }\n    };\n    ThreeBSP.Polygon.prototype.classifySide = function( polygon ) {\n      var i, vertex, classification,\n        num_positive = 0,\n        num_negative = 0,\n        vertice_count = polygon.vertices.length;\n      \n      for ( i = 0; i < vertice_count; i++ ) {\n        vertex = polygon.vertices[i];\n        classification = this.classifyVertex( vertex );\n        if ( classification === FRONT ) {\n          num_positive++;\n        } else if ( classification === BACK ) {\n          num_negative++;\n        }\n      }\n      \n      if ( num_positive > 0 && num_negative === 0 ) {\n        return FRONT;\n      } else if ( num_positive === 0 && num_negative > 0 ) {\n        return BACK;\n      } else if ( num_positive === 0 && num_negative === 0 ) {\n        return COPLANAR;\n      } else {\n        return SPANNING;\n      }\n    };\n    ThreeBSP.Polygon.prototype.splitPolygon = function( polygon, coplanar_front, coplanar_back, front, back ) {\n      var classification = this.classifySide( polygon );\n      \n      if ( classification === COPLANAR ) {\n        \n        ( this.normal.dot( polygon.normal ) > 0 ? coplanar_front : coplanar_back ).push( polygon );\n        \n      } else if ( classification === FRONT ) {\n        \n        front.push( polygon );\n        \n      } else if ( classification === BACK ) {\n        \n        back.push( polygon );\n        \n      } else {\n        \n        var vertice_count,\n          i, j, ti, tj, vi, vj,\n          t, v,\n          f = [],\n          b = [];\n        \n        for ( i = 0, vertice_count = polygon.vertices.length; i < vertice_count; i++ ) {\n          \n          j = (i + 1) % vertice_count;\n          vi = polygon.vertices[i];\n          vj = polygon.vertices[j];\n          ti = this.classifyVertex( vi );\n          tj = this.classifyVertex( vj );\n          \n          if ( ti != BACK ) f.push( vi );\n          if ( ti != FRONT ) b.push( vi );\n          if ( (ti | tj) === SPANNING ) {\n            t = ( this.w - this.normal.dot( vi ) ) / this.normal.dot( vj.clone().subtract( vi ) );\n            v = vi.interpolate( vj, t );\n            f.push( v );\n            b.push( v );\n          }\n        }\n        \n        \n        if ( f.length >= 3 ) front.push( new ThreeBSP.Polygon( f ).calculateProperties() );\n        if ( b.length >= 3 ) back.push( new ThreeBSP.Polygon( b ).calculateProperties() );\n      }\n    };\n    \n    ThreeBSP.Vertex = function( x, y, z, normal, uv ) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.normal = normal || new THREE.Vector3;\n      this.uv = uv || new THREE.Vector2;\n    };\n    ThreeBSP.Vertex.prototype.clone = function() {\n      return new ThreeBSP.Vertex( this.x, this.y, this.z, this.normal.clone(), this.uv.clone() );\n    };\n    ThreeBSP.Vertex.prototype.add = function( vertex ) {\n      this.x += vertex.x;\n      this.y += vertex.y;\n      this.z += vertex.z;\n      return this;\n    };\n    ThreeBSP.Vertex.prototype.subtract = function( vertex ) {\n      this.x -= vertex.x;\n      this.y -= vertex.y;\n      this.z -= vertex.z;\n      return this;\n    };\n    ThreeBSP.Vertex.prototype.multiplyScalar = function( scalar ) {\n      this.x *= scalar;\n      this.y *= scalar;\n      this.z *= scalar;\n      return this;\n    };\n    ThreeBSP.Vertex.prototype.cross = function( vertex ) {\n      var x = this.x,\n        y = this.y,\n        z = this.z;\n\n      this.x = y * vertex.z - z * vertex.y;\n      this.y = z * vertex.x - x * vertex.z;\n      this.z = x * vertex.y - y * vertex.x;\n      \n      return this;\n    };\n    ThreeBSP.Vertex.prototype.normalize = function() {\n      var length = Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n      \n      this.x /= length;\n      this.y /= length;\n      this.z /= length;\n      \n      return this;\n    };\n    ThreeBSP.Vertex.prototype.dot = function( vertex ) {\n      return this.x * vertex.x + this.y * vertex.y + this.z * vertex.z;\n    };\n    ThreeBSP.Vertex.prototype.lerp = function( a, t ) {\n      this.add(\n        a.clone().subtract( this ).multiplyScalar( t )\n      );\n      \n      this.normal.add(\n        a.normal.clone().sub( this.normal ).multiplyScalar( t )\n      );\n      \n      this.uv.add(\n        a.uv.clone().sub( this.uv ).multiplyScalar( t )\n      );\n      \n      return this;\n    };\n    ThreeBSP.Vertex.prototype.interpolate = function( other, t ) {\n      return this.clone().lerp( other, t );\n    };\n    ThreeBSP.Vertex.prototype.applyMatrix4 = function ( m ) {\n\n      // input: THREE.Matrix4 affine matrix\n\n      var x = this.x, y = this.y, z = this.z;\n\n      var e = m.elements;\n\n      this.x = e[0] * x + e[4] * y + e[8]  * z + e[12];\n      this.y = e[1] * x + e[5] * y + e[9]  * z + e[13];\n      this.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n\n      return this;\n\n    }\n    \n    \n    ThreeBSP.Node = function( polygons ) {\n      var i, polygon_count,\n        front = [],\n        back = [];\n\n      this.polygons = [];\n      this.front = this.back = undefined;\n      \n      if ( !(polygons instanceof Array) || polygons.length === 0 ) return;\n\n      this.divider = polygons[0].clone();\n      \n      for ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n        this.divider.splitPolygon( polygons[i], this.polygons, this.polygons, front, back );\n      }   \n      \n      if ( front.length > 0 ) {\n        this.front = new ThreeBSP.Node( front );\n      }\n      \n      if ( back.length > 0 ) {\n        this.back = new ThreeBSP.Node( back );\n      }\n    };\n    ThreeBSP.Node.isConvex = function( polygons ) {\n      var i, j;\n      for ( i = 0; i < polygons.length; i++ ) {\n        for ( j = 0; j < polygons.length; j++ ) {\n          if ( i !== j && polygons[i].classifySide( polygons[j] ) !== BACK ) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n    ThreeBSP.Node.prototype.build = function( polygons ) {\n      var i, polygon_count,\n        front = [],\n        back = [];\n      \n      if ( !this.divider ) {\n        this.divider = polygons[0].clone();\n      }\n\n      for ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n        this.divider.splitPolygon( polygons[i], this.polygons, this.polygons, front, back );\n      }   \n      \n      if ( front.length > 0 ) {\n        if ( !this.front ) this.front = new ThreeBSP.Node();\n        this.front.build( front );\n      }\n      \n      if ( back.length > 0 ) {\n        if ( !this.back ) this.back = new ThreeBSP.Node();\n        this.back.build( back );\n      }\n    };\n    ThreeBSP.Node.prototype.allPolygons = function() {\n      var polygons = this.polygons.slice();\n      if ( this.front ) polygons = polygons.concat( this.front.allPolygons() );\n      if ( this.back ) polygons = polygons.concat( this.back.allPolygons() );\n      return polygons;\n    };\n    ThreeBSP.Node.prototype.clone = function() {\n      var node = new ThreeBSP.Node();\n      \n      node.divider = this.divider.clone();\n      node.polygons = this.polygons.map( function( polygon ) { return polygon.clone(); } );\n      node.front = this.front && this.front.clone();\n      node.back = this.back && this.back.clone();\n      \n      return node;\n    };\n    ThreeBSP.Node.prototype.invert = function() {\n      var i, polygon_count, temp;\n      \n      for ( i = 0, polygon_count = this.polygons.length; i < polygon_count; i++ ) {\n        this.polygons[i].flip();\n      }\n      \n      this.divider.flip();\n      if ( this.front ) this.front.invert();\n      if ( this.back ) this.back.invert();\n      \n      temp = this.front;\n      this.front = this.back;\n      this.back = temp;\n      \n      return this;\n    };\n    ThreeBSP.Node.prototype.clipPolygons = function( polygons ) {\n      var i, polygon_count,\n        front, back;\n\n      if ( !this.divider ) return polygons.slice();\n      \n      front = [], back = [];\n      \n      for ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n        this.divider.splitPolygon( polygons[i], front, back, front, back );\n      }\n\n      if ( this.front ) front = this.front.clipPolygons( front );\n      if ( this.back ) back = this.back.clipPolygons( back );\n      else back = [];\n\n      return front.concat( back );\n    };\n    \n    ThreeBSP.Node.prototype.clipTo = function( node ) {\n      this.polygons = node.clipPolygons( this.polygons );\n      if ( this.front ) this.front.clipTo( node );\n      if ( this.back ) this.back.clipTo( node );\n    };\n    \n    \n    return ThreeBSP;\n  }\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","THREE","ThreeBSP","geometry","_length_i","polygons","Geometry","matrix","Matrix4","Mesh","updateMatrix","clone","Node","tree","i","faces","length","face","faceVertexUvs","polygon","Polygon","Face3","vertex","vertices","a","uvs","Vector2","x","y","Vertex","z","vertexNormals","applyMatrix4","push","b","c","Face4","d","calculateProperties","prototype","subtract","ThreeBSP.prototype.subtract","other_tree","invert","clipTo","build","allPolygons","union","ThreeBSP.prototype.union","intersect","ThreeBSP.prototype.intersect","toGeometry","ThreeBSP.prototype.toGeometry","j","getInverse","polygon_count","vertice_dict","polygon_vertice_count","verticeUvs","uv","Vector3","vertex_idx_a","vertex_idx_b","vertex_idx_c","normal","toMesh","ThreeBSP.prototype.toMesh","material","mesh","position","setFromMatrixPosition","rotation","setFromRotationMatrix","ThreeBSP.Polygon","w","Array","undefined","ThreeBSP.Polygon.prototype.calculateProperties","cross","normalize","dot","ThreeBSP.Polygon.prototype.clone","vertice_count","flip","ThreeBSP.Polygon.prototype.flip","multiplyScalar","classifyVertex","ThreeBSP.Polygon.prototype.classifyVertex","side_value","BACK","EPSILON","FRONT","COPLANAR","classifySide","ThreeBSP.Polygon.prototype.classifySide","num_positive","num_negative","classification","SPANNING","splitPolygon","ThreeBSP.Polygon.prototype.splitPolygon","coplanar_front","coplanar_back","front","back","f","vi","vj","ti","tj","t","v","interpolate","ThreeBSP.Vertex","ThreeBSP.Vertex.prototype.clone","add","ThreeBSP.Vertex.prototype.add","ThreeBSP.Vertex.prototype.subtract","ThreeBSP.Vertex.prototype.multiplyScalar","scalar","ThreeBSP.Vertex.prototype.cross","ThreeBSP.Vertex.prototype.normalize","Math","sqrt","ThreeBSP.Vertex.prototype.dot","lerp","ThreeBSP.Vertex.prototype.lerp","sub","ThreeBSP.Vertex.prototype.interpolate","other","ThreeBSP.Vertex.prototype.applyMatrix4","m","e","elements","ThreeBSP.Node","divider","isConvex","ThreeBSP.Node.isConvex","ThreeBSP.Node.prototype.build","ThreeBSP.Node.prototype.allPolygons","slice","concat","ThreeBSP.Node.prototype.clone","node","map","ThreeBSP.Node.prototype.invert","temp","clipPolygons","ThreeBSP.Node.prototype.clipPolygons","ThreeBSP.Node.prototype.clipTo"]
}
