{"version":3,"sources":["re_db/d.cljs"],"mappings":";AAKA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAmBC,AAAK,AAAA,AAACC;;AAEzB;;;AAAA,AAAMC,AAEHC,AAAEC;AAFL,AAGE;AAAOC;AAAP,AACE,AAAA,AAAAC,AAACC,AAAMJ,AAAGC,AAAEC;;;AADPA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAGT,AAAKG,AAAO,AAACN,AAAcO,AAAST;AACpC,AAAKU,AAAI,AAACR,AAAcS,AAAMX;AAC9B,AAAKY,AAAO,AAACV,AAAcW,AAASb;AACpC,AAAKc,AAAY,AAACZ,AAAca,AAAcf;AAE9C,AAAKgB,AAAW,AAACd,AAAce,AAAajB;AAC5C,AAAKkB,AAAS,AAAChB,AAAciB,AAAWnB;AAExC,AAAKoB,AAAU,AAAClB,AAAcmB,AAAYrB;AAC1C,AAAKsB,AAAM,AAACpB,AAAcqB,AAAQvB;AAElC,AAAKwB,AAAU,AAACC,AAAQC,AAAY1B;AACpC,AAAK2B,AAAO,AAACF,AAAQG,AAAS5B;AAC9B,AAAK6B,AAAS,AAACJ,AAAQK,AAAW9B;AAClC,AAAK+B,AAAc,AAACN,AAAQO,AAAgBhC;AAE5C,AAAKiC,AAAUC","names":["js/re-db","js/re-db.d","js/re-db.d.*db*","re-db.d/*db*","re_db.core.create","re-db.d/partial-deref","f","a","args","cljs.core/deref","cljs.core.apply","re-db.d/entity","re-db.core/entity","re-db.d/get","re-db.core/get","re-db.d/get-in","re-db.core/get-in","re-db.d/select-keys","re-db.core/select-keys","re-db.d/entity-ids","re-db.core/entity-ids","re-db.d/entities","re-db.core/entities","re-db.d/contains?","re-db.core/contains?","re-db.d/touch","re-db.core/touch","re-db.d/transact!","cljs.core.partial","re-db.core/transact!","re-db.d/listen","re-db.core/listen","re-db.d/unlisten","re-db.core/unlisten","re-db.d/merge-schema!","re-db.core/merge-schema!","re-db.d/unique-id","re-db.core/unique-id"],"sourcesContent":["(ns re-db.d\n  (:refer-clojure :exclude [get get-in contains? select-keys namespace])\n  (:require [re-db.core :as d])\n  (:require-macros [re-db.d]))\n\n(defonce ^:dynamic *db* (d/create {}))\n\n(defn partial-deref\n  \"Partially apply a (an atom) to f, but deref the atom at time of application.\"\n  [f a]\n  (fn [& args]\n    (apply f @a args)))\n\n(def entity (partial-deref d/entity *db*))\n(def get (partial-deref d/get *db*))\n(def get-in (partial-deref d/get-in *db*))\n(def select-keys (partial-deref d/select-keys *db*))\n\n(def entity-ids (partial-deref d/entity-ids *db*))\n(def entities (partial-deref d/entities *db*))\n\n(def contains? (partial-deref d/contains? *db*))\n(def touch (partial-deref d/touch *db*))\n\n(def transact! (partial d/transact! *db*))\n(def listen (partial d/listen *db*))\n(def unlisten (partial d/unlisten *db*))\n(def merge-schema! (partial d/merge-schema! *db*))\n\n(def unique-id d/unique-id)"]}