{"version":3,"sources":["faber/canvas3d.cljs"],"mappings":"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","names":["js/console","js/module$node_modules$three$build$three","faber.canvas3d/is3dmodel?","value","js/faber","js/faber.canvas3d","js/faber.canvas3d.context","faber.canvas3d/context","cljs.core.atom","js/faber.canvas3d.faber-scene","faber.canvas3d/faber-scene","faber.canvas3d/new-scene","scene","js/module$node_modules$three$build$three.Scene","light","js/module$node_modules$three$build$three.DirectionalLight","ambient-light","js/module$node_modules$three$build$three.AmbientLight","p1__28041#","cljs.core.swap_BANG_","cljs.core.assoc","faber.canvas3d/init-context","canvas","width","height","camera","js/module$node_modules$three$build$three.PerspectiveCamera","renderer","js/module$node_modules$three$build$three.WebGLRenderer","cljs.core/clj->js","controls","js/module$node_modules$three_orbitcontrols$OrbitControls","cljs.core/reset!","faber.canvas3d/render","map__28057","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","faber.canvas3d/animate","js/window","faber.canvas3d/make-stl-blob","cljs.core.println","temp__5733__auto__","mesh","_","stl","js/module$node_modules$threejs_export_stl$lib$index","blob","js/Blob","js/Array","toolbar","re-db.d/get","cljs.core/assoc","faber.canvas3d/create-scene","map__28115","the-class__27652__auto__","re-view.core/class*","re_view.hiccup.core.element","re-view.core/wrap-props","faber.canvas3d/canvas3dClass","re-view.core/factory","faber.canvas3d/canvas3d","this","re-view.core/dom-node"],"sourcesContent":["(ns faber.canvas3d\n  (:require [\"three\" :as three]\n            [\"three-orbitcontrols\" :as orbit :refer [OrbitControls]]\n            [\"three-js-csg\" :as csg]\n            [\"threejs-export-stl\" :as exportSTL]\n            [\"file-saver\"  :refer [saveAs]]\n            [re-view.core :as v :refer [defview]]\n            [re-view.hiccup.core :refer [element]]\n            [re-db.d :as d]))\n\n(.log js/console \"three=\" three)\n\n\n(defn is3dmodel? [value] (:3dmodel value))\n\n(defonce context (atom {}))\n(defonce faber-scene (atom {}))\n\n(defn new-scene []\n  (let [\n        scene (three/Scene.)\n        light (three/DirectionalLight. 0xffffff)\n        ambient-light (three/AmbientLight. 0x90F020)\n        ]\n\n    (set! (.. light -position -x) 200)\n    (set! (.. light -position -y) 50)\n    (set! (.. light -position -z) 100)\n    (.normalize (. light -position))\n    (.add scene light)\n    (.add scene ambient-light)\n\n    (swap! context #(-> %\n                        (assoc :scene scene)\n                        (assoc :light light)\n                        (assoc :ambient-light ambient-light)\n                        ))))\n\n\n(defn init-context [canvas]\n  (let [width (.-offsetWidth canvas)\n        height (.-offsetHeight canvas)\n        scene (three/Scene.)\n        camera (three/PerspectiveCamera. 75 (/ width height) 0.1 1000)\n        ;stats (st)\n        renderer (three/WebGLRenderer. (clj->js {:canvas canvas}))\n        ;_ (.appendChild (.getElementById js/document \"stats\") (. stats -dom))\n        light (three/DirectionalLight. 0xffffff)\n        ambient-light (three/AmbientLight. 0x90F020)\n        controls (orbit. camera (. renderer -domElement))\n        ]\n\n    (.setSize renderer width height)\n    (set! (.. camera -position  -z) 5)\n\n    (set! (.. light -position -x) 200)\n    (set! (.. light -position -y) 50)\n    (set! (.. light -position -z) 100)\n    (.normalize (. light -position))\n    (.add scene light)\n    (.add scene ambient-light)\n\n    ;(.addEventListener controls \"change\" (fn [] (.log js/console \"Controls Change\")))\n    (reset! context {\n                     ;:stats stats\n                     :canvas canvas\n                     :width width\n                     :height height\n                     :scene scene\n                     :camera camera\n                     :renderer renderer\n                     :light light\n                     :ambient-light ambient-light\n                     :controls controls\n                     })\n    ))\n\n(defn render []\n  (let [{:keys [:scene :renderer :camera]} @context]\n    ;(.begin stats)\n    (.render renderer scene camera)\n    ;(.end stats)\n    ))\n\n(defn animate []\n  ;(println \"@faber-scene\" @faber-scene)\n  ;(aset cube \"rotation\" \"y\" (+ 0.01 (.-y (.-rotation cube))))\n  ;(aset cube \"rotation\" \"x\" (+ 0.02 (.-x (.-rotation cube))))\n  ;\n  (.requestAnimationFrame js/window animate)\n  (render)\n  ;(.update stats)\n  )\n\n(comment\n  (def default-material (three/MeshPhongMaterial. (clj->js {:ambient 0x050505, :color 0x0033ff, :specular 0x555555, :shininess 30})))\n\n  (defn apply-params [mesh {:keys [size position rotation scale]\n                            :or   {size     [1 1 1]\n                                   position [0 0 0]\n                                   rotation [0 0 0]\n                                   scale    [1 1 1]}}]\n    mesh))\n\n\n\n#_(defn make-cube [{:keys [size] :or {size [1 1 1]}}]\n  (let [[w h d] size]\n    (three/Mesh. (three/BoxGeometry. w h d) default-material)))\n\n#_(defn make-sphere [{:keys [radius wsegs hsegs] :or {radius 1 wsegs 8 hsegs 6}}]\n  (three/Mesh. (three/SphereGeometry. radius wsegs hsegs) default-material))\n\n\n\n#_(defn make-difference [obj_a obj_b]\n  (let [mesh_a (obj->mesh obj_a)\n        mesh_b (obj->mesh obj_b)\n        csg_a (ThreeBSP. mesh_a)\n        csg_b (ThreeBSP. mesh_b)\n        csg_diff (.subtract csg_a csg_b)\n        diff (.toMesh csg_diff default-material)]\n    (.computeVertexNormals (. diff -geometry))\n    diff))\n\n#_(defn clear-scene []\n  (swap! context assoc :scene (three/Scene.)))\n\n#_(defn add-mesh [mesh]\n  (let [{:keys [:scene]} @context]\n    (when mesh\n      (.add scene mesh))))\n\n(defn make-stl-blob []\n  (println \"Make stl blob\")\n  (if-let [mesh (:mesh @context)]\n    (let [_ (println \"make-stl mesh=\" mesh)\n          stl (.fromMesh exportSTL mesh)\n          blob (js/Blob. (js/Array. stl) {:type \"text/plain\"})]\n      (let [toolbar (d/get :faber :stlbutton)]\n        (println \"update toolbar\")\n        (swap! (:view/state toolbar) assoc :stl-blob blob))\n\n\n      ;(set! (.-href lnk) (.createObjectURL js/URL blob))\n      ;(set! (.-download lnk) @filename)\n\n      )))\n\n\n(defn create-scene [mesh]\n  (println \"create-scene mesh=\" mesh)\n  (new-scene)\n  (let [{:keys [:scene]} @context]\n    (when mesh\n      (println \"create scene\" mesh)\n      ;(.add scene (three/Mesh. (three/BoxGeometry. 1 1 1) default-material))\n      (swap! context assoc :mesh mesh)\n      (make-stl-blob)\n      (.add scene mesh)\n      ))\n  (animate))\n\n\n\n(defview canvas3d\n         {\n          :view/did-mount  (fn [this _]\n                             (let [canvas (v/dom-node this)]\n                               (println \"canvas3d did-mount. \" (:view/state this))\n                               (init-context canvas)\n                               ;(create-scene (:3dmodel (:view/props this)))\n                               ))\n          :view/did-update (fn [this]\n                             (println \"did update:\" (:view/props this))\n                             (create-scene (:3dmodel (:view/props this)))\n                             )}\n         []\n         [:canvas#canvas3d.w-100.h-100]                     ;{:style {:display \"none\"}}\n         )\n\n\n"]}