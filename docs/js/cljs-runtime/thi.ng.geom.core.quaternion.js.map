{"version":3,"sources":["thi/ng/geom/core/quaternion.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","p__27731","vec__27732","cljs.core.nth","unused__9546__auto__","self__","G__27857","js/Error","args27713","cljs.core/aclone","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","thi.ng.geom.core.quaternion/Quat4","thi.ng.geom.core.quaternion/->Quat4","x","y","z","w","_hasheq","_","k","thi.ng.geom.core.quaternion/swizzle4","nf","fexpr__27845","v","thi.ng.geom.core.quaternion/swizzle4-assoc","G__27790","thi.ng.xerror.core/key-error!","cljs.core/cons","G__27782","G__27785","thi.ng.geom.core.vector.vec3","o","c","cljs.core/compare","cljs.core/count","cljs.core/mix-collection-hash","cljs.core/hash","cljs.core/imul","cljs.core/sequential?","cljs.core._EQ_","cljs.core/first","s","theta","t","Math/sin","Math/cos","q","qx","qy","qz","qw","r","rx","ry","rz","rw","x'","y'","z'","w'","thi.ng.math.core/*eps*","eps","and__4115__auto__","thi.ng.math.core/delta=","Math/sqrt","m","d","id","thi.ng.math.core/abs","vec__27883","Math/acos","stheta","a","b","opts","vec__27848","tx","ty","tz","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","thi.ng.geom.core.matrix/Matrix44","or__4126__auto__","vx","vy","vz","ix","iy","iz","nx","ny","nz","iw","js/Float32Array","thi.ng.geom.core.vector/Vec3","cljs.core/meta","thi.ng.geom.core.quaternion/Q","var_args","G__27910","thi.ng.geom.core.quaternion/quat","p__27911","vec__27915","p__27918","vec__27919","thi.ng.geom.core.quaternion/quat-from-axis-angle","axis","thi.ng.geom.core.quaternion.quat","thi.ng.geom.core/normalize","thi.ng.geom.core.quaternion/as-axis-angle","vec__27945","mag","thi.ng.geom.core.quaternion/quat-from-euler","order","alpha","beta","gamma","vec__27951","G__27954","cljs.core/Keyword","thi.ng.geom.core.vector/V3X","thi.ng.geom.core.vector/V3Y","thi.ng.geom.core.vector/V3Z","thi.ng.xerror.core.illegal_arg_BANG_","thi.ng.geom.core.quaternion/quat-from-matrix","trace","s'","thi.ng.geom.core.quaternion/alignment-quat","from","to","thi.ng.geom.core/cross","Math/atan2","thi.ng.geom.core/mag","thi.ng.geom.core/dot","thi.ng.geom.core.quaternion/lookup4","G__27989","default","G__28002","G__28006","n","cljs.core/name","G__28007","thi.ng.geom.core.vector.vec2","thi.ng.geom.core.quaternion/swizzle-assoc*","ctor","keymap","cljs.core.into","acc","cljs.core/vec","cljs.core/seq","i","cljs.core.assoc","G__28034","cljs.core/next","G__28040","G__28044"],"sourcesContent":["(ns thi.ng.geom.core.quaternion\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.core.vector :as v :refer [vec2 vec3 V3X V3Y V3Z]]\n   [thi.ng.geom.core.matrix :as mat]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps* PI TWO_PI]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj\n     (:import\n      [thi.ng.geom.core.matrix Matrix44])))\n\n(declare swizzle4 swizzle4-assoc)\n\n(deftype Quat4\n    #?(:clj\n        [^double x ^double y ^double z ^double w\n         ^:unsynchronized-mutable _hasheq\n         ^:unsynchronized-mutable _hashc]\n        :cljs\n        [x y z w ^:mutable _hasheq])\n#?@(:clj\n    [clojure.lang.ILookup\n     (valAt\n      [_ k] (swizzle4 _ k nil))\n     (valAt\n      [_ k nf] (swizzle4 _ k nf))\n     java.util.concurrent.Callable\n     (call\n      [_] (.invoke ^clojure.lang.IFn _))\n     java.lang.Runnable\n     (run\n       [_] (.invoke ^clojure.lang.IFn _))\n     clojure.lang.IFn\n     (invoke\n      [_ k] (swizzle4 _ k nil))\n     (invoke\n      [_ k nf] (swizzle4 _ k nf))\n     (applyTo\n      [_ args]\n      (condp == (count args)\n        1 (swizzle4 _ (first args) nil)\n        2 (swizzle4 _ (first args) (second args))\n        (err/arity-error! (count args))))\n\n     clojure.lang.Associative\n     clojure.lang.IPersistentVector\n     (count\n      [_] 4)\n     (length\n      [_] 4)\n     (containsKey\n      [_ k] (not (nil? (#{0 1 2 3 :x :y :z :w} k))))\n     (entryAt\n      [_ k] (clojure.lang.MapEntry. k (swizzle4 _ k nil)))\n     (assoc\n      [_ k v] (swizzle4-assoc _ k v))\n     (assocN\n      [_ k v]\n      (case (int k)\n        0 (Quat4. v y z w -1 #?(:clj -1))\n        1 (Quat4. x v z w -1 #?(:clj -1))\n        2 (Quat4. x y v w -1 #?(:clj -1))\n        3 (Quat4. x y z v -1 #?(:clj -1))\n        (err/key-error! k)))\n\n     java.util.Collection\n     (isEmpty\n      [_] false)\n     (iterator\n      [_] (.iterator ^java.util.Collection (list x y z w)))\n     (toArray\n      [_] (double-array 4 [x y z w]))\n     (size\n      [_] 4)\n     clojure.lang.IPersistentCollection\n     clojure.lang.Indexed\n     clojure.lang.Sequential\n     clojure.lang.Seqable\n     java.util.List\n     (seq\n      [_] (seq [x y z w]))\n     (empty\n      [_] (err/unsupported!))\n     (cons\n      [_ v] [x y z w v])\n     (peek\n      [_] w)\n     (pop\n      [_] (vec3 x y z))\n     (rseq\n      [_] (Quat4. w z y x -1 #?(:clj -1)))\n     (get\n      [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n     (nth\n      [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n     (nth\n      [_ k nf] (case (int k) 0 x, 1 y, 2 z, 3 w, nf))\n     (equiv\n      [_ o]\n      (if (instance? Quat4 o)\n        (and (clojure.lang.Numbers/equiv x (.-x ^Quat4 o))\n             (clojure.lang.Numbers/equiv y (.-y ^Quat4 o))\n             (clojure.lang.Numbers/equiv z (.-z ^Quat4 o))\n             (clojure.lang.Numbers/equiv w (.-w ^Quat4 o)))\n        (and (instance? java.util.Collection o)\n             (== 4 (count o))\n             (clojure.lang.Util/equiv x (first o))\n             (clojure.lang.Util/equiv y (nth o 1))\n             (clojure.lang.Util/equiv z (nth o 2))\n             (clojure.lang.Util/equiv w (nth o 3)))))\n     (equals\n      [_ o]\n      (if (instance? Quat4 o)\n        (and (clojure.lang.Util/equals x (.-x ^Quat4 o))\n             (clojure.lang.Util/equals y (.-y ^Quat4 o))\n             (clojure.lang.Util/equals z (.-z ^Quat4 o))\n             (clojure.lang.Util/equals w (.-w ^Quat4 o)))\n        (and (instance? java.util.Collection o)\n             (== 4 (count o))\n             (clojure.lang.Util/equals x (first o))\n             (clojure.lang.Util/equals y (nth o 1))\n             (clojure.lang.Util/equals z (nth o 2))\n             (clojure.lang.Util/equals w (nth o 3)))))\n     Comparable\n     (compareTo\n      [_ o]\n      (if (instance? Quat4 o)\n        (let [c (compare x (.-x ^Quat4 o))]\n          (if (== 0 c)\n            (let [c (compare y (.-y ^Quat4 o))]\n              (if (== 0 c)\n                (let [c (compare z (.-z ^Quat4 o))]\n                  (if (== 0 c)\n                    (compare w (.-w ^Quat4 o))\n                    c))\n                c))\n            c))\n        (let [c (count o)]\n          (if (== 4 c) (- (compare o _)) (- 4 c)))))\n     (hashCode\n      [_]\n      (if (== -1 _hashc)\n        (set! _hashc\n              (-> 31\n                  (unchecked-add-int (hash x))\n                  (unchecked-multiply-int 31)\n                  (unchecked-add-int (hash y))\n                  (unchecked-multiply-int 31)\n                  (unchecked-add-int (hash z))\n                  (unchecked-multiply-int 31)\n                  (unchecked-add-int (hash w))))\n        _hashc))\n     clojure.lang.IHashEq\n     (hasheq\n      [_]\n      (if (== -1 _hasheq)\n        (set! _hasheq\n              (mix-collection-hash\n               (if (== -1 _hashc)\n                 (set! _hashc\n                       (-> 31\n                           (unchecked-add-int (hash x))\n                           (unchecked-multiply-int 31)\n                           (unchecked-add-int (hash y))\n                           (unchecked-multiply-int 31)\n                           (unchecked-add-int (hash z))\n                           (unchecked-multiply-int 31)\n                           (unchecked-add-int (hash w))))\n                 _hashc)\n               4))\n        _hasheq))]\n    :cljs\n    [ICloneable\n     (-clone\n      [_] (Quat4. x y z w -1))\n     ILookup\n     (-lookup\n      [_ k] (swizzle4 _ k nil))\n     (-lookup\n      [_ k nf] (swizzle4 _ k nf))\n     IFn\n     (-invoke\n      [_ k] (swizzle4 _ k nil))\n     (-invoke\n      [_ k nf] (swizzle4 _ k nf))\n     ICounted\n     (-count\n      [_] 4)\n     IAssociative\n     (-contains-key?\n      [_ k] (not (nil? (#{0 1 2 3 :x :y :z :w} k))))\n     (-assoc\n      [_ k v] (swizzle4-assoc _ k v))\n     IVector\n     (-assoc-n\n      [_ k v]\n      (case (int k)\n        0 (Quat4. v y z w -1 #?(:clj -1))\n        1 (Quat4. x v z w -1 #?(:clj -1))\n        2 (Quat4. x y v w -1 #?(:clj -1))\n        3 (Quat4. x y z v -1 #?(:clj -1))\n        (err/key-error! k)))\n     ISequential\n     ISeq\n     (-first\n      [_] x)\n     (-rest\n      [_] (cons y (cons z (cons w nil))))\n     INext\n     (-next\n      [_] (cons y (cons z (cons w nil))))\n     ISeqable\n     (-seq\n      [_] _)\n     IReversible\n     (-rseq\n      [_] (Quat4. w z y x -1 #?(:clj -1)))\n     IIndexed\n     (-nth\n      [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n     (-nth\n      [_ k nf] (case (int k) 0 x, 1 y, 2 z, 3 w, nf))\n     ICollection\n     (-conj\n      [_ v] [x y z w v])\n     IStack\n     (-peek\n      [_] w)\n     (-pop\n      [_] (vec3 x y z))\n     IComparable\n     (-compare\n      [_ o]\n      (if (instance? Quat4 o)\n        (let [c (compare x (.-x ^Quat4 o))]\n          (if (== 0 c)\n            (let [c (compare y (.-y ^Quat4 o))]\n              (if (== 0 c)\n                (let [c (compare z (.-z ^Quat4 o))]\n                  (if (== 0 c)\n                    (compare w (.-w ^Quat4 o))\n                    c))\n                c))\n            c))\n        (let [c (count o)]\n          (if (== 4 c) (- (compare o _)) (- 4 c)))))\n     IHash\n     (-hash\n      [_]\n      (if (== -1 _hasheq)\n        (set! _hasheq\n              (mix-collection-hash\n               (-> (+ 31 (hash x))\n                   (bit-or 0)\n                   (imul 31) (+ (hash y))\n                   (bit-or 0)\n                   (imul 31) (+ (hash z))\n                   (bit-or 0)\n                   (imul 31) (+ (hash w))\n                   (bit-or 0))\n               4))\n        _hasheq))\n     IEquiv\n     (-equiv\n      [_ o]\n      (if (instance? Quat4 o)\n        (and (== x (.-x ^Quat4 o)) (== y (.-y ^Quat4 o))\n             (== z (.-z ^Quat4 o)) (== w (.-w ^Quat4 o)))\n        (and (sequential? o) (== 4 (count o))\n             (= x (first o)) (= y (nth o 1))\n             (= z (nth o 2)) (= w (nth o 3)))))])\nObject\n(toString\n [_] (str \"[\" x \" \" y \" \" z \" \" w \"]\"))\ng/PScale\n(scale\n [_ s]\n (Quat4. (* x s) (* y s) (* z s) (* w s) -1 #?(:clj -1)))\ng/PRotate3D\n(rotate-x\n [_ theta]\n (let [t (/ theta 2.0)\n       s (Math/sin t) c (Math/cos t)]\n   (Quat4.\n    (mm/madd x c w s)\n    (mm/madd y c z s)\n    (mm/msub z c y s)\n    (mm/msub w c x s)\n    -1 #?(:clj -1))))\n(rotate-y\n [_ theta]\n (let [t (/ theta 2.0)\n       s (Math/sin t) c (Math/cos t)]\n   (Quat4.\n    (mm/msub x c z s)\n    (mm/madd y c w s)\n    (mm/madd z c x s)\n    (mm/msub w c y s)\n    -1 #?(:clj -1))))\n(rotate-z\n [_ theta]\n (let [t (/ theta 2.0)\n       s (Math/sin t) c (Math/cos t)]\n   (Quat4.\n    (mm/madd x c y s)\n    (mm/msub y c x s)\n    (mm/madd z c w s)\n    (mm/msub w c z s)\n    -1 #?(:clj -1))))\ng/PMathOps\n(+\n [_ q]\n (let [q ^Quat4 q]\n   (Quat4.\n    (+ x (.-x q))\n    (+ y (.-y q))\n    (+ z (.-z q))\n    (+ w (.-w q))\n    -1 #?(:clj -1))))\n(-\n [_ q]\n (let [q ^Quat4 q]\n   (Quat4.\n    (- x (.-x q))\n    (- y (.-y q))\n    (- z (.-z q))\n    (- w (.-w q))\n    -1 #?(:clj -1))))\n(*\n [_ q]\n (let [q ^Quat4 q\n       qx (.-x q) qy (.-y q) qz (.-z q) qw (.-w q)]\n   (Quat4.\n    (mm/maddsub x qw w qx y qz z qy)\n    (mm/maddsub y qw w qy z qx x qz)\n    (mm/maddsub z qw w qz x qy y qx)\n    (mm/msub w qw x qx y qy z qz)\n    -1 #?(:clj -1))))\n(*\n [_ q r]\n (let [q ^Quat4 q r ^Quat4 r\n       qx (.-x q) qy (.-y q) qz (.-z q) qw (.-w q)\n       rx (.-x r) ry (.-y r) rz (.-z r) rw (.-w r)\n       x' (mm/maddsub x qw w qx y qz z qy)\n       y' (mm/maddsub y qw w qy z qx x qz)\n       z' (mm/maddsub z qw w qz x qy y qx)\n       w' (mm/msub w qw x qx y qy z qz)]\n   (Quat4.\n    (mm/maddsub x' rw w' rx y' rz z' ry)\n    (mm/maddsub y' rw w' ry z' rx x' rz)\n    (mm/maddsub z' rw w' rz x' ry y' rx)\n    (mm/msub w' rw x' rx y' ry z' rz)\n    -1 #?(:clj -1))))\nm/PDeltaEquals\n(delta=\n [_ q] (m/delta= _ q *eps*))\n(delta=\n [_ q eps]\n (and (sequential? q)\n      (== 4 (count q))\n      (m/delta= x (first q) eps)\n      (m/delta= y (nth q 1) eps)\n      (m/delta= z (nth q 2) eps)\n      (m/delta= w (nth q 3) eps)))\ng/PDotProduct\n(dot\n [_ q]\n (let [q ^Quat4 q]\n   (mm/madd x (.-x q) y (.-y q) z (.-z q) w (.-w q))))\ng/PMagnitude\n(mag\n [_] (Math/sqrt (mm/madd x x y y z z w w)))\n(mag-squared\n [_] (mm/madd x x y y z z w w))\ng/PNormalize\n(normalize [_]\n  (let [m (Math/sqrt (mm/madd x x y y z z w w))]\n    (if (> m *eps*)\n      (Quat4. (/ x m) (/ y m) (/ z m) (/ w m) -1 #?(:clj -1))\n      _)))\ng/PConjugate\n(conjugate [_]\n  (Quat4. (- x) (- y) (- z) w -1 #?(:clj -1)))\ng/PInvert\n(invert [_]\n  (let [d (g/mag-squared _)\n        d (if (zero? d) 0.0 (/ d))\n        id (- d)]\n    (Quat4. (* x id) (* y id) (* z id) (* w d) -1 #?(:clj -1))))\ng/PInterpolate\n(mix [_ q] (g/mix _ q 0.5))\n(mix [_ q t]\n  (let [d (g/dot _ q)]\n    (if (< (m/abs d) 1.0)\n      (let [theta (Math/acos d)\n            stheta (Math/sqrt (mm/madd d (- d) 1.0))\n            [a b] (if (< (m/abs stheta) 0.001)\n                    [0.5 0.5]\n                    [(/ (Math/sin (mm/subm 1.0 t theta)) stheta)\n                     (/ (Math/sin (* t theta)) stheta)])\n            q ^Quat4 q]\n        (Quat4.\n         (mm/madd x a (.-x q) b)\n         (mm/madd y a (.-y q) b)\n         (mm/madd z a (.-z q) b)\n         (mm/madd w a (.-w q) b)\n         -1 #?(:clj -1)))\n      _)))\ng/PMatrixConvert\n(as-matrix\n [_] (g/as-matrix _ nil))\n(as-matrix\n [_ opts]\n (let [[tx ty tz] (:translate opts)\n       x2 (+ x x)\n       y2 (+ y y)\n       z2 (+ z z)\n       xx (* x x2)\n       xy (* x y2)\n       xz (* x z2)\n       yy (* y y2)\n       yz (* y z2)\n       zz (* z z2)\n       wx (* w x2)\n       wy (* w y2)\n       wz (* w z2)]\n   (thi.ng.geom.core.matrix.Matrix44.\n    (- 1.0 (+ yy zz)) (+ xy wz) (- xz wy) 0.0\n    (- xy wz) (- 1.0 (+ xx zz)) (+ yz wx) 0.0\n    (+ xz wy) (- yz wx) (- 1.0 (+ xx yy)) 0.0\n    (or tx 0.0) (or ty 0.0) (or tz 0.0) 1.0\n    nil nil)))\ng/PVectorTransform\n(transform-vector\n [_ [vx vy vz :as v]]\n (let [ix (mm/maddsub w vx y vz z vy)\n       iy (mm/maddsub w vy z vx x vz)\n       iz (mm/maddsub w vz x vy y vx)\n       nx (- x) ny (- y) nz (- z)\n       iw (mm/msub nx vx y vy z vz)\n       ^doubles b #?(:clj (double-array 3) :cljs (js/Float32Array. 3))]\n   (aset b 0 (double (mm/maddsub ix w iw nx iy nz iz ny)))\n   (aset b 1 (double (mm/maddsub iy w iw ny iz nx ix nz)))\n   (aset b 2 (double (mm/maddsub iz w iw nz ix ny iy nx)))\n   (thi.ng.geom.core.vector.Vec3. b nil (meta v))))\n)\n#?(:clj (defmethod print-method Quat4 [^Quat4 o ^java.io.Writer w] (.write w (.toString o))))\n\n(def Q (Quat4. 0.0 0.0 0.0 1.0 -1 #?(:clj -1)))\n\n(defn quat\n  ([] Q)\n  ([[x y z] w] (Quat4. x y z w -1 #?(:clj -1)))\n  ([[x y z w]] (Quat4. x y z w -1 #?(:clj -1)))\n  ([x y z w] (Quat4. x y z w -1 #?(:clj -1))))\n\n(defn quat-from-axis-angle\n  [axis theta]\n  (let [theta (/ theta 2.0)]\n    (quat (g/normalize (vec3 axis) (Math/sin theta)) (Math/cos theta))))\n\n(defn as-axis-angle\n  [q]\n  (let [[x y z w] (g/normalize q)\n        theta (* 2.0 (Math/acos w))\n        mag (Math/sqrt (- 1.0 (* w w)))]\n    (if (< mag 0.0005)\n      [(vec3 x y z) theta]\n      [(vec3 (/ x mag) (/ y mag) (/ z mag)) theta])))\n\n(defn quat-from-euler\n  [order alpha beta gamma]\n  (let [[a b c] (case order\n                  :xyz [V3X V3Y V3Z]\n                  :yxz [V3Y V3X V3Z]\n                  :xzy [V3X V3Z V3Y]\n                  :zxy [V3Z V3X V3Y]\n                  :yzx [V3Y V3Z V3X]\n                  :zyx [V3Z V3Y V3X]\n                  (err/illegal-arg! order))]\n    (g/* (quat-from-axis-angle a alpha)\n         (quat-from-axis-angle b beta)\n         (quat-from-axis-angle c gamma))))\n\n;; Allan and Mark Watt's \"Advanced Animation and Rendering Techniques\"\n;; (ACM Press 1992)\n;; http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n\n(defn quat-from-matrix\n  [^Matrix44 m]\n  (let [trace (mm/add (.-m00 m) (.-m11 m) (.-m22 m))]\n    (if (pos? trace)\n      (let [s (/ 0.5 (Math/sqrt (inc trace)))]\n        (Quat4.\n         (mm/subm (.-m12 m) (.-m21 m) s)\n         (mm/subm (.-m20 m) (.-m02 m) s)\n         (mm/subm (.-m01 m) (.-m10 m) s)\n         (/ 0.25 s)\n         -1 #?(:clj -1)))\n      (if (and (> (.-m00 m) (.-m11 m)) (> (.-m00 m) (.-m22 m)))\n        (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m00 m) (.-m11 m) (.-m22 m)))))\n              s' (/ s)]\n          (Quat4.\n           (* 0.25 s)\n           (mm/addm (.-m10 m) (.-m01 m) s')\n           (mm/addm (.-m20 m) (.-m02 m) s')\n           (mm/subm (.-m12 m) (.-m21 m) s')\n           -1 #?(:clj -1)))\n        (if (> (.-m11 m) (.-m22 m))\n          (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m11 m) (.-m22 m) (.-m00 m)))))\n                s' (/ s)]\n            (Quat4.\n             (mm/addm (.-m10 m) (.-m01 m) s')\n             (* 0.25 s)\n             (mm/addm (.-m21 m) (.-m12 m) s')\n             (mm/subm (.-m20 m) (.-m02 m) s')\n             -1 #?(:clj -1)))\n          (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m22 m) (.-m00 m) (.-m11 m)))))\n                s' (/ s)]\n            (Quat4.\n             (mm/addm (.-m20 m) (.-m02 m) s')\n             (mm/addm (.-m21 m) (.-m12 m) s')\n             (* 0.25 s)\n             (mm/subm (.-m01 m) (.-m10 m) s')\n             -1 #?(:clj -1))))))))\n\n(defn alignment-quat\n  [from to]\n  (let [from  (g/normalize from)\n        to    (g/normalize to)\n        axis  (g/cross from to)\n        theta (Math/atan2 (g/mag axis) (g/dot from to))]\n    (quat-from-axis-angle axis theta)))\n\n(defn lookup4\n  [^Quat4 _ k nf]\n  (case k\n    \\x (.-x _)\n    \\y (.-y _)\n    \\z (.-z _)\n    \\w (.-w _)\n    (or nf (err/key-error! k))))\n\n(defn swizzle4\n  [^Quat4 _ k default]\n  (if (number? k)\n    (case (int k)\n      0 (.-x _)\n      1 (.-y _)\n      2 (.-z _)\n      3 (.-w _)\n      (or default (err/key-error! k)))\n    (case k\n      :x (.-x _)\n      :y (.-y _)\n      :z (.-z _)\n      :w (.-w _)\n      (let [n (name k) c (count n)]\n        (case c\n          2 (vec2\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default))\n          3 (vec3\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default)\n             (lookup4 _ (nth n 2) default))\n          4 (Quat4.\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default)\n             (lookup4 _ (nth n 2) default)\n             (lookup4 _ (nth n 3) default)\n             -1 #?(:clj -1))\n          (or default (err/key-error! k)))))))\n\n(defn swizzle-assoc*\n  [_ ctor keymap k v]\n  (let [n (name k)\n        c (count n)]\n    (if (and (<= c (count keymap)) (== c (count v) (count (into #{} n))))\n      (loop [acc (vec (seq _)), i 0, n n]\n        (if n\n          (recur (assoc acc (keymap (first n)) (v i)) (inc i) (next n))\n          (ctor acc)))\n      (err/key-error! k))))\n\n(defn swizzle4-assoc\n  [^Quat4 _ k v]\n  (if (number? k)\n    (case (int k)\n      0 (Quat4. v (.-y _) (.-z _) (.-w _) -1 #?(:clj -1))\n      1 (Quat4. (.-x _) v (.-z _) (.-w _) -1 #?(:clj -1))\n      2 (Quat4. (.-x _) (.-y _) v (.-w _) -1 #?(:clj -1))\n      3 (Quat4. (.-x _) (.-y _) (.-z _) v -1 #?(:clj -1))\n      (err/key-error! k))\n    (case k\n      :x (Quat4. v (.-y _) (.-z _) (.-w _) -1 #?(:clj -1))\n      :y (Quat4. (.-x _) v (.-z _) (.-w _) -1 #?(:clj -1))\n      :z (Quat4. (.-x _) (.-y _) v (.-w _) -1 #?(:clj -1))\n      :w (Quat4. (.-x _) (.-y _) (.-z _) v -1 #?(:clj -1))\n      (swizzle-assoc* _ quat {\\x 0 \\y 1 \\z 2 \\w 3} k v))))\n"]}