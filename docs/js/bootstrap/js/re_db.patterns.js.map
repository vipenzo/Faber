{"version":3,"sources":["re_db/patterns.cljs"],"mappings":"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","names":["re-db.patterns/*pattern-log*","re-db.patterns/empty-pattern-map","re-db.patterns/supported-pattern-keys","cljs.core/set","cljs.core/keys","re-db.patterns/conj-set","cljs.core.fnil","cljs.core/conj","re-db.patterns/into-set","cljs.core/into","var_args","G__49015","re-db.patterns/log-read","js/Error","kind","pattern","cljs.core.update","multiple?","re-db.patterns/add-value","value-map","pattern-key","value","cljs.core.update_in","re-db.patterns/remove-value","cljs.core/disj","re-db.patterns/resolve-id","db-snap","attr","val","re_db.patterns.log_read","cljs.core/first","cljs.core.get_in","p__49016","vec__49017","cljs.core.nth","re-db.patterns/listen-lookup-ref","lookup-attr","lookup-val","lookup-ref","listeners","db","f","lookup-target","cljs.core.atom","cljs.core/deref","lookup-cb","p__49020","map__49021","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","db-after","tx-report","next-lookup-target","G__49025","G__49026","G__49027","re-db.patterns/unlisten","G__49028","cljs.core/Keyword","cljs.core/second","G__49029","G__49030","G__49031","re-db.patterns/listen","G__49032","cljs.core/reset!","G__49033","cljs.core/assoc-in","re-db.patterns/unlisten-lookup-ref","map__49035","G__49037","cljs.core.dissoc","re-db.patterns/lookup-ref?","or__4126__auto__","cljs.core/keyword-identical?","cljs.core/vector?","patterns","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/reduce-kv","cljs.core.reduce","temp__5733__auto__","re-db.patterns/non-empty-keys","m","ks","k","v","G__49051","cljs.core/empty?","cljs.core.conj","G__49056","re-db.patterns/datom-patterns","datoms","many?","re_db.patterns.datom_patterns","pattern-keys","p__49057","vec__49058","pattern-map","e","a","pv","G__49061","cljs.core/contains?","cljs.core.into","cljs.core/select-keys","re-db.patterns/pattern-values","values","re-db.patterns/datom-values","active-keys","re-db.patterns/invalidate!","seq__49075","cljs.core/seq","chunk__49076","count__49077","i__49078","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","re-db$patterns$IPatternListen$reaction$dyn","x__4428__auto__","m__4429__auto__","re-db.patterns/reaction","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","re-db$patterns$IPatternListen$patterns$dyn","re-db.patterns/patterns","re-db.patterns/IPatternListen","this"],"sourcesContent":["(ns re-db.patterns)\n\n(def ^:dynamic *pattern-log*\n  \"Dynamic var used in conjunction with re-db.patterns/capture-patterns macro to\n  identify patterns read by a block of code.\"\n  nil)\n\n(def ^:private empty-pattern-map\n  \"Map for building sets of patterns.\"\n  {:e__ #{}                                                 ;; <entity id>\n   :_a_ #{}                                                 ;; <attribute>\n   :_av #{}                                                 ;; [<attribute>, <value>]\n   :ea_ #{}})                                               ;; [<entity id>, <attribute>]\n\n(def supported-pattern-keys (set (keys empty-pattern-map)))\n\n(def conj-set (fnil conj #{}))\n(def into-set (fnil into #{}))\n\n(defn log-read\n  \"Record pattern to *pattern-log*.\"\n  ([kind pattern]\n   (when-not (nil? *pattern-log*)\n     (set! *pattern-log* (update *pattern-log* kind conj-set pattern))))\n  ([kind pattern multiple?]\n   (when-not (nil? *pattern-log*)\n     (set! *pattern-log* (update *pattern-log* kind (if multiple? into-set conj-set) pattern)))))\n\n(defn add-value\n  \"Associates value with pattern in value-map.\"\n  [value-map pattern-key pattern value]\n  (update-in value-map [pattern-key pattern] conj-set value))\n\n(defn remove-value\n  \"Removes value associated with pattern in value-map.\"\n  [value-map pattern-key pattern value]\n  (update-in value-map [pattern-key pattern] disj value))\n\n(declare listen unlisten)\n\n(defn resolve-id\n  \"Copied from re-db.core.\"\n  [db-snap attr val]\n  (log-read :_av [attr val])\n  (first (get-in db-snap [:ave attr val])))\n\n(defn listen-lookup-ref\n  \"Adds lookup ref listener, which uses an intermediate listener to update when\n  the target of a lookup ref changes.\"\n  [[lookup-attr lookup-val :as lookup-ref] kind pattern listeners db f]\n  (let [lookup-target (atom (resolve-id @db lookup-attr lookup-val))\n        lookup-cb (fn [{:keys [db-after] :as tx-report}]\n                    (let [next-lookup-target (resolve-id db-after lookup-attr lookup-val)]\n                      (when @lookup-target\n                        (unlisten db {kind (case kind :e__ [@lookup-target]\n                                                      :ea_ [[lookup-target (second pattern)]])} f))\n                      (when-not (nil? next-lookup-target)\n                        (listen db {kind (case kind :e__ [next-lookup-target]\n                                                    :ea_ [[next-lookup-target (second pattern)]])} f))\n                      (reset! lookup-target next-lookup-target)\n                      (f tx-report)))]\n    (-> (cond-> listeners\n                (not (nil? @lookup-target)) (add-value :e__ @lookup-target f))\n        (add-value :_av lookup-ref lookup-cb)\n        (assoc-in [:lookup-refs [pattern f]] {:lookup-cb     lookup-cb\n                                              :lookup-target lookup-target}))))\n\n(defn unlisten-lookup-ref\n  \"Removes lookup ref listener.\"\n  [lookup-ref kind pattern listeners db f]\n  (let [{:keys [lookup-cb lookup-target]} (get-in listeners [:lookup-refs [pattern f]])]\n    (-> (cond-> listeners\n                @lookup-target (remove-value kind pattern f))\n        (remove-value :_av lookup-ref lookup-cb)\n        (dissoc [:lookup-refs [pattern f]]))))\n\n(defn lookup-ref?\n  \"Returns true if pattern has lookup ref in id position.\"\n  [kind pattern]\n  (or (and (keyword-identical? kind :e__)\n           (vector? pattern)\n           pattern)\n      (and (keyword-identical? kind :ea_)\n           (vector? (first pattern))\n           (first pattern))))\n\n(defn listen\n  \"Adds pattern listener.\"\n  [db patterns value]\n  (swap! db assoc :listeners\n         (reduce-kv (fn [listeners kind patterns]\n                      (reduce (fn [listeners pattern]\n                                (if-let [lookup-ref (lookup-ref? kind pattern)]\n                                  (listen-lookup-ref lookup-ref kind pattern listeners db value)\n                                  (add-value listeners kind pattern value))) listeners patterns)) (get @db :listeners) patterns)))\n\n(defn unlisten\n  \"Removes pattern listener.\"\n  [db patterns value]\n  (swap! db assoc :listeners\n         (reduce-kv (fn [listeners kind patterns]\n                      (reduce (fn [listeners pattern]\n                                (if-let [lookup-ref (lookup-ref? kind pattern)]\n                                  (unlisten-lookup-ref lookup-ref kind pattern listeners db value)\n                                  (remove-value listeners kind pattern value))) listeners patterns)) (get @db :listeners) patterns)))\n\n(defn non-empty-keys\n  \"Returns list of keys for which map contains a non-empty value.\"\n  [m]\n  (reduce-kv (fn [ks k v]\n               (cond-> ks\n                       (not (empty? v)) (conj k))) #{} m))\n\n(defn datom-patterns\n  \"Returns a map of patterns matched by a list of datoms.\n  Limits patterns to those listed in pattern-keys.\n  many? should return true for attributes which have schema value :db.cardinality/many?.\"\n  ([datoms many?]\n   (datom-patterns datoms many? [:e__ :ea_ :_av :_a_]))\n  ([datoms many? pattern-keys]\n   (->> datoms\n        (reduce (fn [pattern-map [e a v pv]]\n                  (cond-> pattern-map\n                          (contains? pattern-keys :e__) (update :e__ conj e)\n                          (contains? pattern-keys :ea_) (update :ea_ conj [e a])\n                          (contains? pattern-keys :_av) (update :_av into (if (many? a)\n                                                                            (reduce\n                                                                              (fn [patterns v] (conj patterns [a v])) [] (into v pv))\n                                                                            [[a v]\n                                                                             [a pv]]))\n                          (contains? pattern-keys :_a_) (update :_a_ conj a)))\n                (select-keys empty-pattern-map pattern-keys)))))\n\n(defn pattern-values\n  \"Returns values associated with patterns.\n\n  value-map is of form {<pattern-key> {<pattern> #{...set of values...}}}.\n  pattern-map is of form {<pattern-key> #{...set of patterns...}}\"\n  [pattern-map value-map]\n  (reduce-kv (fn [values pattern-key patterns]\n               (reduce (fn [values pattern]\n                         (into values (get-in value-map [pattern-key pattern]))) values patterns)) #{} pattern-map))\n\n(defn datom-values\n  \"Returns the set of values in value-map associated with patterns matched by datoms.\"\n  [value-map datoms many?]\n  (let [active-keys (non-empty-keys value-map)]\n    (-> (datom-patterns datoms many? active-keys)\n        (pattern-values value-map))))\n\n(defn invalidate!\n  \"Invalidate a pattern, ie. invoke callbacks that match pattern\"\n  [db pattern-key pattern]\n  (doseq [f (get-in @db [:listeners pattern-key pattern])]\n    (f)))\n\n(defprotocol IPatternListen\n  (reaction [this] \"the action to take when a listened pattern matches\")\n  (patterns [this] \"Return the patterns currently listened to\"))\n\n(comment\n  (assert (= (datom-patterns [[\"e\" \"a\" \"v\" \"prev-v\"]]\n                             #{}\n                             supported-pattern-keys)\n             {:e__ #{\"e\"}\n              :ea_ #{[\"e\" \"a\"]}\n              :_av #{[\"e\" \"v\"] [\"e\" \"prev-v\"]}\n              :_a_ #{\"a\"}})))"]}