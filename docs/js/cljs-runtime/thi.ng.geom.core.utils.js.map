{"version":3,"sources":["thi/ng/geom/core/utils.cljc"],"mappings":"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","names":["thi.ng.geom.core.utils/closest-point-coeff","p","a","b","d","thi.ng.geom.core/-","thi.ng.geom.core/dot","thi.ng.geom.core/mag-squared","thi.ng.geom.core.utils/closest-point-on-line","thi.ng.geom.core/mix","thi.ng.geom.core.utils/closest-point-on-segment","t","thi.ng.geom.core.utils/closest-point-on-segments","segments","cljs.core.transduce","p1__47537#","cljs.core.map","cljs.core.apply","cljs.core.completing","q","d'","thi.ng.geom.core/dist-squared","thi.ng.math.core/INF+","thi.ng.geom.core.utils/closest-line-between","a1","b1","a2","b2","p43","cljs.core/not","thi.ng.geom.core.vector/V3","thi.ng.math.core/*eps*","p21","p13","d1343","d4321","d1321","d4343","d2121","thi.ng.math.core/delta=","n","ua","ub","thi.ng.geom.core/madd","thi.ng.geom.core.utils/dist*","rf","c","points","p1__47538#","Math/sqrt","thi.ng.geom.core.utils/min-dist","cljs.core/min","thi.ng.geom.core.utils/max-dist","cljs.core/max","thi.ng.geom.core.utils/arc-length-index","thi.ng.dstruct.core.successive_nth","p1__47539#","thi.ng.geom.core/dist","cljs.core.conj","cljs.core/peek","thi.ng.geom.core.utils/arc-length","thi.ng.dstruct.core.reduce_pairs","cljs.core/+","p__47549","vec__47550","seq__47551","cljs.core/seq","first__47552","cljs.core/first","cljs.core/next","thi.ng.geom.core.utils/centroid","x","xs","coll","G__47553","cljs.core/count","s","f","_","thi.ng.geom.core/reduce-vector","var_args","G__47556","thi.ng.geom.core.utils/center","js/Error","c'","thi.ng.geom.core.utils.center","p1__47554#","cljs.core.mapv","thi.ng.geom.core/+","G__47561","thi.ng.geom.core.utils/scale-size","thi.ng.geom.core.utils.scale_size","p1__47557#","p__47572","vec__47573","seq__47574","first__47575","thi.ng.geom.core.utils/bounds*","zero","cljs.core._EQ_","thi.ng.geom.core.utils/bounding-rect","thi.ng.geom.core.vector/V2","thi.ng.geom.core.utils/bounding-box","thi.ng.geom.core.utils/radial-bounds","ctor","r-or-points","cljs.core/coll?","thi.ng.geom.core.utils/axis-bounds","axis","p1__47588#","cljs.core.nth","cljs.core.reduce","thi.ng.geom.core.utils/axis-range","cljs.core/-","thi.ng.geom.core.utils/delta-contains","eps","p1__47602#","cljs.core/some","thi.ng.geom.core.utils/from-barycentric","weights","thi.ng.geom.core/*","thi.ng.geom.core.utils/point-at*","idx","total","i","ct","i1","pi","G__47617","thi.ng.geom.core.utils/point-at","thi.ng.geom.core.utils.point_at","thi.ng.math.core.in_range_QMARK_","cljs.core/last","or__4126__auto__","thi.ng.geom.core.utils/sample-uniform*","udist","include-last?","delta","samples","acc","vec__47636","thi.ng.geom.core.utils/sample-uniform","thi.ng.geom.core.utils/sample-segment-with-res","res","include-b?","ls","iter__4529__auto__","s__47650","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__47652","cljs.core/chunk-buffer","i__47651","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47649","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","thi.ng.math.core/norm-range","cljs.core/butlast","p__47665","p__47666","vec__47667","vec__47670","thi.ng.geom.core.utils/map-bilinear","u","v","p__47686","p__47687","vec__47688","vec__47691","thi.ng.geom.core.utils/map-trilinear","e","g","h","w","G__47696","thi.ng.geom.core.utils/tessellate-with-point","thi.ng.geom.core.utils.tessellate_with_point","cljs.core.concat","p1__47694#","cljs.core/PersistentVector","thi.ng.geom.core.utils/tessellate-with-first","vec__47697","seq__47698","first__47699","v0","more","p__47700","vec__47701","p__47704","vec__47705","thi.ng.geom.core.utils/tessellate-tri-with-midpoints","ab","bc","ca","thi.ng.geom.core.utils/tessellate-3","pred__47708","expr__47709","cljs.core/=","vec__47724","thi.ng.geom.core.utils/tessellate-max4","G__47728","thi.ng.geom.core.utils/ortho-normal","p__47731","vec__47732","thi.ng.geom.core/normalize","thi.ng.geom.core/cross","p__47743","p__47744","p__47745","vec__47746","vec__47749","vec__47752","thi.ng.geom.core.utils/norm-sign2","ax","ay","bx","by","cx","cy","thi.ng.geom.core.utils/norm-sign3","thi.ng.geom.core/mag","thi.ng.geom.core.utils/tri-area2","thi.ng.geom.core.utils/tri-area3","thi.ng.geom.core.utils/clockwise2?","thi.ng.geom.core.utils/clockwise3?","G__47780","thi.ng.geom.core.utils/triangle-barycentric-coords","p__47794","vec__47795","thi.ng.geom.core.utils.triangle_barycentric_coords","uu","vv","uv","wu","wv","denom","thi.ng.geom.core.utils/point-in-triangle2?","thi.ng.geom.core.utils/point-in-triangle3?","thi.ng.geom.core.utils.ortho_normal","cl","vec__47809","thi.ng.geom.core.utils/tessellating-transducer","cljs.core.comp","cljs.core.mapcat","thi.ng.geom.core.utils/area-xf","p1__47814#","G__47815","thi.ng.math.core/abs","thi.ng.geom.core.utils/volume-xf","p1__47824#","thi.ng.geom.core.utils/total-area-3d","faces","thi.ng.geom.core.utils/total-volume","cljs.core/chunk-first"],"sourcesContent":["(ns thi.ng.geom.core.utils\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.core.vector :as v :refer [vec2 vec3 V2 V3]]\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   [clojure.core.reducers :as r]\n   #?(:clj [thi.ng.math.macros :as mm])))\n\n(declare tri-area3)\n\n(defn closest-point-coeff\n  [p a b]\n  (let [d (g/- b a)]\n    (/ (g/dot (g/- p a) d) (g/mag-squared d))))\n\n(defn closest-point-on-line\n  [p a b]\n  (g/mix a b (closest-point-coeff p a b)))\n\n(defn closest-point-on-segment\n  [p a b]\n  (let [t (closest-point-coeff p a b)]\n    (if (<= t 0.0) a (if (>= t 1.0) b (g/mix a b t)))))\n\n(defn closest-point-on-segments\n  [p segments]\n  (transduce\n   (map #(apply closest-point-on-segment p %))\n   (completing\n    (fn [a q]\n      (let [d' (g/dist-squared p q)]\n        (if (< d' (a 1)) [q d'] a))))\n   [nil m/INF+]\n   segments))\n\n(defn closest-line-between\n  [a1 b1 a2 b2]\n  (let [p43 (g/- b2 a2)]\n    (if-not (m/delta= V3 p43 *eps*)\n      (let [p21 (g/- b1 a1)]\n        (if-not (m/delta= V3 p21 *eps*)\n          (let [p13   (g/- a1 a2)\n                d1343 (g/dot p13 p43)\n                d4321 (g/dot p43 p21)\n                d1321 (g/dot p13 p21)\n                d4343 (g/dot p43 p43)\n                d2121 (g/dot p21 p21)\n                d     (mm/msub d2121 d4343 d4321 d4321)]\n            (if (m/delta= 0.0 d *eps*)\n              {:type :parallel}\n              (let [n  (mm/msub d1343 d4321 d1321 d4343)\n                    ua (/ n d)\n                    ub (/ (mm/madd d4321 ua d1343) d4343)]\n                {:type :intersect\n                 :a    (g/madd p21 ua a1)\n                 :b    (g/madd p43 ub a2)\n                 :ua   ua\n                 :ub   ub}))))))))\n\n(defn dist*\n  [rf]\n  (fn [c points]\n    (->> points\n         (transduce (map #(g/dist-squared c %)) rf 0)\n         (Math/sqrt))))\n\n(def min-dist (dist* min))\n(def max-dist (dist* max))\n\n(defn arc-length-index\n  [points]\n  (->> points\n       (d/successive-nth 2)\n       (transduce\n        (map #(g/dist (% 0) (% 1)))\n        (completing (fn [a d] (conj a (+ (peek a) d))))\n        [0])))\n\n(defn arc-length\n  [points]\n  (d/reduce-pairs + g/dist points))\n\n(defn centroid\n  [[x & xs :as coll]]\n  (case (count coll)\n    0 nil\n    1 x\n    2 (g/mix x (first xs))\n    (let [s (/ 1.0 (count coll))\n          f (fn [x _] (* x s))]\n      (g/reduce-vector x + f xs))))\n\n(defn center\n  ([c' coll]\n     (center (centroid coll) c' coll))\n  ([c c' coll]\n     (let [d (g/- c' c)] (mapv #(g/+ % d) coll))))\n\n(defn scale-size\n  ([s coll] (scale-size (centroid coll) s coll))\n  ([c s coll] (mapv #(g/madd (g/- % c) s c) coll)))\n\n(defn bounds*\n  [zero [x & xs :as coll]]\n  (let [c (count coll)]\n    (cond\n     (> c 1) (let [p (g/reduce-vector x min xs)\n                   q (g/reduce-vector x max xs)]\n               [p (g/- q p)])\n     (= c 1) [x zero]\n     :default nil)))\n\n(defn bounding-rect\n  [points]\n  (bounds* V2 points))\n\n(defn bounding-box\n  [points]\n  (bounds* V3 points))\n\n(defn radial-bounds\n  [ctor c r-or-points]\n  [(ctor c)\n   (if (coll? r-or-points)\n     (max-dist c r-or-points)\n     r-or-points)])\n\n(defn axis-bounds\n  [axis coll]\n  (let [xs (mapv #(nth % axis) coll)]\n    [(reduce min xs) (reduce max xs)]))\n\n(defn axis-range\n  [axis coll]\n  (- (apply - (axis-bounds axis coll))))\n\n(defn delta-contains\n  [points p eps]\n  (some #(m/delta= p % eps) points))\n\n(defn from-barycentric\n  [points weights]\n  (reduce g/+ (map g/* points weights)))\n\n(defn point-at*\n  [points idx total t i]\n  (let [ct (* t total)\n        i (int (loop [i i] (if (>= ct (idx i)) (recur (inc i)) i)))\n        i1 (dec i)\n        pi (idx i1)]\n    [(g/mix (nth points i1) (nth points i)\n            (mm/subdiv ct pi (idx i) pi))\n     i]))\n\n(defn point-at\n  ([t points] (point-at t points nil))\n  ([t points idx]\n     (when (m/in-range? 0.0 1.0 t)\n       (let [n (count points)\n             t (double t)]\n         (cond\n          (== 0 n) nil\n          (== 1 n) (first points)\n          (== 1.0 t) (last points)\n          :default\n          (let [idx (or idx (arc-length-index points))]\n            (first (point-at* points idx (peek idx) t 1))))))))\n\n(defn sample-uniform*\n  [udist include-last? points]\n  (let [idx (arc-length-index points)\n        total (peek idx)\n        delta (/ udist total)\n        samples (loop [t 0.0, i 1, acc []]\n                  (if (< t 1.0)\n                    (let [[p i] (point-at* points idx total t i)]\n                      (recur (+ t delta) (int i) (conj acc p)))\n                    acc))]\n    (if include-last?\n      (conj samples (last points))\n      samples)))\n\n(defn sample-uniform\n  [udist include-last? points]\n  (let [n (count points)]\n    (cond\n     (== 0 n) nil\n     (== 1 n) [(first points)]\n     :default (sample-uniform* udist include-last? points))))\n\n(defn sample-segment-with-res\n  [a b res include-b?]\n  (let [ls (for [t (m/norm-range res)] (g/mix a b t))]\n    (if include-b? ls (butlast ls))))\n\n(defn map-bilinear\n  \"Takes a seq of 4 points in ccw order and 2D vector of normalized UV\n  coordinates. Applies bilinear interpolation to compute point within\n  the rect: U is coord along AB/DC edge, V along BC/AD\"\n  [[a b c d] [u v]]\n  (g/mix a b d c u v))\n(defn map-trilinear\n  \"Takes a seq of 8 points defining a cuboid and vector of normalized\n  UVW coordinates. Applies trilinear interpolation to compute point\n  within the cuboid: U is coord along AD/BC edge, V along AE/BF, W\n  along AB/DC (see above diagram)\"\n  [[a b c d e f g h] [u v w]]\n  (g/mix (g/mix a d e h u v) (g/mix b c f g u v) w))\n\n(defn tessellate-with-point\n  ([points] (tessellate-with-point (centroid points) points))\n  ([c points]\n     (->> [(first points)]\n          (concat points)\n          (d/successive-nth 2)\n          (mapv #(vector c (% 0) (% 1))))))\n\n(defn tessellate-with-first\n  [points]\n  (if (> (count points) 3)\n    (let [[v0 & more] points]\n      (mapv (fn [[a b]] [v0 a b]) (d/successive-nth 2 more)))\n    [points]))\n\n(defn tessellate-tri-with-midpoints\n  [[a b c]]\n  (let [ab (g/mix a b)\n        bc (g/mix b c)\n        ca (g/mix c a)]\n    [[a ab ca] [ab b bc] [bc c ca] [ab bc ca]]))\n\n(defn tessellate-3\n  [points]\n  (condp = (count points)\n    3 [points]\n    4 (let [[a b c d] points] [[a b c] [a c d]])\n    (tessellate-with-point points)))\n\n(defn tessellate-max4\n  [points]\n  (if (<= (count points) 4)\n    [points]\n    (tessellate-with-point points)))\n\n(defn ortho-normal\n  ([[a b c]] (g/normalize (g/cross (g/- b a) (g/- c a))))\n  ([a b] (g/normalize (g/cross a b)))\n  ([a b c] (g/normalize (g/cross (g/- b a) (g/- c a)))))\n\n(defn norm-sign2\n  [[ax ay] [bx by] [cx cy]]\n  (- (mm/subm bx ax cy ay) (mm/subm cx ax by ay)))\n\n(defn norm-sign3\n  [a b c] (g/mag (g/cross (g/- b a) (g/- c a))))\n\n(defn tri-area2\n  [a b c] (* 0.5 (norm-sign2 a b c)))\n\n(defn tri-area3\n  [a b c] (* 0.5 (norm-sign3 a b c)))\n\n(defn clockwise2?\n  [a b c] (neg? (norm-sign2 a b c)))\n\n(defn clockwise3?\n  [a b c n] (pos? (g/dot (g/cross (g/- b a) (g/- c a)) n)))\n\n(defn triangle-barycentric-coords\n  ([[a b c] p]\n     (triangle-barycentric-coords a b c p (g/- b a) (g/- c a)))\n  ([a b c p]\n     (triangle-barycentric-coords a b c p (g/- b a) (g/- c a)))\n  ([a b c p u v]\n     (let [w (g/- p a)\n           uu (g/mag-squared u)\n           vv (g/mag-squared v)\n           uv (g/dot u v)\n           wu (g/dot w u)\n           wv (g/dot w v)\n           denom (/ 1.0 (mm/msub uv uv uu vv))\n           s (* denom (mm/msub uv wv vv wu))\n           t (* denom (mm/msub uv wu uu wv))]\n       [(- 1.0 (+ s t)) s t])))\n\n(defn point-in-triangle2?\n  [p a b c]\n  (if (clockwise2? a b c)\n    (and (>= (norm-sign2 a c p) 0.0)\n         (>= (norm-sign2 b a p) 0.0)\n         (>= (norm-sign2 c b p) 0.0))\n    (and (>= (norm-sign2 b c p) 0.0)\n         (>= (norm-sign2 a b p) 0.0)\n         (>= (norm-sign2 c a p) 0.0))))\n\n(defn point-in-triangle3?\n  [p a b c]\n  (let [u (g/- b a)\n        v (g/- c a)\n        n (ortho-normal u v)\n        cl (- (g/dot n p) (g/dot n a))]\n    (if (m/delta= 0.0 cl)\n      (let [[u v w] (triangle-barycentric-coords a b c p u v)]\n        (and (>= u 0.0) (>= w 0.0) (m/in-range? 0.0 1.0 v))))))\n\n(defn- tessellating-transducer\n  [f]\n  (comp\n   (mapcat tessellate-with-first)\n   (map f)))\n\n(def ^:private area-xf\n  (tessellating-transducer #(->> % (apply tri-area3) m/abs)))\n\n(def ^:private volume-xf\n  (tessellating-transducer #(g/dot (% 0) (g/cross (% 1) (% 2)))))\n\n(defn total-area-3d\n  [faces] (transduce area-xf + faces))\n\n(defn total-volume\n  [faces] (/ (transduce volume-xf + faces) 6.0))\n"]}