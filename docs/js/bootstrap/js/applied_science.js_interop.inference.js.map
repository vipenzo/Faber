{"version":3,"sources":["applied_science/js_interop/inference.cljc"],"mappings":";AAIA,AAAA,AAAMA,AAAeC;AAArB,AACE,AAAI,AAACC,AAAKD;AACR,AAAME,AAAK,AAAA,AAACC,AAAS,AAACC,AAAKL,AAAeC;AAA1C,AACE,AAAI,AAAA,AAAM,AAACK,AAAMH;AAAO,AAACI,AAAMJ;;AAAMA;;;AACvC,AAAMF;AAAN,AACE,AAAAO,AAEsB,AAACG,AAAKV;AAF5BQ,AAEiCR;AAFjCS,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAF,AAAAC,AAAAC,AAAAF,AAAAC;;AADF;;;;AAKJ,AAAA,AAAMG,AAAQC;AAAd,AAAiB,AAAI,AAACX,AAAKW;AAAGA;;AAAb,AAAiBA;;;AAElC,AAAA,AAAMC,AAASC,AAAUZ;AAAzB,AACE,AAACa,AAAcD,AAAU,AAACH,AAAOT;;AAEnC;;;AAAA,AAAMc,AAEHC,AAAIC;AAFP,AAKO,AAAA,AAAAE,AAAAC,AAACE,AAAcN,AACf,AAAClB;AADDuB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAC;;AAFA,AAACH,AAAYF,AAAIC,AAEjB,AAAA;AAAA,AAAA,AAAAG,AAAAD;;;AAGP,AAAA,AAAMI,AAASP,AAAIQ,AAAKvB;AAAxB,AACE,AAAMe;AAAN,AACE,AAAAS,AAAS,AAACV,AAAWC,AAAIQ;AAAzB,AAAA,AAAA,AAAAC,AAAA;AAAA;;AACS,AAAAA,AAACb,AAAQX;;;AAFpB","names":["applied-science.js-interop.inference/normalize-tag","tag","cljs.core/set?","tags","cljs.core.into","cljs.core.keep","cljs.core/count","cljs.core/first","G__27773","G__27774","fexpr__27772","cljs.core/name","applied-science.js-interop.inference/as-set","x","applied-science.js-interop.inference/within?","pred-tags","clojure.set/superset?","applied-science.js-interop.inference/infer-tags","env","expr","cljs.analyzer.analyze","*cljs-warnings*-orig-val__27790","cljs.analyzer/*cljs-warnings*","*cljs-warnings*-temp-val__27791","cljs.analyzer/infer-tag","applied-science.js-interop.inference/tag-in?","form","G__27803"],"sourcesContent":["(ns applied-science.js-interop.inference\n  (:require [cljs.analyzer :as ana]\n            [clojure.set :as set]))\n\n(defn normalize-tag [tag]\n  (if (set? tag)\n    (let [tags (into #{} (keep normalize-tag) tag)]\n      (if (<= 1 (count tags)) (first tags) tags))\n    (when tag\n      ('{\"Array\"   array\n         \"String\"  string\n         \"Keyword\" keyword} (name tag) tag))))\n\n(defn as-set [x] (if (set? x) x #{x}))\n\n(defn within? [pred-tags tags]\n  (set/superset? pred-tags (as-set tags)))\n\n(defn infer-tags\n  \"Infers type of expr\"\n  [env expr]\n  (->> (ana/analyze env expr)\n       ana/no-warn\n       (ana/infer-tag env)\n       (normalize-tag)))\n\n(defn tag-in? [env form tags]\n  (when env\n    (some->> (infer-tags env form)\n             (within? tags))))"]}