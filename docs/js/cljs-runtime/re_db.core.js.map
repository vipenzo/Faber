{"version":3,"sources":["re_db/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","re-db.core/*notify*","re-db.core/*db-log*","re-db.core/conj-set","cljs.core.fnil","cljs.core/conj","re-db.core/into-set","cljs.core/into","var_args","G__51379","re-db.core/create","js/Error","re_db.core.create","schema","cljs.core.atom","re-db.core/merge-schema!","db","cljs.core.swap_BANG_","cljs.core/update","cljs.core/merge","re-db.core/get-schema","db-snap","a","cljs.core.get","G__51389","re-db.core/index?","cljs.core/contains?","re_db.core.index_QMARK_","G__51391","re-db.core/many?","cljs.core/keyword-identical?","re_db.core.many_QMARK_","G__51397","re-db.core/unique?","re_db.core.unique_QMARK_","re-db.core/ref?","G__51403","re-db.core/resolve-id","attr","val","re_db.patterns.log_read","cljs.core/first","id","cljs.core/vector?","vec__51405","cljs.core.nth","re_db.core.resolve_id","re-db.core/contains?","re-db.core/entity","temp__5735__auto__","G__51414","cljs.core.assoc","G__51421","re-db.core/get","not-found","G__51425","re-db.core/get-in","ks","cljs.core.get_in","re-db.core/select-keys","p1__51430#","cljs.core.mapv","cljs.core/select-keys","p__51433","map__51434","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","re-db.core/touch","entity","cljs.core/reduce-kv","m","ids","cljs.core.keyword","cljs.core/namespace","cljs.core/name","re-db.core/assert-uniqueness","cljs.core/empty?","re-db.core/add-index","v","index","G__51443","cljs.core.update_in","re-db.core/add-index-many","added","cljs.core.reduce","state","re-db.core/remove-index","removed","G__51450","cljs.core/disj","re-db.core/remove-index-many","removals","re-db.core/update-index","G__51457","G__51458","re-db.core/clear-empty-ent","G__51465","G__51467","fexpr__51466","cljs.core.update","cljs.core/dissoc","p__51472","vec__51473","re-db.core/retract-attr-many","datoms","value","prev-val","clojure.set.intersection","kill?","cljs.core._EQ_","clojure.set/difference","G__51476","cljs.core.conj_BANG_","G__51487","re-db.core/retract-attr","p__51497","vec__51502","re_db.core.retract_attr","G__51507","re-db.core/retract-entity","p__51511","vec__51512","p__51526","vec__51527","re-db.core/add","additions","clojure.set.difference","G__51536","cljs.core/assoc-in","G__51540","re-db.core/add-map-indexes","prev-m","cljs.core.not_EQ_","re-db.core/add-map-datoms","G__51547","re-db.core/remove-nils","k","G__51551","cljs.core.dissoc","p__51552","vec__51555","re-db.core/add-map","cljs.core.merge","G__51560","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-db.core/update-attr","p__51571","vec__51572","seq51564","G__51565","cljs.core/next","G__51566","G__51567","G__51568","self__4723__auto__","f","args","new-val","G__51575","p__51609","vec__51614","re-db.core/assoc-in-attr","path","re_db.core.update_attr","re-db.core/many-attrs","s","k-schema","G__51621","cljs.core.conj","G__51627","re-db.core/unlisten","G__51633","patterns","re-db.patterns/unlisten","G__51635","re-db.core/listen","re_db.core.unlisten","re-db.patterns/listen","p__51640","map__51641","re-db.core/notify-listeners","db-after","tx-report","pattern-value-map","seq__51647","cljs.core/seq","chunk__51648","count__51649","i__51650","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","listener","re-db.patterns/datom-values","seq__51654","chunk__51655","count__51656","i__51657","re-db.core/commit-tx","tx","G__51667","cljs.core/Keyword","re-db.core/transaction","db-before","new-txs","p1__51669#","vec__51674","resolve-id","cljs.core/transient","cljs.core/persistent!","re-db.core/*prevent-notify*","G__51679","re-db.core/transact!","p__51683","map__51687","txs","re_db.core.transact_BANG_","notify","log-datoms","*notify*-orig-val__51689","*notify*-temp-val__51690","or__4126__auto__","map__51696","cljs.core/map?","cljs.core/list?","cljs.core/seq?","cljs.core/deref","cljs.core/reset!","and__4115__auto__","cljs.core/not","re-db.core/entity-ids","qs","q","cljs.core/set","cljs.core/fn?","vec__51709","G__51717","G__51718","p1__51705#","clojure.set/intersection","re-db.core/entities","p1__51723#","cljs.core.map","re-db.core/unique-id","cljs-uuid-utils.core/make-random-uuid"],"sourcesContent":["(ns re-db.core\n  (:refer-clojure\n    :exclude [get get-in select-keys set! peek contains? namespace]\n    :rename {get         get*\n             contains?   contains?*\n             select-keys select-keys*\n             namespace   namespace*})\n  (:require [cljs-uuid-utils.core :as uuid-utils]\n            [clojure.set :as set]\n            [re-db.patterns :as patterns])\n  (:require-macros [re-db.core :refer [get-in*]]))\n\n(enable-console-print!)\n\n(def ^:dynamic *notify* true)                               ;; if false, datoms are not tracked & listeners are not notified. faster.\n(def ^:dynamic *db-log* nil)                                ;; maintains log of transactions while bound\n\n(def conj-set (fnil conj #{}))\n(def into-set (fnil into #{}))\n\n(defn create\n  \"Create a new db, with optional schema, which should be a mapping of attribute keys to\n  the following options:\n\n    :db/index       [true, :db.index/unique]\n    :db/cardinality [:db.cardinality/many]\"\n  ([] (create {}))\n  ([schema]\n   (atom {:eav    {}\n          :ave    {}\n          :schema schema})))\n\n(defn merge-schema!\n  \"Merge additional schema options into a db. Indexes are not created for existing data.\"\n  [db schema]\n  (swap! db update :schema merge schema))\n\n(defn get-schema [db-snap a]\n  (get-in* db-snap [:schema a]))\n\n(defn index?\n  \"Returns true if attribute is indexed.\"\n  ([schema]\n   (contains?* schema :db/index))\n  ([db-snap a]\n   (index? (get-schema db-snap a))))\n\n(defn many?\n  \"Returns true for attributes with cardinality `many`, which store a set of values for each attribute.\"\n  ([schema]\n   (keyword-identical? :db.cardinality/many (get* schema :db/cardinality)))\n  ([db-snap a]\n   (many? (get-schema db-snap a))))\n\n(defn unique?\n  \"Returns true for attributes where :db/index is :db.index/unique.\"\n  ([schema]\n   (keyword-identical? :db.index/unique (get* schema :db/index)))\n  ([db-snap a]\n   (unique? (get-schema db-snap a))))\n\n(defn ref?\n  [schema]\n  (keyword-identical? :db.type/ref (get* schema :db/type)))\n\n(defn resolve-id\n  \"Returns id, resolving lookup refs (vectors of the form `[attribute value]`) to ids.\n  Lookup refs are only supported for indexed attributes.\n  The 3-arity version is for known lookup refs, and does not check for uniqueness.\"\n  ([db-snap attr val]\n   (patterns/log-read :_av [attr val])\n   (first (get-in* db-snap [:ave attr val])))\n  ([db-snap id]\n   (if ^:boolean (vector? id)\n     (let [[attr val] id]\n       (if-not (unique? db-snap attr)\n         (throw (js/Error. (str \"Not a unique attribute: \" attr \", with value: \" val)))\n         (resolve-id db-snap attr val)))\n     id)))\n\n(defn contains?\n  \"Returns true if entity with given id exists in db.\"\n  [db-snap id]\n  (let [id (resolve-id db-snap id)]\n    (when-not ^:boolean (nil? id) (patterns/log-read :e__ id))\n    (true? (contains?* (get* db-snap :eav) id))))\n\n(declare get entity)\n\n(defn entity\n  \"Returns entity for resolved id.\"\n  [db-snap id]\n  (when-let [id (resolve-id db-snap id)]\n    (patterns/log-read :e__ id)\n    (some-> (get-in* db-snap [:eav id])\n            (assoc :db/id id))))\n\n(defn get\n  \"Get attribute in entity with given id.\"\n  ([db-snap id attr]\n   (when-let [id (resolve-id db-snap id)]\n     (patterns/log-read :ea_ [id attr])\n     (get-in* db-snap [:eav id attr])))\n  ([db-snap id attr not-found]\n   (when-let [id (resolve-id db-snap id)]\n     (patterns/log-read :ea_ [id attr])\n     (get-in* db-snap [:eav id attr] not-found))))\n\n(defn get-in\n  \"Get-in the entity with given id.\"\n  ([db-snap id ks]\n   (when-let [id (resolve-id db-snap id)]\n     (patterns/log-read :ea_ [id (first ks)])\n     (-> (get-in* db-snap [:eav id])\n         (get-in* ks))))\n  ([db-snap id ks not-found]\n   (when-let [id (resolve-id db-snap id)]\n     (patterns/log-read :ea_ [id (first ks)])\n     (-> (get-in* db-snap [:eav id])\n         (get-in* ks not-found)))))\n\n(defn select-keys\n  \"Select keys from entity of id\"\n  [db-snap id ks]\n  (when-let [id (resolve-id db-snap id)]\n    (patterns/log-read :ea_ (mapv #(do [id %]) ks) true)\n    (-> (get-in* db-snap [:eav id])\n        (assoc :db/id id)\n        (select-keys* ks))))\n\n(defn touch\n  \"Add refs to entity\"\n  [db-snap {:keys [db/id] :as entity}]\n  (reduce-kv\n    (fn [m attr ids]\n      (assoc m (keyword (namespace* attr) (str \"_\" (name attr))) ids))\n    entity\n    (get-in* db-snap [:vae id])))\n\n(defn- assert-uniqueness [db-snap id attr val]\n  (when-not (empty? (get-in* db-snap [:ave attr val]))\n    (throw (js/Error. (str \"Unique index on \" attr \"; attempted to write duplicate value \" val \" on id \" id \".\")))))\n\n(defn- add-index [db-snap id a v schema]\n  (let [index (get* schema :db/index)]\n    (when (keyword-identical? index :db.index/unique)\n      (assert-uniqueness db-snap id a v))\n    (cond-> db-snap\n            (not (nil? index)) (update-in [:ave a v] conj-set id)\n            (ref? schema) (update-in [:vae v a] conj-set id))))\n\n(defn- add-index-many [db-snap id attr added schema]\n  (reduce (fn [state v]\n            (add-index state id attr v schema)) db-snap added))\n\n(defn- remove-index [db-snap id attr removed schema]\n  (cond-> db-snap\n          (index? schema) (update-in [:ave attr removed] disj id)\n          (ref? schema) (update-in [:vae removed attr] disj id)))\n\n(defn- remove-index-many [db-snap id attr removals schema]\n  (reduce (fn [db-snap v]\n            (remove-index db-snap id attr v schema))\n          db-snap\n          removals))\n\n(defn- update-index [db-snap id attr added removed schema]\n  (if (many? schema)\n    (cond-> db-snap\n            added (add-index-many id attr added schema)\n            removed (remove-index-many id attr removed schema))\n    (cond-> db-snap\n            added (add-index id attr added schema)\n            removed (remove-index id attr added schema))))\n\n(defn- clear-empty-ent [db-snap id]\n  (cond-> db-snap\n          (#{{:db/id id} {}} (get-in* db-snap [:eav id])) (update :eav dissoc id)))\n\n(declare retract-attr)\n\n(defn- retract-attr-many [[db-snap datoms :as state] id attr value schema]\n  (let [prev-val (get-in* db-snap [:eav id attr])]\n    (let [removals (if (nil? value) prev-val (set/intersection value prev-val))\n          kill? (= removals prev-val)]\n      (if (empty? removals)\n        state\n        [(-> (if kill? (update-in db-snap [:eav id] dissoc attr)\n                       (update-in db-snap [:eav id attr] set/difference removals))\n             (update-index id attr nil removals schema)\n             (clear-empty-ent id))\n         (cond-> datoms\n                 (true? *notify*) (conj! [id attr nil removals]))]))))\n\n(defn- retract-attr\n  ([state id attr] (retract-attr state id attr (get-in* (state 0) [:eav id attr])))\n  ([[db-snap datoms :as state] id attr value]\n   (let [schema (get-schema db-snap attr)]\n     (if (many? schema)\n       (retract-attr-many state id attr value schema)\n       (let [prev-val (if-not (nil? value) value (get-in* db-snap [:eav id attr]))]\n         (if-not (nil? prev-val)\n           [(-> (update-in db-snap [:eav id] dissoc attr)\n                (update-index id attr nil prev-val (get-schema db-snap attr))\n                (clear-empty-ent id))\n            (cond-> datoms\n                    (true? *notify*) (conj! [id attr nil prev-val]))]\n           state))))))\n\n(defn- retract-entity [state id]\n  (reduce (fn [state [a v]]\n            (retract-attr state id a v))\n          state\n          (entity (state 0) id)))\n\n(defn- add\n  [[db-snap datoms :as state] id attr val]\n  {:pre [(not (keyword-identical? attr :db/id))]}\n  (let [schema (get-schema db-snap attr)\n        prev-val (get-in* db-snap [:eav id attr])]\n    (if (many? schema)\n      (let [additions (set/difference val prev-val)]\n        (if (empty? additions)\n          state\n          [(-> (update-in db-snap [:eav id attr] into-set additions)\n               (update-index id attr additions nil schema))\n           (cond-> datoms\n                   (true? *notify*) (conj! [id attr additions nil]))]))\n      (if (= prev-val val)\n        state\n        [(-> (assoc-in db-snap [:eav id attr] val)\n             (update-index id attr val prev-val schema))\n         (cond-> datoms\n                 (true? *notify*) (conj! [id attr val prev-val]))]))))\n\n(defn add-map-indexes [db-snap id m prev-m]\n  (reduce-kv\n    (fn [db-snap attr val]\n      (let [schema (get-schema db-snap attr)\n            prev-val (get* prev-m attr)]\n        (cond (many? schema)\n              (update-index db-snap id attr\n                            (set/difference val prev-val)\n                            (set/difference prev-val val)\n                            schema)\n              (not= val prev-val)\n              (update-index db-snap id attr val prev-val schema)\n              :else db-snap)))\n    db-snap m))\n\n(defn add-map-datoms [datoms id m prev-m db-snap]\n  (reduce-kv\n    (fn [datoms attr val]\n      (let [prev-val (get* prev-m attr)]\n        (cond-> datoms\n                (not= val prev-val) (conj! (if (many? db-snap attr)\n                                             [id attr\n                                              (set/difference val prev-val)\n                                              (set/difference prev-val val)]\n                                             [id attr val prev-val])))))\n    datoms m))\n\n(defn- remove-nils [m]\n  (reduce-kv (fn [m k v]\n               (cond-> m\n                       (nil? v) (dissoc k))) m m))\n\n(defn- add-map\n  [[db-snap datoms] m]\n  (let [id (get* m :db/id)\n        m (dissoc m :db/id)\n        prev-m (get-in* db-snap [:eav id])]\n    [(-> (assoc-in db-snap [:eav id] (remove-nils (merge prev-m m)))\n         (add-map-indexes id m prev-m)\n         (clear-empty-ent id))\n     (cond-> datoms\n             (true? *notify*) (add-map-datoms id m prev-m db-snap))]))\n\n(defn- update-attr [[db-snap datoms :as state] id attr f & args]\n  (let [prev-val (get-in* db-snap [:eav id attr])\n        new-val (apply f prev-val args)]\n    (if (many? db-snap attr)\n      (let [additions (set/difference new-val prev-val)\n            removals (set/difference prev-val new-val)]\n        (cond-> state\n                (not (empty? additions)) (add id attr additions)\n                (not (empty? removals)) (add id attr removals)))\n      (add [db-snap datoms] id attr new-val))))\n\n(defn- assoc-in-attr [[db-snap datoms] id attr path new-val]\n  (update-attr [db-snap datoms] id attr assoc-in path new-val))\n\n(defn- many-attrs\n  \"Returns set of attribute keys with db.cardinality/schema\"\n  [schema]\n  (reduce-kv (fn [s attr k-schema]\n               (cond-> s\n                       (many? k-schema) (conj attr))) #{} schema))\n\n\n(defn unlisten\n  \"Remove listener from patterns (if provided) or :tx-log.\"\n  ([db f]\n   (doto db\n     (swap! update :tx-listeners disj f)))\n  ([db patterns f]\n   (patterns/unlisten db patterns f)))\n\n(defn listen\n  \"Adds listener for transactions which contain datom(s) matching the provided pattern. If patterns not provided, matches all transactions.\n\n   Patterns should be a map containing any of the following keys, each containing a collection of patterns:\n\n    :e__      entity                              [id _ _]\n    :ea_      entity-attribute                    [id attr _]\n    :_av      attribute-value                     [_ attr val]\n    :_a_      attribute                           [_ attr _]\"\n  ([db f]\n   (swap! db update :tx-listeners conj-set f)\n   #(unlisten db f))\n  ([db patterns f]\n   (patterns/listen db patterns f)\n   #(unlisten db patterns f)))\n\n(defn- notify-listeners\n  \"Notify listeners for supported patterns matched by datoms in transaction.\n\n  Listeners are called with the complete :tx-report. A listener is called at most once per transaction.\"\n  [{:keys [db-after datoms] :as tx-report}]\n  (when-let [pattern-value-map (get* db-after :listeners)]\n    (doseq [listener (patterns/datom-values pattern-value-map datoms (many-attrs (:schema db-after)))]\n      (listener tx-report)))\n  (doseq [listener (get* db-after :tx-listeners)]\n    (listener tx-report)))\n\n(defn- commit-tx [state tx]\n  (apply (case (tx 0)\n           :db/add add\n           :db/add-map add-map\n           :db/update-attr update-attr\n           :db/assoc-in-attr assoc-in-attr\n           :db/retract-entity retract-entity\n           :db/retract-attr retract-attr\n           #(throw (js/Error (str \"No re-db op: \" (tx 0)))))\n         (assoc tx 0 state)))\n\n(defn- transaction [db-before new-txs]\n  (let [resolve-id #(resolve-id db-before %)\n        [db-after datoms] (reduce (fn [state tx]\n                                    (if (vector? tx)\n                                      (commit-tx state (update tx 1 resolve-id))\n                                      (commit-tx state [:db/add-map (update tx :db/id resolve-id)])))\n                                  [db-before (transient [])]\n                                  new-txs)]\n    {:db-before db-before\n     :db-after  db-after\n     :datoms    (persistent! datoms)}))\n\n(def ^:dynamic *prevent-notify* false)\n\n(defn transact!\n  ([db txs] (transact! db txs {}))\n  ([db txs {:keys [notify\n                   log-datoms]\n            :or   {notify true}}]\n   (binding [*notify* (or notify log-datoms)]\n     (when-let [{:keys [db-after datoms] :as tx} (cond (nil? txs) nil\n                                                       (and (map? txs) (contains?* txs :datoms)) txs\n                                                       (or (vector? txs)\n                                                           (list? txs)\n                                                           (seq? txs)) (transaction @db txs)\n                                                       :else (throw (js/Error \"Transact! was not passed a valid transaction\")))]\n       (reset! db db-after)\n       (when-not (nil? *db-log*)\n         (reset! *db-log* (-> @*db-log*\n                              (assoc :db-after db-after)\n                              (update :datoms into datoms))))\n\n       (when (and notify (not *prevent-notify*))\n         (notify-listeners tx))\n       db))))\n\n(defn entity-ids\n  [db-snap qs]\n  (->> qs\n       (mapv (fn [q]\n               (set (cond (fn? q)\n                          (reduce-kv (fn [s id entity] (if ^:boolean (q entity) (conj s id) s)) #{} (get* db-snap :eav))\n\n                          (keyword? q)\n                          (do (patterns/log-read :_a_ q)\n                              (reduce-kv (fn [s id entity] (if ^:boolean (contains?* entity q) (conj s id) s)) #{} (get* db-snap :eav)))\n\n                          :else\n                          (let [[attr val] q]\n                            (patterns/log-read :_av [attr val])\n                            (if (index? db-snap attr)\n                              (get-in* db-snap [:ave attr val])\n                              (entity-ids db-snap [#(= val (get* % attr))])))))))\n       (apply set/intersection)))\n\n(defn entities\n  [db-snap qs]\n  (map #(entity db-snap %) (entity-ids db-snap qs)))\n\n(defn unique-id\n  \"Returns a unique id (string).\"\n  []\n  (str (uuid-utils/make-random-uuid)))\n\n"]}