{
"version":3,
"file":"module$node_modules$prop_types$checkPropTypes.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAWxG,IAAIC,UAAYH,OAAA,CAAQ,wCAAR,CAAhB,CACII,QAAUJ,OAAA,CAAQ,sCAAR,CADd,CAEIK,qBAAuBL,OAAA,CAAQ,yDAAR,CAF3B,CAGIM,mBAAqB,EA6C3BL,OAAAC,QAAA,CA/BAK,QAAuB,CAACC,SAAD,CAAYC,MAAZ,CAAoBC,QAApB,CAA8BC,aAA9B,CAA6CC,QAA7C,CAAuD,CAE1E,IAAKC,IAAIA,YAAT,GAAyBL,UAAzB,CACE,GAAIA,SAAAM,eAAA,CAAyBD,YAAzB,CAAJ,CAA4C,CAK1C,GAAI,CAGFV,SAAA,CAA6C,UAA7C;AAAU,MAAOK,UAAA,CAAUK,YAAV,CAAjB,CAAyD,+GAAzD,CAA+KF,aAA/K,EAAgM,aAAhM,CAA+MD,QAA/M,CAAyNG,YAAzN,CAAuO,MAAOL,UAAA,CAAUK,YAAV,CAA9O,CACA,KAAAE,MAAQP,SAAA,CAAUK,YAAV,CAAA,CAAwBJ,MAAxB,CAAgCI,YAAhC,CAA8CF,aAA9C,CAA6DD,QAA7D,CAAuE,IAAvE,CAA6EL,oBAA7E,CAJN,CAKF,MAAOW,EAAP,CAAW,CACXD,KAAA,CAAQC,EADG,CAGbZ,OAAA,CAAQ,CAACW,KAAT,EAAkBA,KAAlB,WAAmCE,MAAnC,CAA0C,0RAA1C;AAA0VN,aAA1V,EAA2W,aAA3W,CAA0XD,QAA1X,CAAoYG,YAApY,CAAkZ,MAAOE,MAAzZ,CACA,IAAIA,KAAJ,WAAqBE,MAArB,EAA8B,EAAEF,KAAAG,QAAF,GAAmBZ,mBAAnB,CAA9B,CAAsE,CAGpEA,kBAAA,CAAmBS,KAAAG,QAAnB,CAAA,CAAoC,CAAA,CAEpC,KAAIC,MAAQP,QAAA,CAAWA,QAAA,EAAX,CAAwB,EAEpCR,QAAA,CAAQ,CAAA,CAAR,CAAe,sBAAf,CAAuCM,QAAvC,CAAiDK,KAAAG,QAAjD,CAAyE,IAAT,EAAAC,KAAA,CAAgBA,KAAhB,CAAwB,EAAxF,CAPoE,CAd5B,CAH4B,CA5B4B;",
"sources":["node_modules/prop-types/checkPropTypes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prop_types$checkPropTypes\"] = function(global,require,module,exports) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n  var warning = require('fbjs/lib/warning');\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n\n};"],
"names":["shadow$provide","global","require","module","exports","invariant","warning","ReactPropTypesSecret","loggedTypeFailures","checkPropTypes","typeSpecs","values","location","componentName","getStack","typeSpecName","hasOwnProperty","error","ex","Error","message","stack"]
}
