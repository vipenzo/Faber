{"version":3,"sources":["re_view/render_loop.cljs"],"mappings":"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","names":["js/re-view","js/re-view.render-loop","js/re-view.render-loop.*immediate-state-update*","re-view.render-loop/*immediate-state-update*","js/re-view.render-loop.count-fps?","re-view.render-loop/count-fps?","js/re-view.render-loop.last-fps-time","re-view.render-loop/last-fps-time","js/re-view.render-loop.frame-rate","re-view.render-loop/frame-rate","js/re-view.render-loop.frame-count","re-view.render-loop/frame-count","re-view.render-loop/count-fps!","enable?","js/re-view.render-loop._raf-polyfill","re-view.render-loop/_raf-polyfill","cljs.core/not","js/window","or__4126__auto__","cb","js/setTimeout","js/re-view.render-loop.to-render","re-view.render-loop/to-render","cljs.core/volatile!","js/re-view.render-loop.to-run","re-view.render-loop/to-run","re-view.render-loop/schedule!","f","cljs.core.conj","re-view.render-loop/request-render","re-view.render-loop/force-update-caught","this","e51832","js/Error","e","temp__5733__auto__","catch-fn","js/console","re-view.render-loop/force-update!","cljs.core.disj","re-view.render-loop/force-update","re-view.render-loop/flush!","cljs.core/deref","cljs.core/empty?","components","cljs.core/vreset!","seq__51837","cljs.core/seq","chunk__51838","count__51839","i__51840","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","c","fns","seq__51845","chunk__51846","count__51847","i__51848","re-view.render-loop/render-loop","frame-ms","cljs.core/mod","js/requestAnimationFrame","re-view.render-loop/apply-sync!","args","result","cljs.core.apply"],"sourcesContent":["(ns re-view.render-loop\n  (:require [goog.object :as gobj]))\n\n(set! *warn-on-infer* true)\n(defonce ^:dynamic *immediate-state-update* false)\n\n(defonce ^:private count-fps? false)\n(defonce ^:private last-fps-time 1)\n(defonce frame-rate 0)\n(defonce frame-count 0)\n\n(defn count-fps!\n  [enable?]\n  (set! count-fps? enable?))\n\n(defonce _raf-polyfill\n         (when (js* \"typeof window !== 'undefined'\")\n           (if-not (.-requestAnimationFrame js/window)\n             (set! (.-requestAnimationFrame js/window)\n                   (or\n                     (.-webkitRequestAnimationFrame js/window)\n                     (.-mozRequestAnimationFrame js/window)\n                     (.-oRequestAnimationFrame js/window)\n                     (.-msRequestAnimationFrame js/window)\n                     (fn [cb]\n                       (js/setTimeout cb (/ 1000 60))))))))\n\n(defonce to-render (volatile! #{}))\n(defonce to-run (volatile! []))\n\n(declare request-render)\n\n(defn schedule! [f]\n  (vswap! to-run conj f)\n  (request-render))\n\n(defn force-update-caught [this]\n  (when-not (true? (aget this \"unmounted\"))\n    (try (.forceUpdate this)\n         (catch js/Error e\n           (if-let [catch-fn (aget this \"catch\")]\n             (catch-fn e)\n             (do (.debug js/console \"No :catch method in component: \" this)\n                 (.error js/console e)))))))\n\n(defn force-update! [^js/React.Component this]\n  (vswap! to-render disj this)\n  (force-update-caught this))\n\n(defn force-update [this]\n  (if (true? *immediate-state-update*)\n    (force-update! this)\n    (do\n      (vswap! to-render conj this)\n      (request-render))))\n\n(defn flush!\n  []\n  (when-not ^boolean (empty? @to-render)\n    (let [components @to-render]\n      (vreset! to-render #{})\n      (doseq [c components]\n        (force-update-caught c))))\n\n  (when-not ^boolean (empty? @to-run)\n    (let [fns @to-run]\n      (vreset! to-run [])\n      (doseq [f fns] (f)))))\n\n(defn render-loop\n  [frame-ms]\n  (set! frame-count (inc frame-count))\n  (when ^boolean (and (true? count-fps?) (identical? 0 (mod frame-count 29)))\n    (set! frame-rate (* 1000 (/ 30 (- frame-ms last-fps-time))))\n    (set! last-fps-time frame-ms))\n  (flush!))\n\n(defn request-render []\n  (js/requestAnimationFrame render-loop))\n\n\n(defn apply-sync!\n  \"Wraps function `f` to flush the render loop before returning.\"\n  [f]\n  (fn [& args]\n    (let [result (apply f args)]\n      (flush!)\n      result)))"]}