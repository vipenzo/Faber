{"version":3,"sources":["shadow/cljs/bootstrap/env.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.bootstrap","js/shadow.cljs.bootstrap.env","js/shadow.cljs.bootstrap.env.loaded-ref","shadow.cljs.bootstrap.env/loaded-ref","cljs.core.atom","shadow.cljs.bootstrap.env/set-loaded","namespaces","loaded","cljs.core.into","cljs.core.map","cljs.core/symbol","cljs.core.swap_BANG_","clojure.set/union","js/shadow.cljs.bootstrap.env.index-ref","shadow.cljs.bootstrap.env/index-ref","p__50734","map__50735","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","shadow.cljs.bootstrap.env/build-index","sources","exclude","data","idx","cljs.core.reduce","p__50738","map__50739","resource-id","rc","cljs.core/assoc-in","p__50743","vec__50744","cljs.core.nth","provide","iter__4529__auto__","s__50748","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","map__50761","cljs.core/first","iterys__4525__auto__","s__50750","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__50752","cljs.core/chunk-buffer","i__50751","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50749","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__50747","provides","cljs.core/reset!","shadow.cljs.bootstrap.env/get-ns-info","ns","cljs.core/deref","id","cljs.core.get_in","or__4126__auto__","cljs.core.ex_info","js/Error","shadow.cljs.bootstrap.env/find-deps","entries","cljs.core/set?","cljs.core/every?","cljs.core/symbol?","cljs.core/reverse","p__50788","p__50789","map__50790","map__50791","deps","order","x","output-name","requires","src","cljs.core/not","clojure.set.intersection","clojure.set.union","cljs.core.conj","shadow.cljs.bootstrap.env/create-cljs-user!","js/goog.constructNamespace_","cljs.core/chunk-first"],"sourcesContent":["(ns shadow.cljs.bootstrap.env\n  (:require [clojure.set :as set]))\n\n(defonce loaded-ref (atom #{}))\n\n;; calls to this will be injected by shadow-cljs\n;; it will receive an array of strings matching the goog.provide\n;; names that where provided by the \"app\"\n(defn set-loaded [namespaces]\n  (let [loaded (into #{} (map symbol) namespaces)]\n    (swap! loaded-ref set/union loaded)))\n\n(defonce index-ref (atom nil))\n\n(defn build-index [{:keys [sources exclude] :as data}]\n  (let [idx\n        (reduce\n          (fn [idx {:keys [resource-id] :as rc}]\n            (assoc-in idx [:sources resource-id] rc))\n          {:sources-ordered sources\n           :exclude exclude}\n          sources)\n\n        idx\n        (reduce\n          (fn [idx [provide resource-id]]\n            (assoc-in idx [:sym->id provide] resource-id))\n          idx\n          (for [{:keys [resource-id provides]} sources\n                provide provides]\n            [provide resource-id]))]\n\n    (reset! index-ref idx)\n\n    #_ (js/console.log \"build-index\" idx)\n\n    idx))\n\n(defn get-ns-info [ns]\n  (let [idx @index-ref\n        id (get-in idx [:sym->id ns])]\n    (or (get-in idx [:sources id])\n        (throw (ex-info (str \"ns \" ns \" not available\") {:ns ns}))\n        )))\n\n(defn find-deps [entries]\n  {:pre [(set? entries)\n         (every? symbol? entries)]}\n  ;; abusing that :sources-ordered is in correct dependency order\n  ;; just walk in reverse and pick up everything along the way\n  (->> (reverse (:sources-ordered @index-ref))\n       (reduce\n         (fn [{:keys [deps order] :as x} {:keys [resource-id output-name provides requires] :as src}]\n\n           (cond\n             ;; don't load files that don't provide anything we want\n             (not (seq (set/intersection deps provides)))\n             x\n\n             :else\n             {:deps (set/union deps requires)\n              :order (conj order src)}))\n         {:deps entries\n          :order []})\n       (:order)\n       (reverse)\n       (into [])))\n\n(defn create-cljs-user! []\n  ;; must create this namespace since it always exists\n  ;; in the analyzer data and a blank (def x 1) will otherwise\n  ;; error you when trying to eval because it can't create cljs.user.x\n  ;; without cljs.user existing and it never does anything to ensure\n  ;; it exists first\n  (js/goog.constructNamespace_ \"cljs.user\"))"]}