{"version":3,"sources":["re_view/view_spec.cljs"],"mappings":"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","names":["re-view.view-spec/spec-registry","re-view.view-spec/defspecs","specs","cljs.core.merge","cljs.core/reduce-kv","m","k","v","G__26824","cljs.core/map?","cljs.core.assoc","p1__26825#","re-view.view-spec/Hiccup?","cljs.core/vector?","cljs.core/Keyword","cljs.core/first","p1__26826#","re-view.view-spec/SVG?","clojure.string/starts-with?","cljs.core/name","re-view.view-spec/Element?","re_view.util.any_pred","re-view.util/is-react-element?","cljs.core/string?","cljs.core/nil?","re-view.view-spec/builtins","cljs.core/boolean?","cljs.core/number?","cljs.core/fn?","cljs.core/object?","cljs.core/keyword?","cljs.core.into","re-view.view-spec/spec-kinds","cljs.core.reduce","p__26833","vec__26835","cljs.core.nth","name","pred","re-view.view-spec/resolve-spec","G__26840","or__4126__auto__","cljs.core.get","js/Error","cljs.core/set?","spec","p__26848","map__26849","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","re-view.view-spec/spec-kind","spec-name","p__26854","map__26855","re-view.view-spec/normalize-props-map","keys","required","props","cljs.core.dissoc","cljs.core.keyword","map__26858","default","pass-through","G__26861","cljs.core/not","cljs.core.update","cljs.core/conj","cljs.core/assoc-in","re-view.view-spec/resolve-spec-vector","vec__26862","req","opt","cljs.core/split-with","cljs.core.partial","cljs.core/not=","cljs.core.map","G__26865","cljs.core/second","p__26873","map__26874","re-view.view-spec/validate-spec","spec-map","value","and__4115__auto__","cljs.core.prn","js/console","p__26905","map__26906","re-view.view-spec/validate-props","display-name","prop-specs","prop-keys","cljs.core/keys","e26909","seq__26910","cljs.core/seq","chunk__26911","count__26912","i__26913","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","p1__26900#","cljs.core/filterv","G__26917","fexpr__26916","cljs.core/namespace","e","cljs.core.println","p__26919","map__26920","re-view.view-spec/validate-children","&more","children-spec","children","e26922","re-view.util/flatten-seqs","remaining-req","remaining-children","i","cljs.core/empty?","seq__26936","chunk__26937","count__26938","i__26939","child","cljs.core/rest"],"sourcesContent":["(ns re-view.view-spec\n  (:require [re-view.util :as util]\n            [clojure.string :as string]))\n\n(def spec-registry\n  \"Global registry for view specs\"\n  {})\n\n(defn defspecs\n  \"Define a view spec\"\n  [specs]\n  (set! spec-registry (merge spec-registry (reduce-kv (fn [m k v]\n                                                        (cond-> m\n                                                                (not (map? v)) (assoc k {:spec      v\n                                                                                         :spec-name k}))) specs specs))))\n\n(def Hiccup? #(and (vector? %)\n                   (keyword? (first %))))\n\n(def SVG? #(and (Hiccup? %)\n                (string/starts-with? (name (first %)) \"svg\")))\n\n(def Element? (util/any-pred\n                util/is-react-element?\n                Hiccup?\n                string?\n                nil?))\n\n(def builtins [[:Boolean boolean?]\n               [:String string?]\n               [:Number number?]\n               [:Function fn?]\n               [:Map map?]\n               [:Vector vector?]\n               [:Element Element?]\n               [:Hiccup Hiccup?]\n               [:SVG SVG?]\n               [:Object object?]\n               [:Keyword keyword?]])\n\n(defspecs (into {} builtins))\n(def ^:private spec-kinds (reduce (fn [m [name pred]] (assoc m pred name)) {} builtins))\n\n(defn resolve-spec\n  \"Resolves a spec. Keywords are looked up in the spec registry recursively until a function or set is found.\n  If a map's :spec is a namespaced keyword, it is resolved and merged (without overriding existing keys)\"\n  [k]\n  (cond (keyword? k) (resolve-spec (or (get spec-registry k)\n                                       (throw (js/Error (str \"View spec not registered: \" k)))))\n        (set? k) {:spec      k\n                  :spec-name :Set}\n        (fn? k) {:spec k}\n        (map? k) (let [spec (get k :spec)]\n                   (if (or (fn? spec)\n                           (set? spec))\n                     k\n                     (merge k (resolve-spec spec))))\n        :else (throw (js/Error (str \"Invalid spec: \" k)))))\n\n(defn spec-kind [{:keys [spec-name spec]}]\n  (or (get spec-kinds spec)\n      (if (set? spec) :Set\n                      spec-name)))\n\n(defn normalize-props-map\n  \"Resolves specs in map\"\n  [{:keys [props/keys\n           props/required] :as props}]\n  (as-> props props\n        (reduce-kv (fn [m k v]\n                     (assoc m k (resolve-spec v))) props (dissoc props :props/keys :props/required))\n        (reduce (fn [m k]\n                  (assoc m (keyword (name k)) (resolve-spec k))) props keys)\n        (reduce (fn [m k]\n                  (assoc m (keyword (name k)) (assoc (resolve-spec k) :required true))) props required)\n        (reduce-kv (fn [m k v]\n                     (let [{:keys [default pass-through required] :as spec} v]\n                       (cond-> (assoc m k spec)\n                               (not pass-through) (update :props/consumed conj k)\n                               required (update :props/required conj k)\n                               default (assoc-in [:props/defaults k] default))))\n                   (assoc props :props/consumed []\n                                :props/required []) props)))\n\n(defn resolve-spec-vector\n  \"Resolves specs in vector\"\n  [specs]\n  (when specs (let [[req opt] (split-with (partial not= :&) specs)]\n                {:req   (map resolve-spec req)\n                 :&more (some-> (second opt) (resolve-spec))})))\n\n(defn validate-spec [k {:keys [required spec spec-name] :as spec-map} value]\n  (when (and spec-map (not (fn? spec)) (not (set? spec)))\n    (prn :invalid-spec? k spec-map))\n  (if (nil? value)\n    (when required (throw (js/Error (str \"Prop is required: \" k))))\n    (when (and spec (not (spec value)))\n          (.log js/console \"value\" value)\n          (.log js/console \"spec\" spec)\n      #_(println \"Failed Spec\" spec-map)\n      #_(prn :spec spec-name :val value :spec spec)\n      (throw (js/Error (str \"Validation failed for prop: \" k \" with spec \" (or spec-name spec) \" and value \" value))))))\n\n(defn validate-props [display-name\n                      {:keys [props/required]\n                       :as   prop-specs} props]\n  (let [prop-keys (keys props)]\n    (try\n      (doseq [k (into required (filterv #(not (#{\"props\" \"spec\"} (namespace %))) (keys props)))]\n        (validate-spec k (get prop-specs k) (get props k)))\n      (catch js/Error e\n        (println \"Error validating props in \" display-name)\n        (throw e))))\n  props)\n\n(defn validate-children [display-name {:keys [req &more] :as children-spec} children]\n  (when children-spec\n    (try\n      (let [children (util/flatten-seqs children)]\n        (loop [remaining-req req\n               remaining-children children\n               i 0]\n          (if (empty? remaining-req)\n            (when-not (empty? remaining-children)\n              (if &more\n                (doseq [child remaining-children]\n                  (validate-spec :children-& &more child))\n                (throw (js/Error (str \"Expected fewer children. Provided \" (count children) \", expected \" (count req) (when &more \" or more\") \".\")))))\n            (if (empty? remaining-children)\n              (throw (js/Error (str \"Expected more children in \" display-name \". Provided \" (count children) \", expected \" (count req) (when &more \" or more\") \".\")))\n              (do (validate-spec (keyword (str \"children-\" i))\n                                 (first remaining-req)\n                                 (first remaining-children))\n                  (recur (rest remaining-req)\n                         (rest remaining-children)\n                         (inc i)))))))\n      (catch js/Error e\n        (.error js/console (str \"Error validating children in \" display-name))\n        (throw (js/Error e))\n        )))\n  children)"]}