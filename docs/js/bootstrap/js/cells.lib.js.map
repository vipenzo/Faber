{"version":3,"sources":["cells/lib.cljs"],"mappings":"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","names":["cells.lib/status!","cells.cell/status!","cells.lib/status","cells.cell/status","cells.lib/message","cells.cell/message","cells.lib/error?","cells.cell/error?","cells.lib/with-view","cells.cell/with-view","cells.lib/loading?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cells.cell/IStatus","cells.cell/loading?","cells.lib/dependencies","cells.cell/dependencies","cells.lib/dependents","cells.cell/dependents","cells.lib/unique-id","cljs.core.comp","cljs.core/str","cells.util/unique-id","cells.lib/query-string","query","js/goog.Uri","cljs.core/clj->js","var_args","G__48613","cells.lib/-on-frame","js/Error","f","cells.lib._on_frame","initial-value","self","cljs.core/first","cells.cell/*cell-stack*","stop?","cljs.core/volatile!","interval-f","the-cell__43468__auto__","context__43469__auto__","cells.cell/*eval-context*","args__43470__auto__","*cell-stack*-orig-val__48621","*cell-stack*-temp-val__48622","cljs.core/cons","cljs.core.apply","e48632","error__43471__auto__","cells.eval-context/handle-error","cljs.core/reset!","G__48649","cljs.core/deref","js/window","frame-f","cells.eval-context/on-dispose","cljs.core/vreset!","G__48659","cells.lib/interval","n","cells.lib.interval","cljs.core._EQ_","clear-key","_","G__48664","js/clearInterval","*cell-stack*-orig-val__48665","*cell-stack*-temp-val__48666","e48667","G__48671","js/setInterval","G__48678","cells.lib/timeout","cells.lib.timeout","js/setTimeout","*cell-stack*-orig-val__48684","*cell-stack*-temp-val__48685","e48686","G__48687","js/clearTimeout","cells.lib/parse-fns","p1__48692#","cljs.core.js__GT_clj","js/JSON.parse","cljs.core/identity","G__48706","cells.lib/fetch","p__48708","map__48710","cljs.core/hash-map","cljs.core.get","url","cells.lib.fetch","format","options","G__48714","parse","goog.net.XhrIo/send","*cell-stack*-orig-val__48716","*cell-stack*-temp-val__48717","e48723","event","xhrio","cljs.core/not","G__48724","G__48725","G__48726","goog.net.ErrorCode/getDebugMessage","formatted-value","G__48729","cells.lib/geo-location","js/navigator.geolocation.getCurrentPosition","*cell-stack*-orig-val__48732","*cell-stack*-temp-val__48733","e48738","location","*cell-stack*-orig-val__48740","*cell-stack*-temp-val__48741","e48746","error"],"sourcesContent":["(ns cells.lib\n  (:require [cells.cell :as cell\n             :refer [*cell-stack*]\n             :refer-macros [cell-fn cell]\n             :include-macros true]\n            [cells.eval-context :refer [on-dispose handle-error]]\n            [goog.net.XhrIo :as xhr]\n            [goog.net.ErrorCode :as errors]\n            [cells.util :as util])\n  (:require-macros [cells.lib])\n  (:import [goog Uri]))\n\n(declare -on-frame\n         interval\n         timeout\n         fetch\n         geo-location)\n\n(def status!\n\n  cell/status!)\n\n(def status\n  \"Returns the cell's status (a keyword)\"\n  cell/status)\n\n(def message\n  \"Returns the cell's status message, if it exists.\"\n  cell/message)\n\n(def error?\n  \"Returns true if cell's status is :error\"\n  cell/error?)\n\n(def with-view\n  \"Wraps a cell with a view (as metadata)\"\n  cell/with-view)\n\n(defn loading?\n  \"Returns true if x has a status of :loading.\"\n  [x]\n  (and (satisfies? cell/IStatus x)\n       (cell/loading? x)))\n\n(def dependencies cell/dependencies)\n(def dependents cell/dependents)\n(def unique-id (comp str util/unique-id))\n\n#_(defn restricted-swap! [specified-name cell & args]\n    (if (instance? cell/Cell cell)\n      (do (assert (= specified-name (name cell)))\n          (apply cell/swap-cell! cell args))\n      (apply swap! cell args)))\n\n#_(defn restricted-reset! [specified-name cell newval]\n    (if (instance? cell/Cell cell)\n      (do (assert (= specified-name (name cell)))\n          (cell/reset-cell! cell newval))\n      (reset! cell newval)))\n\n(defn- query-string [query]\n  (-> Uri .-QueryData (.createFromMap (clj->js query)) (.toString)))\n\n(defn -on-frame\n  ([f] (-on-frame f nil))\n  ([f initial-value]\n   (let [self (first cell/*cell-stack*)\n         stop? (volatile! false)\n         interval-f (cell-fn frame-f []\n                             (reset! self (f @self))\n                             (when-not @stop?\n                               (.requestAnimationFrame js/window frame-f)))]\n     (on-dispose self #(vreset! stop? true))\n     (reset! self initial-value)\n     (.requestAnimationFrame js/window interval-f))))\n\n(defn interval\n  ([n f] (interval n f nil))\n  ([n f initial-value]\n   (if (= n :frame)\n     (-on-frame f initial-value)\n     (let [self (first cell/*cell-stack*)\n           clear-key (volatile! nil)\n           _ (on-dispose self #(some-> @clear-key (js/clearInterval)))\n           interval-f (cell-fn [] (reset! self (f @self)))]\n       (vreset! clear-key (js/setInterval interval-f n))\n       (reset! self (f initial-value))))))\n\n(defn- timeout\n  ([n f] (timeout n f nil))\n  ([n f initial-value]\n\n   (let [self (first cell/*cell-stack*)\n         _ (cell/status! self :loading)\n         clear-key (js/setTimeout (cell-fn []\n                                           (cell/status! self nil)\n                                           (reset! self (f @self))) n)]\n     (on-dispose self #(js/clearTimeout clear-key))\n     initial-value)))\n\n(def parse-fns {:json->clj (comp #(js->clj % :keywordize-keys true) js/JSON.parse)\n                :json      js/JSON.parse\n                :text      identity})\n\n(defn fetch\n  \"Fetch a resource from a url. By default, response is parsed as JSON and converted to Clojure via clj->js with :keywordize-keys true.\n  Accepts options :format, which may be :json or :text, and :query, a map which will be\n  appended to url as a query parameter string.\"\n  ([url]\n   (fetch url {}))\n  ([url {:keys [format query]\n         :or   {format :json->clj}\n         :as   options}]\n   [url options]\n   (let [self (first cell/*cell-stack*)\n         url (cond-> url\n                     query (str \"?\" (query-string query)))\n         parse (get parse-fns format)]\n     (cell/status! self :loading)\n     (xhr/send url (cell-fn [event]\n                            (let [xhrio (.-target event)]\n                              (if-not (.isSuccess xhrio)\n                                (status! self :error {:message         (-> xhrio .getLastErrorCode (errors/getDebugMessage))\n                                                                :xhrio xhrio})\n                                (let [formatted-value (-> xhrio (.getResponseText) (parse))]\n                                  (status! self nil)\n                                  (reset! self formatted-value))))))\n     @self)))\n\n(defn geo-location\n  []\n  (let [self (first *cell-stack*)]\n    (cell/status! self :loading)\n    (js/navigator.geolocation.getCurrentPosition\n      (cell-fn [location]\n               (cell/status! self nil)\n               (->> {:latitude  (.. location -coords -latitude)\n                     :longitude (.. location -coords -longitude)}\n                    (reset! self)))\n      (cell-fn [error]\n               (cell/status! self :error (str error))))))\n"]}