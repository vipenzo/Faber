{"version":3,"sources":["thi/ng/geom/plane.cljc"],"mappings":"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","names":["thi.ng.geom.plane/plane","n","w","thi.ng.geom.types/Plane","thi.ng.geom.core/normalize","thi.ng.geom.core.vector.vec3","thi.ng.geom.plane/plane-with-point","p","thi.ng.geom.core/dot","var_args","G__28458","thi.ng.geom.plane/plane-from-points","js/Error","p__28459","vec__28460","cljs.core.nth","a","b","c","thi.ng.geom.plane.plane_from_points","thi.ng.geom.core.utils.ortho_normal","cljs.core/PROTOCOL_SENTINEL","_","thi.ng.math.core/INF+","s","thi.ng.geom.core/width","thi.ng.geom.core/height","thi.ng.geom.core/depth","thi.ng.geom.types/AABB","thi.ng.geom.core/centroid","thi.ng.math.core/delta=","thi.ng.geom.core/abs","thi.ng.geom.core.vector/V3X","thi.ng.math.core/*eps*","thi.ng.geom.core.vector/V3Y","thi.ng.geom.core.vector/V3Z","thi.ng.geom.types/Sphere","o","thi.ng.geom.core/*","thi.ng.math.core.signum","d","thi.ng.geom.core/dist","thi.ng.geom.core/-","l","vec__28464","q","cljs.core/map?","thi.ng.geom.core.intersect/intersect-ray-plane?","ray","vec__28467","dir","thi.ng.geom.core.intersect/intersect-plane-plane?","thi.ng.geom.core.intersect/intersect-plane-sphere?","thi.ng.xerror.core.illegal_arg_BANG_","p__28472","map__28473","cljs.core.apply","cljs.core/hash-map","cljs.core.get","thi.ng.geom.core/as-mesh","width","height","size","mesh","or__4126__auto__","h","flip?","thi.ng.geom.core/closest-point","thi.ng.geom.core.quaternion.quat","thi.ng.geom.core.quaternion/alignment-quat","face","p1__28463#","cljs.core.mapv","thi.ng.geom.core/+","thi.ng.geom.core/into","thi.ng.geom.basicmesh/basic-mesh","cljs.core/rseq","t","m","thi.ng.geom.core/transform-vector"],"sourcesContent":["(ns thi.ng.geom.plane\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.core.utils :as gu]\n   [thi.ng.geom.core.intersect :as isec]\n   [thi.ng.geom.core.vector :as v :refer [vec3]]\n   [thi.ng.geom.core.quaternion :as q]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.types :as types]\n   [thi.ng.geom.types.utils :as tu]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps* INF+]]\n   #?(:clj [thi.ng.math.macros :as mm])))\n\n(defn plane\n  [n w] (thi.ng.geom.types.Plane. (g/normalize (vec3 n)) w))\n\n(defn plane-with-point\n  [p n]\n  (let [n (g/normalize (vec3 n))]\n    (thi.ng.geom.types.Plane. n (- (g/dot n p)))))\n\n(defn plane-from-points\n  ([[a b c]] (plane-from-points a b c))\n  ([a b c]\n     (let [n (gu/ortho-normal a b c)]\n       (thi.ng.geom.types.Plane. n (- (g/dot n a))))))\n\n\n\n\n(extend-type thi.ng.geom.types.Plane\ng/PArea\n(area [_] INF+)\ng/PBounds\n(bounds\n [_]\n (let [s (vec3 (g/width _) (g/height _) (g/depth _))]\n   (thi.ng.geom.types.AABB. (g/madd s -0.5 (g/centroid _)) s)))\n(width\n [_] (if (m/delta= (g/abs (:n _)) v/V3X *eps*) 0.0 INF+))\n(height\n [_] (if (m/delta= (g/abs (:n _)) v/V3Y *eps*) 0.0 INF+))\n(depth\n [_] (if (m/delta= (g/abs (:n _)) v/V3Z *eps*) 0.0 INF+))\ng/PBoundingSphere\n(bounding-sphere\n  [_] (thi.ng.geom.types.Sphere. (g/centroid _) INF+))\ng/PCenter\n(center\n  ([_] (thi.ng.geom.types.Plane. (:n _) 0))\n  ([_ o] (plane-with-point o (:n _))))\n(centroid\n  ([_] (g/* (:n _) (- (:w _)))))\ng/PClassify\n(classify-point\n  [_ p]\n  (-> (:n _) (g/dot p) (+ (:w _)) (m/signum *eps*)))\ng/PDistance\n(dist\n [_ p] (+ (g/dot (:n _) p) (:w _)))\n(dist-squared\n [_ p] (let [d (g/dist _ p)] (* d d)))\ng/PFlip\n(flip\n  [_] (thi.ng.geom.types.Plane. (g/- (:n _)) (- (:w _))))\ng/PIntersect\n(intersect-line\n ([_ l]\n    (let [[p q] (if (map? l) (:points l) l)]\n      (isec/intersect-ray-plane? p (g/- q p) (:n _) (:w _))))\n ([_ p q]\n    (isec/intersect-ray-plane? p (g/- q p) (:n _) (:w _))))\n(intersect-ray\n ([_ ray]\n    (let [[p dir] (if (map? ray) [(:p ray) (:dir ray)] ray)]\n      (isec/intersect-ray-plane? p dir (:n _) (:w _))))\n ([_ p dir]\n    (isec/intersect-ray-plane? p dir (:n _) (:w _))))\n(intersect-shape\n [_ s]\n (cond\n  (instance? thi.ng.geom.types.Plane s)\n  (isec/intersect-plane-plane? (:n _) (:w _) (:n s) (:w s))\n  (instance? thi.ng.geom.types.Sphere s)\n  (isec/intersect-plane-sphere? (:n _) (:w _) (:p s) (:r s))\n  :default (err/illegal-arg! s)))\ng/PMeshConvert\n(as-mesh\n ([_] (g/as-mesh _ {}))\n ([_ {:keys [p width height size mesh] :or {size 1.0}}]\n  (let [w     (* (or width size) 0.5)\n        h     (* (or height size) 0.5)\n        flip? (m/delta= -1.0 (g/dot (:n _) v/V3Z))\n        p     (g/closest-point _ (or p (vec3)))\n        q     (if flip?\n                (q/quat 0 0 0 1)\n                (q/alignment-quat v/V3Z (:n _)))\n        face  (mapv\n               #(g/+ p (g/transform-vector q %))\n               [(vec3 (- w) (- h) 0) (vec3 (- w) h 0)\n                (vec3 w h 0) (vec3 w (- h) 0)])]\n    (g/into\n     (or mesh (bm/basic-mesh))\n     [(if flip? face (rseq face))]))))\ng/PProximity\n(closest-point\n  [_ p]\n  (->> p\n       (g/dot (:n _))\n       (+ (:w _))\n       (g/normalize (:n _))\n       (g/- p)))\ng/PScale\n(scale\n ([_ s] (plane-with-point (g/* (g/centroid _) s) (:n _)))\n ([_ a b] (plane-with-point (g/* (g/centroid _) a b) (:n _)))\n ([_ a b c] (plane-with-point (g/* (g/centroid _) a b c) (:n _))))\n(scale-size\n ([_ s] _))\ng/PTranslate\n(translate\n [_ t] (plane-with-point (g/+ (g/centroid _) t) (:n _)))\ng/PTransform\n(transform\n [_ m] (plane-with-point\n        (g/transform-vector m (g/centroid _))\n        (g/transform-vector m (:n _))))\ng/PVolume\n(volume [_] 0.0)\n)\n"]}