["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_view/hiccup/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",24],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:shadow/protocol-prefixes",["~#set",["re-view$hiccup$core$IElement$","re-view$hiccup$core$IEmitHiccup$"]],"~:use-macros",null,"~:excludes",["^@",[]],"~:name","~$re-view.hiccup.core","~:imports",null,"~:requires",["^ ","~$re-view.hiccup.hiccup","^G","~$hiccup","^G","^<","^<","~$goog","^I"],"~:seen",["^@",["~:require"]],"~:shadow/js-access-global",["^@",["Symbol","Error"]],"~:uses",null,"~:defs",["^ ","~$IElement",["^ ","^2",["^ ","~:protocol-symbol",true,"^3","re_view/hiccup/core.cljs","^7",22,"^5",14,"^4",14,"~:protocol-info",["^ ","~:methods",["^ ","~$to-element",[["~$this"]]]],"^6",14,"~:sigs",["^ ","~:to-element",["^ ","^C","^S","~:arglists",["~#list",[["^T"]]],"~:doc","Returns a React element representing `this`"]],"~:jsdoc",["^X",["@interface"]]],"^P",true,"^C","~$re-view.hiccup.core/IElement","^3","re_view/hiccup/core.cljs","^7",22,"^5",1,"^4",14,"^Q",["^ ","^R",["^ ","^S",[["^T"]]]],"~:info",null,"^6",14,"~:tag","~$any","^U",["^ ","^V",["^ ","^C","^S","^W",["^X",[["^T"]]],"^Y","Returns a React element representing `this`"]],"~:impls",["^@",[]],"^Z",["^X",["@interface"]]],"^S",["^ ","~:protocol-inline",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",15,"^5",4,"^6",15,"^7",14,"~:protocol","^[","^Y","Returns a React element representing `this`","^W",["^X",["~$quote",["^X",[["^T"]]]]]],"^15","^[","^C","~$re-view.hiccup.core/to-element","^3","re_view/hiccup/core.cljs","^7",14,"~:method-params",["^X",[["^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^5",1,"~:variadic?",false,"^4",14,"~:ret-tag","^12","^6",15,"~:max-fixed-arity",1,"~:fn-var",true,"^W",["^X",["^16",["^X",[["^T"]]]]],"^Y","Returns a React element representing `this`"],"~$IEmitHiccup",["^ ","^2",["^ ","^P",true,"^3","re_view/hiccup/core.cljs","^7",25,"^5",14,"^4",17,"^Q",["^ ","^R",["^ ","~$to-hiccup",[["^T"]]]],"^6",17,"^U",["^ ","~:to-hiccup",["^ ","^C","^1@","^W",["^X",[["^T"]]],"^Y","Returns a hiccup form representing `this`"]],"^Z",["^X",["@interface"]]],"^P",true,"^C","~$re-view.hiccup.core/IEmitHiccup","^3","re_view/hiccup/core.cljs","^7",25,"^5",1,"^4",17,"^Q",["^ ","^R",["^ ","^1@",[["^T"]]]],"^10",null,"^6",17,"^11","^12","^U",["^ ","^1A",["^ ","^C","^1@","^W",["^X",[["^T"]]],"^Y","Returns a hiccup form representing `this`"]],"^13",["^@",[]],"^Z",["^X",["@interface"]]],"^1@",["^ ","^14",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",18,"^5",4,"^6",18,"^7",13,"^15","^1B","^Y","Returns a hiccup form representing `this`","^W",["^X",["^16",["^X",[["^T"]]]]]],"^15","^1B","^C","~$re-view.hiccup.core/to-hiccup","^3","re_view/hiccup/core.cljs","^7",13,"^18",["^X",[["^T"]]],"^19",null,"^1:",["^X",[null,null]],"^5",1,"^1;",false,"^4",17,"^1<","^12","^6",18,"^1=",1,"^1>",true,"^W",["^X",["^16",["^X",[["^T"]]]]],"^Y","Returns a hiccup form representing `this`"],"~$-to-element",["^ ","^14",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",20,"^5",7,"^6",20,"^7",18,"^W",["^X",["^16",["^X",[["~$form"]]]]]],"^C","~$re-view.hiccup.core/-to-element","^3","re_view/hiccup/core.cljs","^7",18,"^18",["^X",[["^1E"]]],"^19",null,"^1:",["^X",[null,null]],"^5",1,"^1;",false,"^4",20,"^1<",["^@",[null,"^12"]],"^6",20,"^1=",1,"^1>",true,"^W",["^X",["^16",["^X",[["^1E"]]]]]],"~$element",["^ ","^14",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",46,"^5",7,"^6",46,"^7",14,"^W",["^X",["^16",["^X",[["^1E"],["^1E",["^ ","~:keys",["~$wrap-props","~$create-element"]]]]]]],"^Y","Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement.","~:top-fn",["^ ","^1;",false,"~:fixed-arity",2,"^1=",2,"^18",[["^1E"],["^1E",["^ ","^1H",["^1I","^1J"]]]],"^W",["^X",[["^1E"],["^1E",["^ ","^1H",["^1I","^1J"]]]]],"^1:",["^X",[null,null]]]],"^C","~$re-view.hiccup.core/element","^3","re_view/hiccup/core.cljs","^7",14,"^1K",["^ ","^1;",false,"^1L",2,"^1=",2,"^18",[["^1E"],["^1E",["^ ","^1H",["^1I","^1J"]]]],"^W",["^X",[["^1E"],["^1E",["^ ","^1H",["^1I","^1J"]]]]],"^1:",["^X",[null,null]]],"^18",[["^1E"],["^1E",["^ ","^1H",["^1I","^1J"]]]],"^19",null,"^1L",2,"^1:",["^X",[null,null]],"^5",1,"^1;",false,"^R",[["^ ","^1L",1,"^1;",false,"^11",["^@",[null,"^12"]]],["^ ","^1L",2,"^1;",false]],"^4",46,"^6",46,"^1=",2,"^1>",true,"^W",["^X",[["^1E"],["^1E",["^ ","^1H",["^1I","^1J"]]]]],"^Y","Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^J",["^@",["~:else","~:wrap-props","~:create-element"]],"~:order",["^1P","^1Q","^1R"]],"~:flags",["^ ","^K",["^@",[]]],"~:js-deps",["^ "],"~:deps",["^I","^<","^G"]]