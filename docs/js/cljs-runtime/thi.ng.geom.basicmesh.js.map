{"version":3,"sources":["thi/ng/geom/basicmesh.cljc"],"mappings":"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","names":["thi.ng.geom.basicmesh/add-face","mesh","f","thi.ng.geom.types/BasicMesh","cljs.core.into","cljs.core.conj","thi.ng.geom.basicmesh/basic-mesh","cljs.core/PROTOCOL_SENTINEL","_","thi.ng.geom.core.utils/total-area-3d","thi.ng.geom.types.utils/bounding-box","cljs.core/seq","thi.ng.geom.core.utils/axis-range","thi.ng.geom.types.utils.bounding_sphere","thi.ng.geom.core/centroid","thi.ng.geom.core/center","thi.ng.geom.core.vector.vec3","o","thi.ng.geom.core/transform","thi.ng.geom.core.matrix/M44","thi.ng.geom.core/-","thi.ng.geom.core.utils/centroid","thi.ng.geom.types.utils/map-mesh","cljs.core/vec","cljs.core/rseq","cljs.core.comp","p1__28444#","cljs.core.mapcat","thi.ng.dstruct.core.successive_nth","cljs.core/first","cljs.core.map","cljs.core/set","v","p1__28445#","cljs.core.filter","thi.ng.dstruct.core/index-of","thi.ng.xerror.core.unsupported_BANG_","force?","thi.ng.geom.core/compute-face-normals","fexpr__28451","fnorms","cljs.core/transient","faces","cljs.core.assoc_BANG_","thi.ng.geom.core.utils.ortho_normal","cljs.core/next","cljs.core.assoc","cljs.core/persistent!","thi.ng.geom.types.utils/into-mesh","opts","thi.ng.geom.core/into","thi.ng.geom.core/tessellate","or__4126__auto__","thi.ng.geom.core.utils/tessellate-with-first","s","p1__28446#","thi.ng.geom.types.utils/transform-mesh","thi.ng.geom.core/*","sx","sy","sz","p1__28447#","c","p1__28448#","thi.ng.geom.core/madd","t","p1__28449#","thi.ng.geom.core/+","m","thi.ng.geom.core.utils/total-volume"],"sourcesContent":["(ns thi.ng.geom.basicmesh\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.core.utils :as gu]\n   [thi.ng.geom.core.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.core.matrix :refer [M44]]\n   [thi.ng.geom.types :as types]\n   [thi.ng.geom.types.utils :as tu]\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   [thi.ng.xerror.core :as err]\n   [clojure.core.reducers :as r]))\n\n(declare basic-mesh)\n\n(defn add-face\n  [mesh f]\n  (thi.ng.geom.types.BasicMesh.\n   (into (:vertices mesh) f)\n   (conj (:faces mesh) f)\n   (:fnormals mesh)\n   (:attribs mesh)))\n\n(defn basic-mesh\n  \"Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices.\"\n  [] (thi.ng.geom.types.BasicMesh. #{} #{} {} {}))\n\n(extend-type thi.ng.geom.types.BasicMesh\ng/PArea\n(area\n [_] (gu/total-area-3d (:faces _)))\n\n\ng/PBounds\n(bounds [_] (tu/bounding-box (seq (:vertices _))))\n(width [_]  (gu/axis-range 0 (:vertices _)))\n(height [_] (gu/axis-range 1 (:vertices _)))\n(depth [_]  (gu/axis-range 2 (:vertices _)))\ng/PBoundingSphere\n(bounding-sphere\n [_] (tu/bounding-sphere (g/centroid _) (:vertices _)))\ng/PCenter\n(center\n ([_]   (g/center _ (vec3)))\n ([_ o] (g/transform _ (g/translate M44 (g/- o (g/centroid _))))))\n(centroid\n [_]    (gu/centroid (seq (:vertices _))))\ng/PFlip\n(flip [_] (tu/map-mesh (fn [f] [(vec (rseq f))]) _))\ng/PVertexAccess\n(vertices\n [_] (:vertices _))\ng/PEdgeAccess\n(edges\n [_]\n (into\n  #{}\n  (comp\n   (mapcat #(d/successive-nth 2 (conj % (first %))))\n   (map set))\n  (:faces _)))\ng/PFaceAccess\n(faces\n [_] (:faces _))\n(add-face\n [_ f] (add-face _ f))\n(vertex-faces\n [_ v] (filter\n        #(>= #?(:clj (.indexOf ^clojure.lang.PersistentVector % v) :cljs (d/index-of % v)) 0)\n        (:faces _)))\n(remove-face\n [_ f]\n (err/unsupported!))\ng/PNormalAccess\n(face-normals\n [_ force?] (if (seq (:fnormals _)) (:fnormals _) (if force? (:fnormals (g/compute-face-normals _)))))\n(face-normal\n [_ f] ((:fnormals _) f))\n(vertex-normals\n [_ force?] (if force? (err/unsupported!)))\n(vertex-normal\n [_ v] (err/unsupported!))\n(compute-face-normals\n [_]\n (loop [fnorms (transient {}), faces (:faces _)]\n   (if faces\n     (let [f (first faces)]\n       (recur (assoc! fnorms f (gu/ortho-normal f)) (next faces)))\n     (assoc _ :fnormals (persistent! fnorms)))))\n(compute-vertex-normals\n [_] (err/unsupported!))\ng/PGeomContainer\n(into\n [_ faces] (tu/into-mesh _ add-face faces))\ng/PClear\n(clear*\n [_] (basic-mesh))\ng/PMeshConvert\n(as-mesh\n ([_] _)\n ([_ opts] (g/into (:mesh opts) (:faces _))))\ng/PTessellate\n(tessellate\n ([_]      (g/tessellate _ {}))\n ([_ opts] (tu/map-mesh (or (:fn opts) gu/tessellate-with-first) _)))\ng/PScale\n(scale\n ([_ s]\n    (tu/transform-mesh _ add-face #(g/* % s)))\n ([_ sx sy sz]\n    (tu/transform-mesh _ add-face #(g/* % sx sy sz))))\n(scale-size\n [_ s]\n (let [c (g/centroid _)]\n   (tu/transform-mesh _ add-face #(g/madd (g/- % c) s c))))\ng/PTranslate\n(translate\n [_ t] (tu/transform-mesh _ add-face #(g/+ % t)))\ng/PTransform\n(transform\n [_ m]\n (tu/transform-mesh _ add-face m))\ng/PVolume\n(volume\n [_] (gu/total-volume (:faces _)))\n)\n"]}