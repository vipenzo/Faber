{"version":3,"sources":["faber/operations_3d.cljs"],"mappings":"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","names":["faber.operations-3d/ComplexGeometry","js/module$node_modules$three$examples$jsm$geometries$ConvexGeometry","faber.operations-3d/ThreeBSP","js/module$node_modules$three_js_csg$index","js/module$node_modules$three$build$three","faber.operations-3d/default-material","js/module$node_modules$three$build$three.MeshPhongMaterial","cljs.core/clj->js","faber.operations-3d/pi","Math/PI","faber.operations-3d/tau","faber.operations-3d/*fa*","faber.operations-3d/*fn*","faber.operations-3d/*fs*","faber.operations-3d/with-fn","x","f","*fn*-orig-val__27031","*fn*-temp-val__27032","faber.operations-3d/with-fa","*fa*-orig-val__27033","*fa*-temp-val__27034","faber.operations-3d/with-fs","*fs*-orig-val__27035","*fs*-temp-val__27036","faber.operations-3d/cube","y","z","vec__27037","cljs.core.nth","js/module$node_modules$three$build$three.Mesh","js/module$node_modules$three$build$three.BoxGeometry","faber.operations-3d/calc-number-of-segments","radius","x__4214__auto__","y__4215__auto__","Math/ceil","Math/asin","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","faber.operations-3d/hull","seq27044","self__4724__auto__","cljs.core/seq","args","cljs.core.println","hull2","mesh_a","mesh_b","tmp","js/module$node_modules$three$build$three.Geometry","cljs.core._EQ_","cljs.core/count","cljs.core/first","cljs.core.reduce","faber.operations-3d/sphere","segs","js/module$node_modules$three$build$three.SphereGeometry","faber.operations-3d/cylinder","h","bottom-r","top-r","top","js/module$node_modules$three$build$three.CylinderGeometry","faber.operations-3d/translate","mesh","faber.operations-3d/scale","faber.operations-3d/rotatec","faber.operations-3d/rotatev","a","G__27051","faber.operations-3d/csg-op","args-arr__4757__auto__","argseq__4758__auto__","seq27049","G__27050","cljs.core/next","self__4723__auto__","csg_a","csg_b","csg_res","res","op","meshes","cljs.core/seq?","b","faber.operations_3d.csg_op","faber.operations-3d/f","faber.operations-3d/difference","seq27054","cljs.core.apply","faber.operations-3d/intersection","seq27062","faber.operations-3d/union","seq27070","faber.operations-3d/v-from-js","v3","map__27077","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","applied-science.js-interop/lookup","faber.operations-3d/dumpv","v","vec__27083","p1__27081#","cljs.core.map","obj27086","k27087","applied-science.js-interop.impl/wrap-key","obj27088","applied-science.js-interop.impl/in?*","js/undefined","faber.operations-3d/to-mygeo","g","verts","obj27092","k27093","obj27094","faces","obj27098","k27099","obj27100","normals","face","vindexes","p1__27091#","obj27101","k27102","obj27103","face-normals","obj27105","k27106","obj27107","cljs.core/vector","vertices","cljs.core.mapv","faber.operations-3d/collect-vertex-normals","mygeo","cljs.core/group-by","cljs.core.mapcat","cljs.core/identity","cljs.core/reduce-kv","m","k","cljs.core.assoc","cljs.core/second","faber.operations-3d/vectors-sum","vs","p1__27116#","p2__27117#","cljs.core/+","faber.operations-3d/vector-scalar-mult","n","p1__27122#","faber.operations-3d/vector-normalize","Math/sqrt","p1__27123#","p1__27124#","faber.operations-3d/offset-mygeo","mg","r","vertex-normals","_","updatevert","i","cljs.core/vec","p1__27128#","p2__27129#","p1__27130#","cljs.core.update","cljs.core.range","faber.operations-3d/inflate","obj27143","k27144","obj27145","obj27146","k27147","obj27148","newverts","p__27153","vec__27154","js/module$node_modules$three$build$three.Vector3","faber.operations-3d/mesh-size-from-bounding-box","obj27157","k27158","obj27159","obj__26806__auto__","f__26807__auto__","map__27160","obj27161","k27162","obj27163","p__27171","map__27172","faber.operations-3d/offset","meshsize","factor","p1__27167#","p__27180","vec__27181","faber.operations-3d/rotate-to-XY","faber.operations-3d/get-trianles","points","cljs.core.into","triangles","acc","vi","ts","js/module$node_modules$earcut$src$earcut.default","cljs.core.partition","cljs.core.concat","cljs.core.conj","faber.operations-3d/polyhedron","p__27191","vec__27192","p1__27190#","cljs.core/some","p__27195","vec__27196","c","js/module$node_modules$three$build$three.Face3","obj27199","obj27200","obj27203","obj27204"],"sourcesContent":["(ns faber.operations-3d\n  (:require [applied-science.js-interop :as j]\n            [\"three\" :as three]\n            [\"three-js-csg\" :as csg]\n            [\"earcut\" :default earcut]\n            [\"three/examples/jsm/geometries/ConvexGeometry\" :as convex]))\n\n(def ComplexGeometry (.-ConvexGeometry convex))\n\n(def ThreeBSP (csg three))\n\n(def default-material (three/MeshPhongMaterial. (clj->js {:ambient 0x050505, :color 0x0033ff, :specular 0x555555, :shininess 30})))\n\n(def pi Math/PI)\n(def tau (* 2 pi))\n\n(def ^:dynamic *fa* false)\n(def ^:dynamic *fn* false)\n(def ^:dynamic *fs* false)\n\n(defn with-fn [x f]\n  (binding [*fn* x] (f)))\n\n(defn with-fa [x f]\n  (binding [*fa* x] (f)))\n\n(defn with-fs [x f]\n  (binding [*fs* x] (f)))\n\n(defn cube [x y z]\n  (let [[y z] (if (or (nil? y) (nil? z))\n                [x x]\n                [y z])]\n    (three/Mesh. (three/BoxGeometry. x y z) default-material)))\n\n(defn calc-number-of-segments [radius]\n  (cond\n    *fn* (max *fn* 3)\n    *fa* (max (/ 360 *fa*) 3)\n    *fs* (max (Math/ceil (/ tau (Math/asin (/ *fs* radius)))) 3)\n    :default  8\n    )\n  )\n\n(defn hull [& args]\n  (println \"hull args=\" args)\n  (let [hull2 (fn [mesh_a mesh_b]\n                (let [tmp (three/Geometry.)]\n                  (.mergeMesh tmp mesh_a)\n                  (.mergeMesh tmp mesh_b)\n                  (.mergeVertices tmp)\n                  (three/Mesh. (ComplexGeometry. (.-vertices tmp)) default-material)))]\n    (cond\n      (= 1 (count args)) (first args)\n      :default (reduce hull2 args))))\n\n(defn sphere [radius]\n  (println \"Sphere radius=\" radius)\n  (let [segs (calc-number-of-segments radius)]\n    (println \"segs=\" segs)\n    (three/Mesh. (three/SphereGeometry. radius segs segs) default-material)))\n\n(defn cylinder [h bottom-r top-r]\n  (let [top (if top-r\n              top-r\n              bottom-r)\n        segs (calc-number-of-segments (max bottom-r top-r))]\n    (three/Mesh. (three/CylinderGeometry. top-r bottom-r h segs) default-material)))\n\n(defn translate [mesh x y z]\n  (set! (.-x (.-position mesh)) x)\n  (set! (.-y (.-position mesh)) y)\n  (set! (.-z (.-position mesh)) z)\n  mesh)\n\n(defn scale [mesh x y z]\n  (set! (.-x (.-scale mesh)) x)\n  (set! (.-y (.-scale mesh)) y)\n  (set! (.-z (.-scale mesh)) z)\n  mesh)\n\n(defn rotatec [mesh x y z]\n  (set! (.-x (.-rotation mesh)) x)\n  (set! (.-y (.-rotation mesh)) y)\n  (set! (.-z (.-rotation mesh)) z)\n  mesh)\n\n(defn rotatev [mesh a x y z]\n  (set! (.-x (.-rotation mesh)) (* a x))\n  (set! (.-y (.-rotation mesh)) (* a y))\n  (set! (.-z (.-rotation mesh)) (* a z))\n  mesh)\n\n(defn csg-op\n  ([f mesh_a mesh_b]\n   (let [csg_a (ThreeBSP. mesh_a)\n         csg_b (ThreeBSP. mesh_b)\n         csg_res (f csg_a csg_b)\n         res (.toMesh csg_res default-material)]\n     (.computeVertexNormals (. res -geometry))\n     res))\n  ([op & meshes]\n   (println \"csg-op meshes=\" meshes \" (and (seq? meshes) (> 1 (count meshes)))=\" (and (seq? meshes) (> 1 (count meshes))))\n   (cond\n     (and (seq? meshes) (> 1 (count meshes))) (reduce (fn [a b] (csg-op f a b)) meshes)\n     (seq? meshes) (first meshes)\n     :default meshes)))\n\n(defn difference [& args]\n  (apply csg-op (fn [a b] (.subtract a b))  args))\n\n(defn intersection [& args]\n  (apply csg-op (fn [a b] (.intersect a b))  args))\n\n(defn union [& args]\n  (apply csg-op (fn [a b] (.union a b))  args)\n  )\n\n(defn v-from-js [v3]\n  (let [{:keys [x y z]} (j/lookup v3)]\n    [x y z]))\n\n\n(defn dumpv [v]\n  (let [[x y z] (map #(j/get v %) [:x :y :z])]\n    (println \"x=\" x \" y=\" y \" z=\" z)))\n\n\n(defn to-mygeo [g]\n  (let [verts (j/get g :vertices)\n        faces (j/get g :faces)\n        normals (map (fn [face]\n                          (let [vindexes (map #(j/get face %) [:a :b :c])\n                                face-normals (map v-from-js (j/get face :vertexNormals))]\n                            (map vector vindexes face-normals)\n                            )) faces)\n        vertices (mapv v-from-js verts)]\n\n\n    {:vertices vertices\n     :faces-and-normals normals}))\n\n(defn collect-vertex-normals [mygeo]\n  (->> (group-by first (mapcat identity (:faces-and-normals mygeo)))\n       (reduce-kv (fn [m k v]\n                   (assoc m k (map second v))) {})))\n\n(defn vectors-sum [vs]\n  (reduce #(mapv + %1 %2) [0 0 0] vs))\n\n(defn vector-scalar-mult [v n]\n  (mapv #(* % n) v))\n\n(defn vector-normalize [v]\n  (let [m (Math/sqrt (reduce + (map #(* % %) v)))]\n    (if (zero? m)\n      [0 0 0]\n      (mapv #(/ % m) v))))\n\n(defn offset-mygeo [mg r]\n  (let [vertex-normals (->> (collect-vertex-normals mg)\n                            (reduce-kv (fn [m k v] (assoc m k (-> (vectors-sum v)\n                                                                 (vector-normalize)))) {}))\n        _         (println \"vertex-normals=\" vertex-normals)\n        updatevert (fn [v i]\n                     (vec (mapv #(+ %1 %2) v (vector-scalar-mult (vertex-normals i) r))))]\n    (update mg :vertices #(mapv updatevert %1 (range)))))\n\n\n(comment\n  (def mg (to-mygeo (j/get (cube 1 1 1) :geometry)))\n  (get-in mg [:vertices 0 0])\n  (update-in mg [:vertices 0 0] #(+ % 0.2))\n  (mapcat identity (:faces-and-normals mg))\n  (def vn (collect-vertex-normals mg))\n  (def vsum (reduce-kv (fn [m k v] (assoc m k (vectors-sum v))) {} vn))\n  (def vnorm (reduce-kv (fn [m k v] (assoc m k (-> (vectors-sum v)\n                                                   (vector-normalize)))) {} vn))\n  (def vertex-normals (->> (collect-vertex-normals mg)\n                                          (reduce-kv (fn [m k v] (assoc m k (-> (vectors-sum v)\n                                                                                (vector-normalize)))) {})))\n  (def r 2)\n  (def updatevert (fn [i v]\n                    (map #(+ %1 %2) v (vector-scalar-mult (vertex-normals i) r))))\n  (vector-scalar-mult (vertex-normals 0) 2)\n  (updatevert 0 (first vs))\n  (def vs (:vertices mg))\n  (def mg2 (offset-mygeo mg 1))\n  (def vs2 (:vertices mg2))\n  (let [g (j/get (cube 1 2 3) :geometry)\n        mg (to-mygeo (j/get (cube 1 2 3) :geometry))\n        ;mg (offset-mygeo mg r)\n        newverts (clj->js (vec (map (fn [[x y z]] (three/Vector3. x y z)) (:vertices mg))))\n        ]\n\n    (println newverts)\n\n    )\n  )\n\n\n(defn inflate [r mesh]\n  (println \"offset r=\" r)\n  (let [g (j/get mesh :geometry)\n        mg (to-mygeo (j/get mesh :geometry))\n        ;mg (offset-mygeo mg r)\n        newverts (clj->js (vec (map (fn [[x y z]] (three/Vector3. x y z)) (:vertices (offset-mygeo mg r)))))\n        ]\n\n    (set! (.-vertices g) newverts)\n    (set! (.-verticesNeedUpdate g) true)\n    )\n    mesh)\n\n(defn mesh-size-from-bounding-box [mesh]\n  (let [g (j/get mesh :geometry)]\n    (j/call g :computeBoundingBox)\n    (let [{:keys [x y z]} (j/lookup (-> (j/get g :boundingBox)\n                        (j/call :getSize (three/Vector3.))))]\n      [x y z])))\n\n(defn offset [{:keys [r]} mesh]\n  (let [meshsize (mesh-size-from-bounding-box mesh)\n        factor  (mapv #(/ (+ % r) %) meshsize)]\n    (apply scale mesh factor)))\n\n(comment\n  (let [\n        cm (cube 1 2 2)\n        cg (j/get cm :geometry)\n        cv (mapv (fn [v]\n                   (let [{:keys [x y z]} (j/lookup v)]\n                     [x y z])\n                   ) (j/get cg :vertices))\n        _ (println \"cv=\" cv)\n        vertices (clj->js (mapv (fn [[x y z]] (three/Vector3. x y z)) cv))\n        cf (mapv (fn [f]\n                   (let [{:keys [a b c]} (j/lookup f)]\n                     [a b c])\n                   ) (j/get cg :faces))\n        _ (println \"cf=\" cf)\n        triangles (clj->js (mapv (fn [[a b c]] (three/Face3. a b c)) cf))]\n    )\n  )\n\n(defn rotate-to-XY [[x y z]]\n  [x y])\n\n\n(defn get-trianles [points faces]\n  (let [vertices (clj->js (into [] (mapcat clj->js points)))\n        triangles (reduce (fn [acc face]\n                            (if (> (count face) 3)\n                              (let [vs (mapcat (fn [vi]\n                                                 (->> vi\n                                                      (nth points)\n                                                      (rotate-to-XY)\n                                                      (clj->js))) face)]\n                                (println \"face=\" face \" vs=\" vs)\n                                (let [ts (->> (earcut (clj->js vs))\n                                              (partition 3)\n                                              (into []))]\n                                  (println \"earcut triangles=\" ts)\n                                  (concat acc) ts))\n                              (conj acc face))\n                            ) [] faces)]\n    triangles))\n\n(defn polyhedron [points faces]\n  (println \"polyhedron. points=\" points \" faces=\" faces)\n    (let [vertices (clj->js (mapv (fn [[x y z]] (three/Vector3. x y z)) points))\n          triangles (if (some #(> (count %) 3) faces)\n                      (get-trianles points faces)\n                      (clj->js (mapv (fn [[a b c]] (three/Face3. a b c)) faces)))\n          g (three/Geometry.)]\n      (j/assoc! g :vertices vertices)\n      (j/assoc! g :faces triangles)\n      ;(j/assoc! g :verticesNeedUpdate true)\n      ;(j/assoc! g :elementsNeedUpdate true)\n      (j/call g :computeFaceNormals)\n      (three/Mesh. g default-material)\n      ))"]}