{"version":3,"sources":["lark/value_viewer/core.cljs"],"mappings":"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","names":["lark.value-viewer.core/space","lark.value-viewer.core/kind","thing","cljs.core/char?","cljs.core/Keyword","cljs.core/seq?","cljs.core/list?","cljs.core/map?","cljs.core/var?","cljs.core/fn?","cljs.core/set?","cljs.core/Symbol","cljs.core/vector?","cljs.core/object?","cljs.core/Atom","lark.value-viewer.core/ArrowPointingDown","lark.value-viewer.core/ArrowPointingUp","cljs.core.update_in","cljs.core/assoc","lark.value-viewer.core/bracket-type","value","p__42786","vec__42787","cljs.core.nth","lark.value-viewer.core/wrap-value","lb","rb","cljs.core/PROTOCOL_SENTINEL","this","the-class__42481__auto__","re-view.core/class*","p__42808","map__42812","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re_view.hiccup.core.element","re-view.core/wrap-props","lark.value-viewer.core/display-deferredClass","re-view.core/factory","lark.value-viewer.core/display-deferred","p__42800","map__42801","deferred","state","p1__42791#","cljs.core.swap_BANG_","p1__42793#","map__42817","cljs.core/deref","error","s","or__4126__auto__","G__42823","lark.value-viewer.core/format-value","lark.value-viewer.core/expander-outter","lark.value-viewer.core/inline-centered","lark.value-viewer.core/*format-depth-limit*","p__42831","map__42832","lark.value-viewer.core/expanded?","depth","cljs.core/boolean?","and__4115__auto__","p__42838","map__42843","lark.value-viewer.core/toggle-depth","label","is-expanded?","class","cljs.core/not","p__42853","map__42856","lark.value-viewer.core/format-collectionClass","lark.value-viewer.core/format-collection","map__42865","vec__42867","limit-n","more?","cljs.core._EQ_","cljs.core/count","cljs.core.take","hover-class","cljs.core/even?","cljs.core/empty?","cljs.core.interpose","re_view.util.map_with_keys","cljs.core.partial","cljs.core/update","cljs.core/+","p__42904","map__42905","lark.value-viewer.core/format-mapClass","lark.value-viewer.core/format-map","map__42910","vec__42911","last-n","G__42940","cljs.core/seq","cljs.core.map_indexed","p__42947","vec__42952","n","a","b","G__42965","G__42966","G__42971","G__42972","p__42981","map__42982","lark.value-viewer.core/format-functionClass","lark.value-viewer.core/format-function","_","map__42984","expanded?","fn-name","goog.object/get","cljs.core.update","lark$value-viewer$core$IView$view$dyn","x__4428__auto__","m__4429__auto__","lark.value-viewer.core/view","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","lark.value-viewer.core/IView","var_args","G__42996","js/Error","lark.value_viewer.core.format_value","cljs.core.prn","re-view.core/is-react-element?","cljs.core/native-satisfies?","re-view.hiccup.core/IEmitHiccup","G__43007","cljs.core/Namespace","js/goog.async.Deferred","e43014","cljs.core.pr_str","e","js/console","cljs.core/type"],"sourcesContent":["(ns lark.value-viewer.core\n  (:require [goog.object :as gobj]\n            [re-view.util :as v-util]\n            [re-view.core :as v :refer [defview]]\n            [re-view.hiccup.core :as hiccup])\n  (:import [goog.async Deferred]))\n\n(def space \\u00A0)\n\n(defn kind [thing]\n  (cond\n    (char? thing) :character\n    (false? thing) :false\n    (keyword? thing) :keyword\n    (seq? thing) :sequence\n    (list? thing) :list\n    (map? thing) :map\n    (var? thing) :var\n    (fn? thing) :function\n    (nil? thing) :nil\n    (number? thing) :number\n    (set? thing) :set\n    (string? thing) :string\n    (symbol? thing) :symbol\n    (true? thing) :true\n    (vector? thing) :vector\n    (object? thing) :object\n    (instance? Atom thing) :atom\n    :else nil))\n\n(def ArrowPointingDown\n  [:svg {:fill \"currentColor\", :height \"24\", :view-box \"0 0 24 24\", :width \"24\", :xmlns \"http://www.w3.org/2000/svg\"}\n   [:path {:d \"M7 10l5 5 5-5z\"}]\n   [:path {:d \"M0 0h24v24H0z\", :fill \"none\"}]])\n\n(def ArrowPointingUp\n  (-> ArrowPointingDown\n      (update-in [1 :style] assoc :transform \"rotate(180deg)\")))\n\n(defn bracket-type [value]\n  (cond (vector? value) [\"[\" \"]\"]\n        (set? value) [\"#{\" \"}\"]\n        (map? value) [\"{\" \"}\"]\n        :else [\"(\" \")\"]))\n\n(defn wrap-value [[lb rb] value]\n  [:.inline-flex.items-stretch\n   [:.flex.items-start.nowrap lb]\n   [:div.v-top value]\n   [:.flex.items-end.nowrap rb]])\n\n(extend-protocol hiccup/IEmitHiccup\n  Keyword\n  (to-hiccup [this] (str this)))\n\n(declare format-value)\n\n(defview display-deferred\n  {:view/will-mount (fn [{:keys [deferred view/state]}]\n                      (-> deferred\n                          (.addCallback #(swap! state assoc :value %1))\n                          (.addErrback #(swap! state assoc :error %))))}\n  [{:keys [view/state]}]\n  (let [{:keys [value error] :as s} @state]\n    [:div\n     [:.gray.i \"goog.async.Deferred\"]\n     [:.pv3 (cond (nil? s) [:.progress-indeterminate]\n                  error (str error)\n                  :else (or (some-> value (format-value)) [:.gray \"Finished.\"]))]]))\n\n(def expander-outter :.dib.bg-darken.ph2.pv1.mh1.br2)\n(def inline-centered :.inline-flex.items-center)\n\n(def ^:dynamic *format-depth-limit* 3)\n\n(defn expanded? [{:keys [view/state]} depth]\n  (if (boolean? (:collection-expanded? @state))\n    (:collection-expanded? @state)\n    (and depth (< depth *format-depth-limit*))))\n\n(defn toggle-depth [{:keys [view/state] :as this} depth label]\n  (let [is-expanded? (expanded? this depth)\n        class (if is-expanded?\n                \"cursor-zoom-out hover-bg-darken \"\n                \"cursor-zoom-in gray hover-black\")]\n    [:.dib {:class    class\n            :on-click #(swap! state assoc :collection-expanded? (not is-expanded?))} label]))\n\n(defview format-collection\n  {:view/initial-state {:limit-n              20\n                        :collection-expanded? nil}}\n  [{state :view/state :as this} depth value]\n  (let [{:keys [limit-n]} @state\n        [lb rb] (bracket-type value)\n        more? (= (count (take (inc limit-n) value)) (inc limit-n))\n        hover-class (if (even? depth) \"hover-bg-darken\" \"hover-bg-lighten\")]\n    (cond (empty? value)\n          (str space lb rb space)\n          (expanded? this depth) [:.inline-flex.items-stretch\n                                  {:class hover-class}\n                                  [:.flex.items-start.nowrap (if (empty? value) (str space lb)\n                                                                                (toggle-depth this depth (str space lb space)))]\n                                  [:div.v-top (interpose \" \" (v-util/map-with-keys (partial format-value (inc depth)) (take limit-n value)))]\n                                  (when more? [:.flex.items-end [expander-outter {:class    \"pointer\"\n                                                                                  :on-click #(swap! state update :limit-n + 20)} \"\u2026\"]])\n                                  [:.flex.items-end.nowrap (str space rb space)]]\n          :else [:.inline-flex.items-center.gray.nowrap\n                 {:class hover-class} (toggle-depth this depth (str space lb \"\u2026\" rb space))])))\n\n(defview format-map\n  {:view/initial-state {:limit-n              20\n                        :collection-expanded? nil}}\n  [{state :view/state :as this} depth value]\n  (let [{:keys [limit-n]} @state\n        [lb rb] (bracket-type value)\n        more? (= (count (take (inc limit-n) value)) (inc limit-n))\n        last-n (if more? limit-n (count value))\n        hover-class (if (even? depth) \"hover-bg-darken\" \"hover-bg-lighten\")]\n    (if (or (empty? value) (expanded? this depth))\n      [:table.relative.inline-flex.v-mid\n       {:class hover-class}\n       [:tbody\n        (or (some->> (seq (take limit-n value))\n                     (map-indexed (fn [n [a b]]\n                                    [:tr\n                                     {:key n}\n                                     [:td.v-top.nowrap\n                                      (when (= n 0) (toggle-depth this depth (str space lb space)))]\n                                     [:td.v-top\n                                      (format-value (inc depth) a) space]\n                                     [:td.v-top\n                                      (format-value (inc depth) b)]\n                                     [:td.v-top.nowrap (when (= (inc n) last-n) (str space rb space))]])))\n            [:tr [:td.hover-bg-darken.nowrap (str space lb rb space)]])\n        (when more? [:tr [:td {:col-span 2}\n                          [expander-outter {:on-click #(swap! state update :limit-n + 20)} [inline-centered \"\u2026\"]]]])]]\n      [:.inline-flex.items-center.gray\n       {:class hover-class} (toggle-depth this depth (str space lb \"\u2026\" rb space))])))\n\n(defview format-function\n  {:view/initial-state (fn [_ value] {:expanded? false})}\n  [{:keys [view/state]} value]\n  (let [{:keys [expanded?]} @state\n        fn-name (gobj/get value \"name\" \"\u0192\")]\n    [:span\n     [expander-outter {:on-click #(swap! state update :expanded? not)}\n      [inline-centered  [:span.o-50.mr1 fn-name]\n       (-> (if expanded? ArrowPointingUp\n                         ArrowPointingDown)\n           (update 1 assoc :width 20 :height 20 :class \"mln1 mrn1 o-50\"))]\n      (when expanded?\n        (.toString value))]]))\n\n(defprotocol IView\n  (view [this] \"Returns a view for `this`\"))\n\n(defn format-value\n  ([value] (format-value 1 value))\n  ([depth value]\n\n   (when (> depth 200)\n     (prn value)\n     (throw (js/Error. \"Format depth too deep!\")))\n   (cond (v/is-react-element? value) value\n         (satisfies? IView value) (format-value depth (view value))\n         (satisfies? hiccup/IEmitHiccup value) value\n         :else\n         (case (kind value)\n           (:vector\n             :sequence\n             :set) (format-collection depth value)\n\n           :map (format-map depth value)\n\n           :var [:div\n                 [:.o-50.mb2 (str value)]\n                 (format-value depth @value)]\n\n           :nil \"nil\"\n\n           :function (format-function value)\n\n           :atom (wrap-value [[:span.gray.mr1 \"#Atom\"] nil]\n                             (format-value depth (gobj/get value \"state\")))\n\n           (cond\n             (v/is-react-element? value) value\n             (instance? cljs.core/Namespace value) (str value)\n             (instance? Deferred value) (display-deferred {:deferred value})\n             :else (try (pr-str value)\n                        (catch js/Error e\n                          (do \"error printing result\"\n                              (.log js/console e)\n                              (prn (type value))\n                              (prn :kind (kind value))\n                              (.log js/console value)\n                              (prn value)))))))))\n"]}