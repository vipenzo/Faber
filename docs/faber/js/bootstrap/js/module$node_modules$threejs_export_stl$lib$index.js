shadow$provide.module$node_modules$threejs_export_stl$lib$index=function(global,require,module,exports){function writeVectorAscii(dataView,_ref,isNormal){dataView.data+=(isNormal?"facet normal":"vertex")+" "+_ref.x+" "+_ref.y+" "+_ref.z+"\n"}function writeVectorBinary(dataView,_ref2){var y=_ref2.y,z=_ref2.z;writeFloat(dataView,_ref2.x);writeFloat(dataView,y);writeFloat(dataView,z)}function writeFloat(dataView,float){dataView.data.setFloat32(dataView.offset,float,LITTLE_ENDIAN);dataView.offset+=4}
function fromGeometry(geometry,matrix){var binary=2<arguments.length&&void 0!==arguments[2]?arguments[2]:!0;if(geometry.isBufferGeometry)geometry=(new _three.Geometry).fromBufferGeometry(geometry);else if(geometry.isGeometry)geometry=geometry.clone();else throw Error("Geometry is not an instance of BufferGeometry or Geometry");matrix&&matrix.isMatrix4&&geometry.applyMatrix(matrix);geometry.computeFaceNormals();var faces=geometry.faces,vertices=geometry.vertices;if(binary){var dataView=new ArrayBuffer(84+
50*faces.length);dataView={data:new DataView(dataView),offset:84};dataView.data.setUint32(80,faces.length,LITTLE_ENDIAN)}else dataView={data:"solid\n"};for(var writeVector=binary?writeVectorBinary:writeVectorAscii,i=0;i<faces.length;i++)writeVector(dataView,faces[i].normal,!0),binary||(dataView.data+="outer loop\n"),writeVector(dataView,vertices[faces[i].a],!1),writeVector(dataView,vertices[faces[i].b],!1),writeVector(dataView,vertices[faces[i].c],!1),binary?dataView.offset+=2:dataView.data+="endloop\nendfacet\n";
binary||(dataView.data+="endsolid");return binary?dataView.data.buffer:dataView.data}Object.defineProperty(exports,"__esModule",{value:!0});exports.mimeType=void 0;exports.fromGeometry=fromGeometry;exports.fromMesh=function(mesh,binary){mesh.updateMatrix();return fromGeometry(mesh.geometry,mesh.matrix,binary)};var _three=require("module$node_modules$three$build$three");exports.mimeType="application/vnd.ms-pki.stl";var LITTLE_ENDIAN=!0}
goog.provide("module$node_modules$threejs_export_stl$lib$index");
goog.global. module$node_modules$threejs_export_stl$lib$index=shadow.js.require("module$node_modules$threejs_export_stl$lib$index", {});

//# sourceMappingURL=module$node_modules$threejs_export_stl$lib$index.js.map
