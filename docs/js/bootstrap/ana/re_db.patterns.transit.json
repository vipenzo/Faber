["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_db/patterns.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:shadow/protocol-prefixes",["~#set",["re-db$patterns$IPatternListen$"]],"~:use-macros",null,"~:excludes",["^@",[]],"~:name","~$re-db.patterns","~:imports",null,"~:requires",["^ ","^<","^<","~$goog","^G"],"~:seen",["^@",[]],"~:shadow/js-access-global",["^@",["Error"]],"~:uses",null,"~:defs",["^ ","~$remove-value",["^ ","~:protocol-inline",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",34,"^5",7,"^6",34,"^7",19,"~:arglists",["~#list",["~$quote",["^O",[["~$value-map","~$pattern-key","~$pattern","~$value"]]]]],"~:doc","Removes value associated with pattern in value-map."],"^C","~$re-db.patterns/remove-value","^3","re_db/patterns.cljs","^7",19,"~:method-params",["^O",[["^Q","^R","^S","^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^5",1,"~:variadic?",false,"^4",34,"~:ret-tag",["^@",["~$clj","~$any"]],"^6",34,"~:max-fixed-arity",4,"~:fn-var",true,"^N",["^O",["^P",["^O",[["^Q","^R","^S","^T"]]]]],"^U","Removes value associated with pattern in value-map."],"~$datom-patterns",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",114,"^5",7,"^6",114,"^7",21,"^N",["^O",["^P",["^O",[["~$datoms","~$many?"],["^15","^16","~$pattern-keys"]]]]],"^U","Returns a map of patterns matched by a list of datoms.\n  Limits patterns to those listed in pattern-keys.\n  many? should return true for attributes which have schema value :db.cardinality/many?.","~:top-fn",["^ ","^Z",false,"~:fixed-arity",3,"^12",3,"^W",[["^15","^16"],["^15","^16","^17"]],"^N",["^O",[["^15","^16"],["^15","^16","^17"]]],"^Y",["^O",[null,null]]]],"^C","~$re-db.patterns/datom-patterns","^3","re_db/patterns.cljs","^7",21,"^18",["^ ","^Z",false,"^19",3,"^12",3,"^W",[["^15","^16"],["^15","^16","^17"]],"^N",["^O",[["^15","^16"],["^15","^16","^17"]]],"^Y",["^O",[null,null]]],"^W",[["^15","^16"],["^15","^16","^17"]],"^X",null,"^19",3,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"~:methods",[["^ ","^19",2,"^Z",false,"~:tag","^11"],["^ ","^19",3,"^Z",false,"^1<",["^@",[null,"^11"]]]],"^4",114,"^6",114,"^12",3,"^13",true,"^N",["^O",[["^15","^16"],["^15","^16","^17"]]],"^U","Returns a map of patterns matched by a list of datoms.\n  Limits patterns to those listed in pattern-keys.\n  many? should return true for attributes which have schema value :db.cardinality/many?."],"~$unlisten",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",97,"^5",7,"^6",97,"^7",15,"^N",["^O",["^P",["^O",[["~$db","~$patterns","^T"]]]]],"^U","Removes pattern listener."],"^C","~$re-db.patterns/unlisten","^3","re_db/patterns.cljs","^7",15,"^W",["^O",[["^1>","^1?","^T"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",97,"^[",["^@",[null,"^11"]],"^6",97,"^12",3,"^13",true,"^N",["^O",["^P",["^O",[["^1>","^1?","^T"]]]]],"^U","Removes pattern listener."],"~$reaction",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",158,"^5",4,"^6",158,"^7",12,"~:protocol","~$re-db.patterns/IPatternListen","^U","the action to take when a listened pattern matches","^N",["^O",["^P",["^O",[["~$this"]]]]]],"^1B","^1C","^C","~$re-db.patterns/reaction","^3","re_db/patterns.cljs","^7",12,"^W",["^O",[["^1D"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",157,"^[","^11","^6",158,"^12",1,"^13",true,"^N",["^O",["^P",["^O",[["^1D"]]]]],"^U","the action to take when a listened pattern matches"],"~$listen-lookup-ref",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",47,"^5",7,"^6",47,"^7",24,"^N",["^O",["^P",["^O",[[["~$lookup-attr","~$lookup-val","~:as","~$lookup-ref"],"~$kind","^S","~$listeners","^1>","~$f"]]]]],"^U","Adds lookup ref listener, which uses an intermediate listener to update when\n  the target of a lookup ref changes."],"^C","~$re-db.patterns/listen-lookup-ref","^3","re_db/patterns.cljs","^7",24,"^W",["^O",[["~$p__26438","^1K","^S","^1L","^1>","~$f"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",47,"^[",["^@",["^10","^11"]],"^6",47,"^12",6,"^13",true,"^N",["^O",["^P",["^O",[[["^1G","^1H","^1I","^1J"],"^1K","^S","^1L","^1>","~$f"]]]]],"^U","Adds lookup ref listener, which uses an intermediate listener to update when\n  the target of a lookup ref changes."],"~$non-empty-keys",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",107,"^5",7,"^6",107,"^7",21,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^U","Returns list of keys for which map contains a non-empty value."],"^C","~$re-db.patterns/non-empty-keys","^3","re_db/patterns.cljs","^7",21,"^W",["^O",[["~$m"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",107,"^[",["^@",[null,"^11"]],"^6",107,"^12",1,"^13",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^U","Returns list of keys for which map contains a non-empty value."],"~$IPatternListen",["^ ","^2",["^ ","~:protocol-symbol",true,"^3","re_db/patterns.cljs","^7",28,"^5",14,"^4",157,"~:protocol-info",["^ ","^1;",["^ ","^1A",[["^1D"]],"^1?",[["^1D"]]]],"^6",157,"~:sigs",["^ ","~:reaction",["^ ","^C","^1A","^N",["^O",[["^1D"]]],"^U","the action to take when a listened pattern matches"],"~:patterns",["^ ","^C","^1?","^N",["^O",[["^1D"]]],"^U","Return the patterns currently listened to"]],"~:jsdoc",["^O",["@interface"]]],"^1R",true,"^C","^1C","^3","re_db/patterns.cljs","^7",28,"^5",1,"^4",157,"^1S",["^ ","^1;",["^ ","^1A",[["^1D"]],"^1?",[["^1D"]]]],"~:info",null,"^6",157,"^1<","^11","^1T",["^ ","^1U",["^ ","^C","^1A","^N",["^O",[["^1D"]]],"^U","the action to take when a listened pattern matches"],"^1V",["^ ","^C","^1?","^N",["^O",[["^1D"]]],"^U","Return the patterns currently listened to"]],"~:impls",["^@",[]],"^1W",["^O",["@interface"]]],"~$empty-pattern-map",["^ ","^2",["^ ","^3","re_db/patterns.cljs","^4",8,"^5",16,"^6",8,"^7",33,"~:private",true],"^1[",true,"^C","~$re-db.patterns/empty-pattern-map","^3","re_db/patterns.cljs","^7",33,"^5",1,"^4",8,"^6",8,"^1<","~$cljs.core/IMap","^U","Map for building sets of patterns."],"~$*pattern-log*",["^ ","^2",["^ ","^3","re_db/patterns.cljs","^4",3,"^5",16,"^6",3,"^7",29,"~:dynamic",true],"^C","~$re-db.patterns/*pattern-log*","^3","re_db/patterns.cljs","^7",29,"^5",1,"^23",true,"^4",3,"^6",3,"^1<","^11","^U","Dynamic var used in conjunction with re-db.patterns/capture-patterns macro to\n  identify patterns read by a block of code."],"~$supported-pattern-keys",["^ ","^C","~$re-db.patterns/supported-pattern-keys","^3","re_db/patterns.cljs","^4",15,"^5",1,"^6",15,"^7",28,"^2",["^ ","^3","re_db/patterns.cljs","^4",15,"^5",6,"^6",15,"^7",28],"^1<",["^@",["^10","^11","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]]],"~$conj-set",["^ ","^C","~$re-db.patterns/conj-set","^3","re_db/patterns.cljs","^4",17,"^5",1,"^6",17,"^7",14,"^2",["^ ","^3","re_db/patterns.cljs","^4",17,"^5",6,"^6",17,"^7",14],"^1<","~$function"],"^1?",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",159,"^5",4,"^6",159,"^7",12,"^1B","^1C","^U","Return the patterns currently listened to","^N",["^O",["^P",["^O",[["^1D"]]]]]],"^1B","^1C","^C","~$re-db.patterns/patterns","^3","re_db/patterns.cljs","^7",12,"^W",["^O",[["^1D"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",157,"^[","^11","^6",159,"^12",1,"^13",true,"^N",["^O",["^P",["^O",[["^1D"]]]]],"^U","Return the patterns currently listened to"],"~$lookup-ref?",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",77,"^5",7,"^6",77,"^7",18,"^N",["^O",["^P",["^O",[["^1K","^S"]]]]],"^U","Returns true if pattern has lookup ref in id position."],"^C","~$re-db.patterns/lookup-ref?","^3","re_db/patterns.cljs","^7",18,"^W",["^O",[["^1K","^S"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",77,"^[",["^@",[null,"~$boolean","^11","^29"]],"^6",77,"^12",2,"^13",true,"^N",["^O",["^P",["^O",[["^1K","^S"]]]]],"^U","Returns true if pattern has lookup ref in id position."],"~$into-set",["^ ","^C","~$re-db.patterns/into-set","^3","re_db/patterns.cljs","^4",18,"^5",1,"^6",18,"^7",14,"^2",["^ ","^3","re_db/patterns.cljs","^4",18,"^5",6,"^6",18,"^7",14],"^1<","^2<"],"~$pattern-values",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",134,"^5",7,"^6",134,"^7",21,"^N",["^O",["^P",["^O",[["~$pattern-map","^Q"]]]]],"^U","Returns values associated with patterns.\n\n  value-map is of form {<pattern-key> {<pattern> #{...set of values...}}}.\n  pattern-map is of form {<pattern-key> #{...set of patterns...}}"],"^C","~$re-db.patterns/pattern-values","^3","re_db/patterns.cljs","^7",21,"^W",["^O",[["^2D","^Q"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",134,"^[",["^@",[null,"^11"]],"^6",134,"^12",2,"^13",true,"^N",["^O",["^P",["^O",[["^2D","^Q"]]]]],"^U","Returns values associated with patterns.\n\n  value-map is of form {<pattern-key> {<pattern> #{...set of values...}}}.\n  pattern-map is of form {<pattern-key> #{...set of patterns...}}"],"~$unlisten-lookup-ref",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",68,"^5",7,"^6",68,"^7",26,"^N",["^O",["^P",["^O",[["^1J","^1K","^S","^1L","^1>","~$f"]]]]],"^U","Removes lookup ref listener."],"^C","~$re-db.patterns/unlisten-lookup-ref","^3","re_db/patterns.cljs","^7",26,"^W",["^O",[["^1J","^1K","^S","^1L","^1>","~$f"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",68,"^[",["^@",["^10","^29"]],"^6",68,"^12",6,"^13",true,"^N",["^O",["^P",["^O",[["^1J","^1K","^S","^1L","^1>","~$f"]]]]],"^U","Removes lookup ref listener."],"~$add-value",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",29,"^5",7,"^6",29,"^7",16,"^N",["^O",["^P",["^O",[["^Q","^R","^S","^T"]]]]],"^U","Associates value with pattern in value-map."],"^C","~$re-db.patterns/add-value","^3","re_db/patterns.cljs","^7",16,"^W",["^O",[["^Q","^R","^S","^T"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",29,"^[",["^@",["^10","^11"]],"^6",29,"^12",4,"^13",true,"^N",["^O",["^P",["^O",[["^Q","^R","^S","^T"]]]]],"^U","Associates value with pattern in value-map."],"~$datom-values",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",144,"^5",7,"^6",144,"^7",19,"^N",["^O",["^P",["^O",[["^Q","^15","^16"]]]]],"^U","Returns the set of values in value-map associated with patterns matched by datoms."],"^C","~$re-db.patterns/datom-values","^3","re_db/patterns.cljs","^7",19,"^W",["^O",[["^Q","^15","^16"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",144,"^[",["^@",[null,"^11"]],"^6",144,"^12",3,"^13",true,"^N",["^O",["^P",["^O",[["^Q","^15","^16"]]]]],"^U","Returns the set of values in value-map associated with patterns matched by datoms."],"~$resolve-id",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",41,"^5",7,"^6",41,"^7",17,"^N",["^O",["^P",["^O",[["~$db-snap","~$attr","~$val"]]]]],"^U","Copied from re-db.core."],"^C","~$re-db.patterns/resolve-id","^3","re_db/patterns.cljs","^7",17,"^W",["^O",[["^2M","^2N","^2O"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",41,"^[",["^@",["^11","^29"]],"^6",41,"^12",3,"^13",true,"^N",["^O",["^P",["^O",[["^2M","^2N","^2O"]]]]],"^U","Copied from re-db.core."],"~$invalidate!",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",151,"^5",7,"^6",151,"^7",18,"^N",["^O",["^P",["^O",[["^1>","^R","^S"]]]]],"^U","Invalidate a pattern, ie. invoke callbacks that match pattern"],"^C","~$re-db.patterns/invalidate!","^3","re_db/patterns.cljs","^7",18,"^W",["^O",[["^1>","^R","^S"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",151,"^[","^29","^6",151,"^12",3,"^13",true,"^N",["^O",["^P",["^O",[["^1>","^R","^S"]]]]],"^U","Invalidate a pattern, ie. invoke callbacks that match pattern"],"~$listen",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",87,"^5",7,"^6",87,"^7",13,"^N",["^O",["^P",["^O",[["^1>","^1?","^T"]]]]],"^U","Adds pattern listener."],"^C","~$re-db.patterns/listen","^3","re_db/patterns.cljs","^7",13,"^W",["^O",[["^1>","^1?","^T"]]],"^X",null,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^4",87,"^[",["^@",[null,"^11"]],"^6",87,"^12",3,"^13",true,"^N",["^O",["^P",["^O",[["^1>","^1?","^T"]]]]],"^U","Adds pattern listener."],"~$log-read",["^ ","^M",null,"^2",["^ ","^3","re_db/patterns.cljs","^4",20,"^5",7,"^6",20,"^7",15,"^N",["^O",["^P",["^O",[["^1K","^S"],["^1K","^S","~$multiple?"]]]]],"^U","Record pattern to *pattern-log*.","^18",["^ ","^Z",false,"^19",3,"^12",3,"^W",[["^1K","^S"],["^1K","^S","^2V"]],"^N",["^O",[["^1K","^S"],["^1K","^S","^2V"]]],"^Y",["^O",[null,null]]]],"^C","~$re-db.patterns/log-read","^3","re_db/patterns.cljs","^7",15,"^18",["^ ","^Z",false,"^19",3,"^12",3,"^W",[["^1K","^S"],["^1K","^S","^2V"]],"^N",["^O",[["^1K","^S"],["^1K","^S","^2V"]]],"^Y",["^O",[null,null]]],"^W",[["^1K","^S"],["^1K","^S","^2V"]],"^X",null,"^19",3,"^Y",["^O",[null,null]],"^5",1,"^Z",false,"^1;",[["^ ","^19",2,"^Z",false,"^1<",["^@",[null,"^29"]]],["^ ","^19",3,"^Z",false,"^1<",["^@",[null,"^29"]]]],"^4",20,"^6",20,"^12",3,"^13",true,"^N",["^O",[["^1K","^S"],["^1K","^S","^2V"]]],"^U","Record pattern to *pattern-log*."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^H",["^@",["~:_a_","~:lookup-cb","~:e__","~:db-after","~:_av","~:ave","~:lookup-refs","~:ea_","~:lookup-target","~:listeners"]],"~:order",["^30","^2Z","^32","^35","^33","^31","^34","^2[","^36","^37"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^G","^<"]]