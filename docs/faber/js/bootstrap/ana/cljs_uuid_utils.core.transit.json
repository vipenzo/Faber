["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from).","~:file","cljs_uuid_utils/core.cljs","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs-uuid-utils.core","~:imports",null,"~:requires",["^ ","~$clojure.string","^G","~$string","^G","^=","^=","~$goog","^I"],"~:seen",["^B",["~:require"]],"~:shadow/js-access-global",["^B",["Date"]],"~:uses",null,"~:defs",["^ ","~$uuid-string",["^ ","~:protocol-inline",null,"^2",["^ ","^4","cljs_uuid_utils/core.cljs","^5",20,"^6",7,"^7",20,"^8",18,"~:arglists",["~#list",["~$quote",["^R",[["~$a-uuid"]]]]],"^3","(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\""],"^C","~$cljs-uuid-utils.core/uuid-string","^4","cljs_uuid_utils/core.cljs","^8",18,"~:method-params",["^R",[["^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^6",1,"~:variadic?",false,"^5",20,"~:ret-tag","^H","^7",20,"~:max-fixed-arity",1,"~:fn-var",true,"^Q",["^R",["^S",["^R",[["^T"]]]]],"^3","(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\""],"~$make-random-squuid",["^ ","^P",null,"^2",["^ ","^4","cljs_uuid_utils/core.cljs","^5",36,"^6",7,"^7",36,"^8",25,"^Q",["^R",["^S",["^R",[[]]]]],"^3","(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID"],"^C","~$cljs-uuid-utils.core/make-random-squuid","^4","cljs_uuid_utils/core.cljs","^8",25,"^V",["^R",[[]]],"^W",null,"^X",["^R",[null,null]],"^6",1,"^Y",false,"^5",36,"^7",36,"^[",0,"^10",true,"^Q",["^R",["^S",["^R",[[]]]]],"^3","(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID"],"~$make-random-uuid",["^ ","^P",null,"^2",["^ ","^4","cljs_uuid_utils/core.cljs","^5",60,"^6",7,"^7",60,"^8",23,"^Q",["^R",["^S",["^R",[[]]]]],"^3","(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID"],"^C","~$cljs-uuid-utils.core/make-random-uuid","^4","cljs_uuid_utils/core.cljs","^8",23,"^V",["^R",[[]]],"^W",null,"^X",["^R",[null,null]],"^6",1,"^Y",false,"^5",60,"^7",60,"^[",0,"^10",true,"^Q",["^R",["^S",["^R",[[]]]]],"^3","(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID"],"~$uuid-regex",["^ ","^2",["^ ","^4","cljs_uuid_utils/core.cljs","^5",81,"^6",16,"^7",81,"^8",26,"~:private",true],"^16",true,"^C","~$cljs-uuid-utils.core/uuid-regex","^4","cljs_uuid_utils/core.cljs","^8",26,"^6",1,"^5",81,"^7",81,"~:tag",["^B",[null,"~$js/RegExp"]]],"~$valid-uuid?",["^ ","^P",null,"^2",["^ ","^4","cljs_uuid_utils/core.cljs","^5",86,"^6",7,"^7",86,"^8",18,"^Q",["^R",["^S",["^R",[["~$maybe-uuid"]]]]],"^3","(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil"],"^C","~$cljs-uuid-utils.core/valid-uuid?","^4","cljs_uuid_utils/core.cljs","^8",18,"^V",["^R",[["^1;"]]],"^W",null,"^X",["^R",[null,null]],"^6",1,"^Y",false,"^5",86,"^Z",["^B",["~$clj","~$cljs.core/IVector","~$any","~$cljs.core/MetaFn","~$clj-nil"]],"^7",86,"^[",1,"^10",true,"^Q",["^R",["^S",["^R",[["^1;"]]]]],"^3","(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil"],"~$make-uuid-from",["^ ","^P",null,"^2",["^ ","^4","cljs_uuid_utils/core.cljs","^5",112,"^6",7,"^7",112,"^8",21,"^Q",["^R",["^S",["^R",[["^1;"]]]]],"^3","(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil"],"^C","~$cljs-uuid-utils.core/make-uuid-from","^4","cljs_uuid_utils/core.cljs","^8",21,"^V",["^R",[["^1;"]]],"^W",null,"^X",["^R",[null,null]],"^6",1,"^Y",false,"^5",112,"^Z",["^B",[null,"~$cljs.core/UUID","^1A"]],"^7",112,"^[",1,"^10",true,"^Q",["^R",["^S",["^R",[["^1;"]]]]],"^3","(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil"]],"~:require-macros",["^ ","^=","^="],"~:cljs.analyzer/constants",["^ ","^J",["^B",["~:true"]],"~:order",["^1G"]],"~:flags",["^ ","^K",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^I","^=","^G"]]