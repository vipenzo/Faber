{"version":3,"sources":["re_view/core.cljs"],"mappings":"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","names":["re-view.core/schedule!","re-view.render-loop/schedule!","re-view.core/force-update","re-view.render-loop/force-update","re-view.core/force-update!","re-view.render-loop/force-update!","re-view.core/flush!","re-view.render-loop/flush!","re-view.core/*trigger-state-render*","js/goog.define","re-view.core/INSTRUMENT!","re-view.core/dom-node","component","js/module$node_modules$react_dom$index.findDOMNode","re-view.core/mounted?","goog.object/get","re-view.core/wrap-props","props","tag","G__27644","cljs.core/contains?","fexpr__27649","cljs.core.update","re-view.render-loop/apply-sync!","re-view.core/reactive-render","f","this","map__27650","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re$view","patterns","value","*pattern-log*-orig-val__27651","re-db.patterns/*pattern-log*","*pattern-log*-temp-val__27652","map__27654","*db-log*-orig-val__27656","re-db.core/*db-log*","*prevent-notify*-orig-val__27657","re-db.core/*prevent-notify*","*db-log*-temp-val__27658","cljs.core.atom","*prevent-notify*-temp-val__27659","value__26572__auto__","cljs.core/deref","value__27482__auto__","tx-report__27483__auto__","patterns__27484__auto__","re-db.core/notify-listeners","prev-patterns","cljs.core._EQ_","temp__5735__auto__","un-sub","goog.object/set","cljs.core/empty?","re-db.d/listen","cljs.core/-vreset!","cljs.core/-deref","cljs.core.assoc","re-view.core/kmap","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-view.core/compseq","seq27670","self__4724__auto__","cljs.core/seq","fns","args","seq__27673","chunk__27674","count__27675","i__27676","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","re-view.core/collect","methods","cljs.core/merge-with","a","b","cljs.core/vector?","cljs.core.conj","cljs.core/reduce-kv","m","method-k","G__27687","cljs.core/keyword-identical?","cljs.core/last","re-view.core/finish-lifecycle","map__27691","prev-props","state","children","cljs.core/vreset!","G__27695","re-view.core/wrap-methods","cljs.core/fn?","G__27706","cljs.core/Keyword","*trigger-state-render*-orig-val__27707","*trigger-state-render*-temp-val__27708","*trigger-state-render*-orig-val__27709","*trigger-state-render*-temp-val__27710","re-view.core/init-state!","cljs.core/add-watch","_","old-state","new-state","cljs.core.not_EQ_","will-receive","and__4115__auto__","temp__5733__auto__","should-update","re-view.core/ensure-state!","js/module$node_modules$react$index.Component","k","G__27716","fexpr__27715","cljs.core/namespace","cljs.core.get_in","not-found","G__27719","fexpr__27718","re-view.core/lifecycle-methods","map__27729","prev-children","next-props","p__27732","map__27733","prev-state","or__4126__auto__","p__27739","map__27740","G__27747","cljs.core/remove-watch","obj","method","G__27723","re-view.core/swap-silently!","seq27748","*trigger-state-render*-orig-val__27753","*trigger-state-render*-temp-val__27754","cljs.core/swap!","re-view.core/init-component","$props","cljs.core/volatile!","cljs.core.dissoc","instance-keys","seq__27755","chunk__27756","count__27757","i__27758","goog.object/getKeys","initial-state","G__27777","watchable-state","G__27781","re-view.core/factory","constructor","map__27785","map__27786","map__27787","class-keys","re$view$base","defaults","prop-spec","children-spec","re-view.view-spec/normalize-props-map","re-view.view-spec/resolve-spec-vector","class-react-key","display-name","G__27792","vec__27793","cljs.core.nth","cljs.core/map?","cljs.core/cons","G__27796","cljs.core.merge","key","js/Error","re-view.view-spec/validate-props","re-view.view-spec/validate-children","js/module$node_modules$react$index.createElement","p__27807","map__27808","re-view.core/class*","lifecycle-keys","react-keys","re-view-base","prototype","goog.object/extend","seq__27817","chunk__27819","count__27820","i__27821","vec__27838","vec__27841","v","re-view.util/camelCase","G__27847","re-view.core/view*","re-view.core/prototype","class","re-view.core/render-to-dom","element","js/module$node_modules$react_dom$index.render","G__27858","js/document","G__27863","re-view.core/partial","base","vec__27885","seq__27886","first__27887","user-props","G__27888","G__27884","base-overrides","re_view.core.partial","cljs.core.merge_with","cljs.core/merge","re-view.core/pass-props","cljs.core/dissoc","re-view.core/is-react-element?","re-view.util/is-react-element?"],"sourcesContent":["(ns re-view.core\n  (:refer-clojure :exclude [partial])\n  (:require-macros [re-view.core])\n  (:require [re-db.d :as d]\n            [re-db.patterns :as patterns :include-macros true]\n            [re-view.render-loop :as render-loop]\n            [re-view.hiccup.core :as hiccup]\n            [goog.object :as gobj]\n            [re-view.util :as v-util]\n            [re-view.view-spec :as vspec]\n            [\"react-dom\" :as react-dom]\n            [\"react\" :as react]))\n\n(def schedule! render-loop/schedule!)\n(def force-update render-loop/force-update)\n(def force-update! render-loop/force-update!)\n(def flush! render-loop/flush!)\n\n(def ^:dynamic *trigger-state-render* true)\n\n(goog-define INSTRUMENT! false)\n\n(defn dom-node\n  \"Return DOM node for component\"\n  [component]\n  (react-dom/findDOMNode component))\n\n(defn mounted?\n  \"Returns true if component is still mounted to the DOM.\n  This is necessary to avoid updating unmounted components.\"\n  [component]\n  (not (true? (gobj/get component \"unmounted\"))))\n\n(defn- wrap-props\n  \"Wraps :on-change handlers of text inputs to apply changes synchronously.\"\n  [props tag]\n  (cond-> props\n          (and (contains? props :on-change)\n               (#{\"input\" \"textarea\"} tag)) (update :on-change render-loop/apply-sync!)))\n\n(defn reactive-render\n  \"Wrap a render function to force-update the component when re-db patterns accessed during evaluation are invalidated.\"\n  [f]\n  (fn []\n    (this-as this\n      (let [re$view       (gobj/get this \"re$view\")\n            {:keys [patterns value]} (patterns/capture-patterns (apply f this (:view/children @re$view)))\n\n            prev-patterns (:view/re-db.patterns @re$view)]\n        (when-not (= prev-patterns patterns)\n          (when-let [un-sub (gobj/get this \"reactiveUnsubscribe\")] (un-sub))\n\n          (gobj/set this \"reactiveUnsubscribe\" (when-not (empty? patterns)\n                                                 (d/listen patterns #(force-update this))))\n          (vswap! re$view assoc :view/re-db.patterns patterns))\n        value))))\n\n(def ^:private kmap\n  \"Mapping of methods-map keys to React lifecycle keys.\"\n  {:constructor             \"constructor\"\n   :view/initial-state      \"$initialState\"\n   :view/state              \"$state\"\n   :view/did-catch          \"componentDidCatch\"\n   :view/will-mount         \"componentWillMount\"\n   :view/did-mount          \"componentDidMount\"\n   :view/will-receive-props \"componentWillReceiveProps\"\n   :view/will-receive-state \"componentWillReceiveState\"\n   :view/should-update      \"shouldComponentUpdate\"\n   :view/will-update        \"componentWillUpdate\"\n   :view/did-update         \"componentDidUpdate\"\n   :view/will-unmount       \"componentWillUnmount\"\n   :view/render             \"render\"})\n\n(defn compseq\n  \"Compose fns to execute sequentially over the same arguments\"\n  [& fns]\n  (fn [& args]\n    (doseq [f fns]\n      (apply f args))))\n\n(defn- collect\n  \"Merge a list of method maps. Multiple lifecycle methods execute sequentially. Only the last-defined :should-update function is applied.\"\n  [methods]\n  (let [methods (apply merge-with (fn [a b] (if (vector? a) (conj a b) [a b])) methods)]\n    (reduce-kv (fn [m method-k fns]\n                 (cond-> m\n                         (vector? fns) (assoc method-k (if (keyword-identical? method-k :view/should-update)\n                                                         (last fns)\n                                                         (apply compseq fns))))) methods methods)))\n\n(defn finish-lifecycle [this]\n  \"after update, update prev-props and prev-state\"\n  (let [re$view (aget this \"re$view\")\n        {prev-props :view/props\n         state      :view/state\n         children   :view/children} @re$view]\n    (vreset! re$view\n             (cond-> (assoc @re$view\n                       :view/prev-props prev-props\n                       :view/prev-children children)\n                     state (assoc :view/prev-state @state)))))\n\n(defn- wrap-methods\n  \"Wrap a component's methods, binding arguments and specifying lifecycle update behaviour.\"\n  [method-k f]\n  (if-not (fn? f)\n    f\n    (case method-k\n      (:view/initial-state\n        :view/state\n        :key\n        :constructor) f\n      :view/render (reactive-render f)\n      :view/will-receive-props\n      (fn [props]\n        (binding [*trigger-state-render* false]\n          (this-as this\n            (f this props))))\n      (:view/will-mount\n        :view/will-unmount\n        :view/will-receive-state\n        :view/will-update)\n      (fn []\n        (binding [*trigger-state-render* false]\n          (this-as this\n            (apply f this (:view/children @(gobj/get this \"re$view\"))))))\n      (:view/did-mount\n        :view/did-update)\n      (fn []\n        (this-as this\n          (apply f this (:view/children @(gobj/get this \"re$view\")))))\n      (fn [& args]\n        (this-as this\n          (apply f this args))))))\n\n(defn- init-state!\n  \"Bind a component to update whenever `state` changes.\n  `state` can be any type which implements IWatchable and IDeref.\"\n  [component state]\n  (vswap! (gobj/get component \"re$view\") assoc :view/state state :view/prev-state @state)\n  (add-watch state component (fn [_ _ old-state new-state]\n                               (when (not= old-state new-state)\n                                 (vswap! (gobj/get component \"re$view\") assoc :view/prev-state old-state)\n                                 (when-let [^js/Function will-receive (gobj/get component \"componentWillReceiveState\")]\n                                   (.call will-receive component))\n                                 (when (and *trigger-state-render* (if-let [^js/Function should-update (gobj/get component \"shouldComponentUpdate\")]\n                                                                     (.call should-update component)\n                                                                     true))\n                                   (force-update component)))))\n  state)\n\n(defn- ensure-state!\n  \"Lazily create and bind a state atom for `component`\"\n  [component]\n  (when-not (contains? @(aget component \"re$view\") :view/state)\n    (init-state! component (atom nil))))\n\n(extend-protocol ILookup\n  ;; for convenience, we allow reading keys from a component's props by looking them up\n  ;; directly on the component. this enables destructuring in lifecycle/render method arglist.\n  react/Component\n  (-lookup\n    ([this k]\n     (if (#{\"view\" \"spec\"} (namespace k))\n       (do (when (keyword-identical? k :view/state) (ensure-state! this))\n           (get @(gobj/get this \"re$view\") k))\n       (get-in @(gobj/get this \"re$view\") [:view/props k])))\n    ([this k not-found]\n     (if (#{\"view\" \"spec\"} (namespace k))\n       (do (when (keyword-identical? k :view/state) (ensure-state! this))\n           (get @(gobj/get this \"re$view\") k))\n       (get-in @(gobj/get this \"re$view\") [:view/props k] not-found)))))\n\n(defn- lifecycle-methods\n  \"Augment lifecycle methods with default behaviour.\"\n  [methods]\n  (->> (collect [{:view/will-receive-props (fn [this props]\n                                             ;; when a component receives new props, update internal state.\n                                             (let [{prev-props :view/props prev-children :view/children :as this} this]\n                                               (let [next-props (aget props \"props\")]\n                                                 (vswap! (gobj/get this \"re$view\")\n                                                         assoc\n                                                         :view/props next-props\n                                                         :view/prev-props prev-props\n                                                         :view/children (aget props \"children\")\n                                                         :view/prev-children prev-children))))\n                  :view/should-update      (fn [{:keys [view/props\n                                                        view/prev-props\n                                                        view/children\n                                                        view/prev-children\n                                                        view/state\n                                                        view/prev-state]}]\n                                             ;; default should-update behaviour compares props, children, and state.\n                                             (or (not= props prev-props)\n                                                 (not= children prev-children)\n                                                 (when-not (nil? state)\n                                                   (not= @state prev-state))))}\n                 methods\n                 {:view/will-unmount (fn [{:keys [view/state] :as this}]\n                                       ;; manually track unmount state, react doesn't do this anymore,\n                                       ;; otherwise our async render loop can't tell if a component is still on the page.\n                                       (gobj/set this \"unmounted\" true)\n                                       (when-let [un-sub (aget this \"reactiveUnsubscribe\")]\n                                         (un-sub))\n                                       (some-> state (remove-watch this)))\n                  :view/did-update   finish-lifecycle}])\n       (reduce-kv (fn [obj method-k method]\n                    (doto obj\n                      (gobj/set (get kmap method-k) (wrap-methods method-k method)))) #js {})))\n\n(defn swap-silently!\n  \"Swap a component's state atom without forcing an update (render)\"\n  [& args]\n  (binding [*trigger-state-render* false]\n    (apply swap! args)))\n\n(defn- init-component\n  \"Bind element methods and populate initial props for `component`.\"\n  [component $props]\n  (if $props\n    (let [props    (gobj/get $props \"props\")\n          children (gobj/get $props \"children\")]\n      (gobj/set component \"re$view\"\n                (volatile! (-> (gobj/get $props \"class\")\n                               (assoc :view/props (dissoc props :view/state)\n                                      :view/children children))))\n      (when-let [instance-keys (gobj/get $props \"instance\")]\n        (doseq [k (gobj/getKeys instance-keys)]\n          (let [f (gobj/get instance-keys k)]\n            (gobj/set component k (if (fn? f) (fn [& args]\n                                                (apply f component args)) f)))))\n      (when-let [state (or\n                         ;;;;;;;;;;;;;;;\n                         ;;\n                         ;; state can be provided in 1 of 3 ways, depends on whether you want to provide state\n                         ;; at time of component definition or element instantiation.\n                         ;;\n                         ;; 1. pass state as :view/state prop, when element is created:\n                         ;;    in this case it must be an atom-like thing that implements IWatchable/IDeref\n\n                         (get props :view/state)\n\n                         ;; 2. in the component's methods map, :view/initial-state can either be a static value or\n                         ;;    a function, which will be called w/ the component to return initial state.\n                         ;;    the initial value is wrapped in an atom.\n\n                         (when-let [initial-state (gobj/get component \"$initialState\")]\n                           (atom (cond-> initial-state (fn? initial-state) (apply component children))))\n\n                         ;; 3. in the component's methods map, can specify :view/state directly. Must be\n                         ;;    an atom-like thing.\n\n                         (when-let [watchable-state (gobj/get component \"$state\")]\n                           (cond-> watchable-state (fn? watchable-state) (apply component children))))]\n        (init-state! component state)))\n    (gobj/set component \"re$view\" (volatile! {})))\n  component)\n\n(defn- factory\n  \"Return a function which returns a React element when called with props and children.\"\n  [constructor]\n  (let [{:keys [class-keys\n                instance-keys] :as re$view$base} (gobj/get constructor \"re$view$base\")\n        {{defaults :props/defaults\n          :as      prop-spec} :spec/props\n         children-spec        :spec/children\n         :as                  class-keys} (-> class-keys\n                                              (update :spec/props vspec/normalize-props-map)\n                                              (update :spec/children vspec/resolve-spec-vector))\n        class-react-key (gobj/get constructor \"key\")\n        display-name    (gobj/get constructor \"displayName\")]\n    (doto (fn [props & children]\n            (let [[props children] (if (or (map? props)\n                                           (nil? props)) [props children] [nil (cons props children)])\n                  props (cond->> props defaults (merge defaults))\n                  key   (or (get props :key)\n                            (when class-react-key\n                              (cond (string? class-react-key) class-react-key\n                                    (keyword? class-react-key) (get props class-react-key)\n                                    (fn? class-react-key) (apply class-react-key (assoc props :view/children children) children)\n                                    :else (throw (js/Error \"Invalid key supplied to component\"))))\n                            display-name)]\n\n              (when (true? INSTRUMENT!)\n                (vspec/validate-props display-name prop-spec props)\n                (vspec/validate-children display-name children-spec children))\n\n              (react/createElement constructor #js {\"key\"      key\n                                                    \"ref\"      (get props :ref)\n                                                    \"props\"    (dissoc props :ref)\n                                                    \"children\" children\n                                                    \"instance\" instance-keys\n                                                    \"class\"    class-keys})))\n      (gobj/set \"re$view$base\" re$view$base))))\n\n(defn- ^:export class*\n  [{:keys [lifecycle-keys\n           react-keys] :as re-view-base}]\n  (let [prototype   (new react/Component)\n        _           (gobj/extend prototype (lifecycle-methods lifecycle-keys))\n        constructor (fn ReView [$props]\n                      (this-as this\n                        (init-component this $props)))\n        _           (gobj/set constructor \"prototype\" prototype)]\n    (doseq [[k v] (seq react-keys)]\n      (gobj/set constructor (v-util/camelCase k) v))\n    (doto constructor\n      (gobj/set \"re$view$base\" (assoc re-view-base :prototype prototype)))))\n\n(defn- ^:export view*\n  \"Returns a React component factory for supplied lifecycle methods.\n   Expects a single map of functions, or any number of key-function pairs,\n\n   (component {:render (fn [this] [:div ...])})\n\n   -or-\n\n   (component\n\n     :get-initial-state\n     (fn [this] {:apple-state :ripe})\n\n     :render\n     (fn [this] [:div ...]))\n\n   See other functions in this namespace for how to work with props and state.\n   Result of :render function is automatically passed through hiccup/element,\n   unless it is already a valid React element.\n   \"\n  [re-view-base]\n  (factory (class* re-view-base)))\n\n(defn prototype [class]\n  (:prototype (gobj/get class \"re$view$base\")))\n\n(defn render-to-dom\n  \"Render view to element, which should be a DOM element or id of element on page.\"\n  [component element]\n  (react-dom/render component (cond->> element\n                                       (string? element)\n                                       (.getElementById js/document))))\n\n(defn partial\n  \"Partially apply props and optional class-keys to base view. Props specified at runtime will overwrite those given here.\n  `re$view$base` property is retained on preserved.\"\n  ([base props]\n   (-> (fn [& args]\n         (let [[user-props & children] (cond->> args\n                                                (not (map? (first args))) (cons {}))]\n           (apply base (merge props user-props) children)))\n       (doto (gobj/set \"re$view$base\" (gobj/get base \"re$view$base\")))))\n  ([base base-overrides props]\n   (partial (view* (merge-with merge (gobj/get base \"re$view$base\") base-overrides)) props)))\n\n(defn pass-props\n  \"Remove prop keys handled by component, useful for passing down unhandled props to a child component.\n  By default, removes all keys listed in the component's :spec/props map. Set `:consume false` for props\n  that should be passed through.\"\n  [this]\n  (apply dissoc (get this :view/props) (get-in this [:spec/props :props/consumed])))\n\n(def is-react-element? v-util/is-react-element?)\n\n"]}