{"version":3,"sources":["faber/threejs_scene.cljs"],"mappings":"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","names":["js/faber","js/faber.threejs-scene","js/faber.threejs-scene.makemesh","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__50476","cljs.core/MultiFn","cljs.core.symbol","faber.threejs-scene/makemesh","p__50478","vec__50479","seq__50480","cljs.core/seq","first__50481","cljs.core/first","cljs.core/next","form","args","cljs.core.println","cljs.core/Keyword","p__50486","vec__50487","seq__50488","cljs.core.apply","faber.operations-3d/union","cljs.core.map","p__50495","vec__50497","seq__50498","first__50499","p__50506","vec__50509","seq__50510","first__50511","faber.operations-3d/hull","p__50517","vec__50518","seq__50519","first__50520","faber.operations-3d/difference","p__50525","vec__50526","seq__50527","first__50528","faber.operations-3d/intersection","p__50536","vec__50538","cljs.core.nth","map__50541","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","x","y","z","center","faber.operations-3d/cube","p__50555","vec__50558","h","r","r2","faber.operations-3d/cylinder","p__50566","vec__50568","points","faces","faber.operations-3d/polyhedron","p__50577","vec__50579","faber.operations-3d/sphere","p__50588","vec__50590","seq__50591","first__50592","vec__50593","block","mesh","faber.operations-3d/translate","p__50605","vec__50607","seq__50608","first__50609","a","v","vec__50613","cljs.core.mapv","faber.model/deg->rad","faber.operations-3d/rotatev","p__50619","vec__50620","seq__50621","first__50622","vec__50627","faber.operations-3d/rotatec","p__50633","vec__50634","seq__50635","first__50636","faber.operations-3d/with-fn","p__50644","vec__50645","seq__50646","first__50647","faber.operations-3d/with-fa","p__50652","vec__50653","seq__50654","first__50655","faber.operations-3d/with-fs","p__50662","vec__50664","seq__50665","first__50666","vec__50667","faber.operations-3d/scale","p__50680","vec__50682","seq__50684","first__50686","options","faber.operations-3d/offset","faber.threejs-scene/pippo","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","faber.threejs-scene/model","seq50690","self__4724__auto__"],"sourcesContent":["(ns faber.threejs-scene\n  (:require [faber.operations-3d :as o3]\n            [faber.canvas3d :as canvas]))\n\n\n(defmulti makemesh\n          (fn [[form & args]]\n            (println \"multi makemesh form=\" form \" args=\" args)\n            (if (keyword? form) form :list))\n            #_(cond\n              (and (list? form) (nil? args) (keyword? (first form))) (first form)\n              (list? form) :vector\n              (vector? form) :vector\n              (keyword? form) form\n              )\n            )\n\n(defmethod makemesh :default [form & args]\n  (println \"unknown:\" form args)\n  )\n\n(defmethod makemesh :list [[& args]]\n  (println \":list args=\" args)\n  ;(println \":list (map makemesh args)=\" (map makemesh args))\n  (apply o3/union (map makemesh args)))\n\n(defmethod makemesh :union [[form & args]]\n  (makemesh args))\n\n(defmethod makemesh :hull [[form & args]]\n  (apply o3/hull (map makemesh args)))\n\n(defmethod makemesh :difference [[form & args]]\n  (apply o3/difference (map makemesh args)))\n\n(defmethod makemesh :intersection [[form & args]]\n  (apply o3/intersection (map makemesh args)))\n\n\n(defmethod makemesh :cube [[form {:keys [x y z center]}]]\n  (println \"makemesh :cube form=\" form \" y=\" y)\n  (o3/cube x y z)\n  ;(three/Mesh. (three/BoxGeometry. x y z) canvas/default-material)\n  ; TODO handle center\n  )\n\n(defmethod makemesh :cylinder [[form h r r2]]\n  (println \"makemesh :cylinder form=\" form \" h=\" h \" r=\" r \" r2=\" r2)\n  (o3/cylinder h r r2)\n  ;(three/Mesh. (three/BoxGeometry. x y z) canvas/default-material)\n  ; TODO handle center\n  )\n\n(defmethod makemesh :polyhedron [[form points faces]]\n  (o3/polyhedron points faces)\n  ;(three/Mesh. (three/BoxGeometry. x y z) canvas/default-material)\n  ; TODO handle center\n  )\n\n\n(defmethod makemesh :sphere [[form r]]\n  (o3/sphere r)\n\n  ; TODO handle center\n  )\n\n\n\n(defmethod makemesh :translate [[form [x y z] & block]]\n  (let [mesh (apply makemesh block)]\n    (println \":translate mesh=\" mesh)\n    (o3/translate mesh x y z)))\n\n(defmethod makemesh :rotatev [[form a v & block]]\n  (let [mesh (apply makemesh block)\n        [x y z] (mapv faber.model/deg->rad v)]\n    (o3/rotatev mesh 10 x y z)))\n\n(defmethod makemesh :rotatec [[form v & block]]\n  (let [mesh (apply makemesh block)\n        [x y z] (mapv faber.model/deg->rad v)]\n    (o3/rotatec mesh x y z)))\n\n(defmethod makemesh :with-fn [[form x & block]]\n  (o3/with-fn x (fn [] (apply makemesh block))))\n\n(defmethod makemesh :with-fa [[form x & block]]\n  (o3/with-fa x (fn [] (apply makemesh block))))\n\n(defmethod makemesh :with-fs [[form x & block]]\n  (o3/with-fs x (fn [] (apply makemesh block))))\n\n(defmethod makemesh :scale [[form [x y z] & block]]\n  (let [mesh (apply makemesh block)]\n    (println \":scale mesh=\" mesh)\n    (o3/scale mesh x y z)))\n\n(defmethod makemesh :offset [[form options & block]]\n  (o3/offset options  (apply makemesh block)))\n\n\n(def pippo 34)\n\n(defn model [& args]\n  (println \"model. args=\" args)\n  (let [mesh (apply makemesh args)]\n    {:3dmodel mesh}))\n\n"]}