{"version":3,"sources":["applied_science/js_interop/impl.cljs"],"mappings":"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","names":["applied-science.js-interop.impl/lookup-sentinel","applied-science.js-interop.impl/wrap-key","k","G__27505","cljs.core/Keyword","cljs.core/name","applied-science.js-interop.impl/in?*","k*","obj","applied-science.js-interop.impl/contains?*","applied-science.js-interop.impl/get+!","o","temp__5737__auto__","child-obj","applied-science.js-interop.impl/get-value-by-keys","ks*","end","cljs.core/count","i","cljs.core._EQ_","cljs.core.nth","var_args","G__27533","applied-science.js-interop.impl/get-in*","js/Error","not-found","last-obj","cljs.core/butlast","cljs.core/peek","applied-science.js-interop.impl/select-keys*","cljs.core.reduce","m","G__27553","G__27554","applied-science.js-interop.impl/assoc-in*","v","inner-obj","applied-science.js-interop.impl/update-in*","f","args","last-k*","old-val","cljs.core.apply","applied-science.js-interop.impl/apply-in*","arg-array","parent","applied_science.js_interop.impl.get_in_STAR_","cljs.core/pop"],"sourcesContent":["(ns applied-science.js-interop.impl\n  (:require-macros [applied-science.js-interop :as j]))\n\n(def lookup-sentinel #js{})\n\n(defn wrap-key\n  \"Returns `k` or, if it is a keyword, its name.\"\n  [k]\n  (cond-> k\n          (keyword? k) (name)))\n\n(defn ^boolean in?* [k* obj]\n  (js-in k* obj))\n\n(defn ^boolean contains?* [obj k*]\n  (and (some? obj)\n       (in?* k* obj)))\n\n(defn- get+! [o k*]\n  (if-some [child-obj (unchecked-get o k*)]\n    child-obj\n    (unchecked-set o k* #js{})))\n\n(defn- get-value-by-keys\n  \"Look up `ks` in `obj`, stopping at any nil\"\n  [obj ks*]\n  (when obj\n    (let [end (count ks*)]\n      (loop [i 0\n             obj obj]\n        (if (or (= i end)\n                (nil? obj))\n          obj\n          (recur (inc i)\n                 (unchecked-get obj (nth ks* i))))))))\n\n(defn get-in*\n  ([obj ks*]\n   (get-value-by-keys obj ks*))\n  ([obj ks* not-found]\n   (if-some [last-obj (get-value-by-keys obj (butlast ks*))]\n     (let [k (peek ks*)]\n       (if (js-in k last-obj)\n         (j/unchecked-get last-obj k)\n         not-found))\n     not-found)))\n\n(defn select-keys*\n  \"Returns an object containing only those entries in `o` whose key is in `ks`\"\n  [obj ks*]\n  (->> ks*\n       (reduce (fn [m k]\n                 (cond-> m\n                         ^boolean (contains?* obj k)\n                         (doto\n                           (unchecked-set k\n                                          (unchecked-get obj k))))) #js {})))\n(defn assoc-in*\n  [obj ks* v]\n  (let [obj (j/some-or obj #js{})\n        inner-obj (reduce get+! obj (butlast ks*))]\n    (unchecked-set inner-obj (peek ks*) v)\n    obj))\n\n(defn update-in*\n  [obj ks* f args]\n  (let [obj (j/some-or obj #js{})\n        last-k* (peek ks*)\n        inner-obj (reduce get+! obj (butlast ks*))\n        old-val (unchecked-get inner-obj last-k*)]\n    (unchecked-set inner-obj\n                   last-k*\n                   (apply f old-val args))\n    obj))\n\n(defn apply-in*\n  [obj ks* arg-array]\n  (let [parent (get-in* obj (pop ks*))\n        f (unchecked-get parent (peek ks*))]\n    (.apply f parent arg-array)))\n\n\n"]}