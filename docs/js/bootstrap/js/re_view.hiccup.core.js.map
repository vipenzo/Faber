{"version":3,"sources":["re_view/hiccup/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","js/Symbol","cljs.core/PROTOCOL_SENTINEL","sym","writer","_","cljs.core/-write","re-view$hiccup$core$IElement$to_element$dyn","x__4428__auto__","m__4429__auto__","re-view.hiccup.core/to-element","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","re-view.hiccup.core/IElement","this","re-view$hiccup$core$IEmitHiccup$to_hiccup$dyn","re-view.hiccup.core/to-hiccup","re-view.hiccup.core/IEmitHiccup","re-view.hiccup.core/-to-element","form","cljs.core/vector?","e45611","vec__45612","cljs.core.nth","vec__45615","tag","id","classes","re-view.hiccup.hiccup/parse-key-memoized","props","children","re-view.hiccup.hiccup/parse-args","args","re-view.hiccup.hiccup/reduce-flatten-seqs","re-view.hiccup.hiccup/props->js","cljs.core.apply","re-view.hiccup.hiccup/*create-element*","js/Error","e","cljs.core.println","js/console","cljs.core/native-satisfies?","G__45622","cljs.core/list?","cljs.core.reduce","out","el","G__45623","var_args","G__45626","re-view.hiccup.core/element","p__45630","map__45631","cljs.core/hash-map","cljs.core.get","wrap-props","create-element","*wrap-props*-orig-val__45633","*create-element*-orig-val__45634","*wrap-props*-temp-val__45635","*create-element*-temp-val__45636","re-view.hiccup.hiccup/*wrap-props*","or__4126__auto__"],"sourcesContent":["(ns re-view.hiccup.core\n  (:require [re-view.hiccup.hiccup :as hiccup]))\n\n(enable-console-print!)\n(set! *warn-on-infer* true)\n\n;; patch IPrintWithWriter to print javascript symbols without throwing errors\n(when (exists? js/Symbol)\n  (extend-protocol IPrintWithWriter\n    js/Symbol\n    (-pr-writer [sym writer _]\n      (-write writer (str \"\\\"\" (.toString sym) \"\\\"\")))))\n\n(defprotocol IElement\n  (to-element [this] \"Returns a React element representing `this`\"))\n\n(defprotocol IEmitHiccup\n  (to-hiccup [this] \"Returns a hiccup form representing `this`\"))\n\n(defn -to-element [form]\n  (cond (vector? form)\n        (try\n          (let [[_ tag id classes] (hiccup/parse-key-memoized (form 0))\n                [props children] (hiccup/parse-args form)\n                args (hiccup/reduce-flatten-seqs -to-element [tag (hiccup/props->js tag id classes props)] children)]\n            (apply hiccup/*create-element* args))\n\n          (catch js/Error e\n            (println \"Error in render-hiccup-node:\")\n            (println form)\n            (.error js/console e)))\n\n\n        (satisfies? IElement form)\n        (to-element form)\n\n        (satisfies? IEmitHiccup form)\n        (-to-element (to-hiccup form))\n\n        (list? form)\n        (reduce (fn [out el]\n                  (doto out (.push (-to-element el)))) #js [] form)\n\n        :else form))\n\n(defn element\n  \"Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement.\"\n  ([form]\n   (-to-element form))\n  ([form {:keys [wrap-props\n                 create-element]}]\n   (binding [hiccup/*wrap-props* wrap-props\n             hiccup/*create-element* (or hiccup/*create-element* create-element)]\n     (-to-element form))))"]}