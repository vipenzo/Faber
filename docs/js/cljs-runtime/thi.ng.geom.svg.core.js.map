{"version":3,"sources":["thi/ng/geom/svg/core.cljc"],"mappings":"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","names":["thi.ng.geom.svg.core/stroke-round","thi.ng.geom.svg.core/xml-preamble","thi.ng.geom.svg.core/*ff*","thi.ng.strf.core/float","thi.ng.geom.svg.core/*fmt-vec*","p","cljs.core/first","cljs.core.nth","thi.ng.geom.svg.core/*fmt-percent*","x","thi.ng.geom.svg.core/*fmt-matrix*","thi.ng.geom.svg.core/point-seq-format2","thi.ng.geom.svg.core/point-seq-format3","thi.ng.geom.svg.core/point-seq-format4","thi.ng.geom.svg.core/point-seq-format","n","G__48381","cljs.core.repeat","cljs.core.interpose","thi.ng.geom.svg.core/path-segment-formats","cljs.core/str","thi$ng$geom$svg$core$PSVGConvert$as_svg$dyn","x__4428__auto__","m__4429__auto__","thi.ng.geom.svg.core/as-svg","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","thi.ng.geom.svg.core/PSVGConvert","_","opts","thi.ng.geom.svg.core/color-attrib","attribs","id","temp__5733__auto__","att","cljs.core/deref","cljs.core.assoc","thi.ng.color.core/as-css","thi.ng.geom.svg.core/matrix-attrib","mat","vec__48407","a","c","e","b","d","f","cljs.core.apply","thi.ng.strf.core/format","thi.ng.geom.svg.core/filter-attribs","acc","cljs.core/transient","ks","cljs.core/keys","cljs.core._EQ_","cljs.core.subs","cljs.core/name","cljs.core.dissoc_BANG_","cljs.core/next","cljs.core/persistent!","thi.ng.geom.svg.core/svg-attribs","base","cljs.core/seq","cljs.core.into","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","thi.ng.geom.svg.core/svg","seq48430","G__48431","self__4723__auto__","body","thi.ng.geom.svg.core/defs","seq48432","self__4724__auto__","defs","p__48452","vec__48453","thi.ng.geom.svg.core/gradient-stop","pos","col","thi.ng.geom.svg.core/linear-gradient","seq48456","G__48457","G__48458","stops","cljs.core.map","thi.ng.geom.svg.core/radial-gradient","seq48462","G__48463","G__48464","thi.ng.geom.svg.core/group","seq48467","G__48468","thi.ng.geom.svg.core/path","p__48496","vec__48497","seq48490","G__48491","segments","cljs.core.mapcat","cljs.core.comp","cljs.core/rest","thi.ng.geom.svg.core/text","p__48507","p__48508","vec__48509","vec__48512","seq48503","G__48504","G__48505","y","txt","thi.ng.geom.svg.core/circle","p__48539","p__48540","vec__48541","vec__48544","seq48531","G__48532","G__48533","radius","thi.ng.geom.svg.core/arc-segment","center","theta1","theta2","great?","ccw?","thi.ng.geom.core.vector.vec2","thi.ng.geom.core/+","thi.ng.geom.core.vector/x","q","thi.ng.geom.core.vector/y","thi.ng.geom.svg.core/arc","p__48572","vec__48573","seq48558","G__48559","G__48560","G__48561","G__48562","G__48563","G__48564","thi.ng.geom.svg.core.path","thi.ng.geom.svg.core/rect","p__48587","p__48588","vec__48589","vec__48592","seq48580","G__48581","G__48582","G__48583","w","h","thi.ng.geom.svg.core/line","p__48618","p__48619","p__48620","vec__48623","vec__48626","vec__48629","seq48614","G__48615","G__48616","ax","ay","bx","by","thi.ng.geom.svg.core/line-decorated","p__48660","vec__48661","seq48650","G__48651","G__48652","G__48653","G__48654","start","end","cljs.core/List","thi.ng.geom.svg.core.line","thi.ng.geom.svg.core/line-strip","p__48672","vec__48673","seq48669","G__48670","points","cljs.core/count","thi.ng.geom.svg.core/line-strip-decorated","p__48688","vec__48689","seq48679","G__48680","G__48681","G__48682","G__48683","seg","thi.ng.geom.svg.core.line_strip","G__48693","G__48694","G__48695","G__48696","cljs.core.map_indexed","p__48697","vec__48698","i","thi.ng.dstruct.core.successive_nth","G__48702","G__48703","G__48704","G__48705","G__48707","cljs.core/peek","thi.ng.geom.svg.core/polygon","p__48718","vec__48720","seq48712","G__48713","thi.ng.geom.svg.core/instance","p__48734","vec__48735","seq48730","G__48731","thi.ng.geom.svg.core/arrow-head","p__48748","vec__48749","seq48742","G__48743","G__48744","G__48745","len","theta","solid?","p__48753","vec__48754","idx","thi.ng.geom.core/normalize","thi.ng.geom.core/-","G__48758","G__48759","fexpr__48757","thi.ng.geom.core/rotate","cljs.core.merge","thi.ng.geom.svg.core/line-label","p__48772","vec__48773","map__48776","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","seq48766","__rotate?","__offset","cljs.core.dissoc","p1__48765#","cljs.core.update_in","or__4126__auto__","p__48779","vec__48781","label","cljs.core.get_in","m","thi.ng.geom.core/mix","thi.ng.math.core/degrees","thi.ng.geom.core/heading","thi.ng.geom.core/normal","thi.ng.geom.svg.core.text","thi.ng.geom.svg.core/comp-decorators","seq48789","fns","p__48792","vec__48793","cljs.core.reduce","cljs.core.concat"],"sourcesContent":["(ns thi.ng.geom.svg.core\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.core.utils :as gu]\n   [thi.ng.geom.core.vector :as v :refer [vec2]]\n   [thi.ng.geom.core.matrix :as mat :refer [M32]]\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m]\n   [thi.ng.strf.core :as f]\n   [thi.ng.color.core :as col]\n   #?(:clj [hiccup.core :refer [html]])))\n\n(def stroke-round {:stroke-linecap \"round\" :stroke-linejoin \"round\"})\n(def xml-preamble \"<?xml version=\\\"1.0\\\"?>\\n\")\n\n(def ^:dynamic *ff* (f/float 2))\n(def ^:dynamic *fmt-vec* (fn [p] (str (*ff* (first p)) \",\" (*ff* (nth p 1)))))\n(def ^:dynamic *fmt-percent* (fn [x] (str (int (* x 100)) \"%\")))\n\n(def ^:dynamic *fmt-matrix* [\"matrix(\" *ff* \",\" *ff* \",\" *ff* \",\" *ff* \",\" *ff* \",\" *ff* \")\"])\n\n(def point-seq-format2 [*fmt-vec* \" \" *fmt-vec*])\n(def point-seq-format3 [*fmt-vec* \" \" *fmt-vec* \" \" *fmt-vec*])\n(def point-seq-format4 [*fmt-vec* \" \" *fmt-vec* \" \" *fmt-vec* \" \" *fmt-vec*])\n\n(defn point-seq-format\n  [n]\n  (case (int n)\n    1 [*fmt-vec*]\n    2 point-seq-format2\n    3 point-seq-format3\n    4 point-seq-format4\n    (->> *fmt-vec*\n         (repeat n)\n         (interpose \" \"))))\n\n(def path-segment-formats\n  {:M [\"M\" *fmt-vec* \" \"]\n   :m [\"m\" *fmt-vec* \" \"]\n   :L [\"L\" *fmt-vec* \" \"]\n   :l [\"l\" *fmt-vec* \" \"]\n   :C [\"C\" *fmt-vec* \" \" *fmt-vec* \" \" *fmt-vec* \" \"]\n   :c [\"c\" *fmt-vec* \" \" *fmt-vec* \" \" *fmt-vec* \" \"]\n   :A [\"A\" *fmt-vec* \" \" *ff* \" \" str \" \" str \" \" *fmt-vec* \" \"]\n   :a [\"a\" *fmt-vec* \" \" *ff* \" \" str \" \" str \" \" *fmt-vec* \" \"]\n   :Z [\"Z\"]\n   :z [\"z\"]})\n\n(defprotocol PSVGConvert\n  (as-svg [_ opts]))\n\n#?(:clj\n   (defn serialize\n     ^String [svg] (str xml-preamble (html {:mode :xml} svg))))\n\n#?(:clj\n   (defn serialize-as-byte-array\n     ^bytes [svg] (.getBytes (serialize svg) \"UTF-8\")))\n\n(defn color-attrib\n  [attribs id]\n  (if-let [att (attribs id)]\n    (if (string? att)\n      attribs\n      (assoc attribs id @(col/as-css att)))\n    attribs))\n(defn matrix-attrib\n  [attribs id]\n  (if-let [mat (attribs id)]\n    (if (string? mat)\n      attribs\n      (let [[a c e b d f] mat]\n        (assoc attribs id (apply f/format *fmt-matrix* [a b c d e f]))))\n    attribs))\n(defn filter-attribs\n  [attribs]\n  (loop [acc (transient attribs), ks (keys attribs)]\n    (if ks\n      (recur\n       (if (= \"__\" (subs (name (first ks)) 0 2)) (dissoc! acc (first ks)) acc)\n       (next ks))\n      (persistent! acc))))\n\n(defn svg-attribs\n  [attribs base]\n  (if (seq attribs)\n    (-> (filter-attribs attribs)\n        (color-attrib :stroke)\n        (color-attrib :fill)\n        (matrix-attrib :transform)\n        (into base))\n    base))\n\n(defn svg\n  [attribs & body]\n  [:svg\n   (svg-attribs\n    attribs\n    {\"xmlns\" \"http://www.w3.org/2000/svg\"\n     \"xmlns:xlink\" \"http://www.w3.org/1999/xlink\"\n     \"version\" \"1.1\"})\n   body])\n\n(defn defs\n  [& defs]\n  [:defs defs])\n\n(defn gradient-stop\n  [[pos col]]\n  (let [col (if (string? col) col @(col/as-css col))]\n    [:stop {:offset (*fmt-percent* pos) :stop-color col}]))\n\n(defn linear-gradient\n  [id attribs & stops]\n  [:linearGradient\n   (assoc attribs :id id)\n   (map gradient-stop stops)])\n\n(defn radial-gradient\n  [id attribs & stops]\n  [:radialGradient\n   (assoc attribs :id id)\n   (map gradient-stop stops)])\n\n(defn group\n  [attribs & body]\n  (into [:g (svg-attribs attribs nil)] body))\n\n(defn path\n  [segments & [attribs]]\n  [:path\n   (svg-attribs\n    attribs\n    {:d (apply f/format\n               (mapcat (comp path-segment-formats first) segments)\n               (mapcat rest segments))})])\n(defn text\n  [[x y] txt & [attribs]]\n  [:text\n   (svg-attribs attribs {:x (*ff* x) :y (*ff* y)})\n   txt])\n\n(defn circle\n  [[x y] radius & [attribs]]\n  [:circle\n   (svg-attribs\n    attribs\n    {:cx (*ff* x) :cy (*ff* y) :r radius})])\n\n(defn arc-segment\n  [center radius theta1 theta2 great? ccw?]\n  (let [radius (vec2 radius)\n        p (g/+ (vec2 center) (g/as-cartesian (vec2 (v/x radius) theta1)))\n        q (g/+ (vec2 center) (g/as-cartesian (vec2 (v/y radius) theta2)))]\n    [[:M p] [:A radius 0 (if great? 1 0) (if ccw? 1 0) q]]))\n\n(defn arc\n  [center radius theta1 theta2 great? ccw? & [attribs]]\n  (path (arc-segment center radius theta1 theta2 great? ccw?) attribs))\n\n(defn rect\n  [[x y] w h & [attribs]]\n  [:rect\n   (svg-attribs\n    attribs\n    {:x (*ff* x) :y (*ff* y) :width w :height h})])\n\n(defn line\n  [[ax ay] [bx by] & [attribs]]\n  [:line\n   (svg-attribs\n    attribs\n    {:x1 (*ff* ax) :y1 (*ff* ay) :x2 (*ff* bx) :y2 (*ff* by)})])\n\n(defn line-decorated\n  [p q start end & [attribs]]\n  (list\n   (line p q attribs)\n   (if start (start q p 0 attribs))\n   (if end   (end p q 0 attribs))))\n\n(defn line-strip\n  [points & [attribs]]\n  [:polyline\n   (svg-attribs\n    attribs\n    {:fill \"none\"\n     :points (apply f/format (point-seq-format (count points)) points)})])\n\n(defn line-strip-decorated\n  [points start seg end & [attribs]]\n  (let [n (dec (count points))]\n    (list\n     (line-strip points attribs)\n     (if start (start (points 1) (points 0) 0 attribs))\n     (if seg   (map-indexed (fn [i [p q]] (seg p q i attribs)) (d/successive-nth 2 points)))\n     (if end   (end (points (dec n)) (peek points) n attribs)))))\n\n(defn polygon\n  [points & [attribs]]\n  [:polygon\n   (svg-attribs\n    attribs\n    {:points (apply f/format (point-seq-format (count points)) points)})])\n\n(defn instance\n  [id & [attribs]]\n  [:use (svg-attribs attribs {\"xlink:href\" (str \"#\" id)})])\n\n(defn arrow-head\n  [len theta solid? & [opts]]\n  (fn [p q idx & [attribs]]\n    (let [q (vec2 q)\n          d (g/normalize (g/- q p) len)]\n      (list\n       ((if solid? polygon line-strip)\n        [(g/- q (g/rotate d (- theta))) q (g/- q (g/rotate d theta))]\n          (merge attribs opts))))))\n\n(defn line-label\n  [& [{:keys [__rotate? __offset] :as opts}]]\n  (let [opts (-> opts\n                 (dissoc :__rotate? :__offset)\n                 (update-in [:text-anchor] #(or % \"middle\")))]\n    (fn [p q idx & [attribs]]\n      (if-let [label (get-in attribs [:__label idx])]\n        (let [p (vec2 p)\n              m (g/+ (g/mix p q) __offset)\n              opts (if __rotate?\n                     (assoc opts\n                       :transform (str \"rotate(\"\n                                       (m/degrees (g/heading (g/normal (g/- p q))))\n                                       \" \" (m 0) \" \" (m 1) \")\"))\n                     opts)]\n          (list (text m label (merge (dissoc attribs :__label) opts))))))))\n\n(defn comp-decorators\n  [& fns]\n  (fn [p q idx & [attribs]]\n    (reduce\n     (fn [acc f] (concat acc (f p q idx attribs))) () fns)))\n"]}