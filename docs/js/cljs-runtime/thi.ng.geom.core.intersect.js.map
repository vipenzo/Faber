{"version":3,"sources":["thi/ng/geom/core/intersect.cljc"],"mappings":"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","names":["thi.ng.geom.core.intersect/sq","x","var_args","G__27696","thi.ng.geom.core.intersect/intersect-circle-circle?","js/Error","p__27698","p__27699","map__27700","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__27701","p","r1","q","r2","thi.ng.geom.core.intersect.intersect_circle_circle_QMARK_","delta","thi.ng.geom.core/-","d","thi.ng.geom.core/mag","G__27705","thi.ng.math.core/abs","a","invd","thi.ng.geom.core/madd","h","Math/sqrt","perp","thi.ng.geom.core/*","thi.ng.geom.core/normal","thi.ng.geom.core/+","G__27712","thi.ng.geom.core.intersect/intersect-rect-rect?","p__27714","p__27715","map__27716","vec__27717","cljs.core.nth","vec__27720","map__27723","vec__27724","vec__27727","p__27736","p__27737","p__27738","p__27739","vec__27742","vec__27745","vec__27748","vec__27751","px","py","w","qx","qy","qw","qh","px1","py1","qx1","qy1","px2","py2","qx2","qy2","G__27756","thi.ng.geom.core.intersect/intersect-rect-circle?","p__27757","p__27758","map__27759","map__27760","p__27768","p__27769","p__27770","vec__27771","vec__27774","vec__27777","sz","s","r","thi.ng.geom.core.intersect.intersect_rect_circle_QMARK_","cx","cy","ds","G__27784","thi.ng.geom.core.intersect/intersect-aabb-aabb?","p__27791","p__27792","map__27793","map__27794","pa","sa","pb","sb","thi.ng.geom.core.intersect.intersect_aabb_aabb_QMARK_","qa","qb","G__27798","thi.ng.geom.core.intersect/intersect-aabb-sphere?","p__27799","p__27800","map__27801","map__27802","p__27808","p__27809","p__27810","vec__27811","vec__27814","vec__27817","thi.ng.geom.core.intersect.intersect_aabb_sphere_QMARK_","pz","qz","cz","p__27826","vec__27827","thi.ng.geom.core.intersect/intersect-aabb-frustum?","size","planes","vec__27830","cljs.core.reduce","p__27834","vec__27835","vec__27838","res","nx","ny","nz","vx","vy","vz","cljs.core/reduced","G__27847","thi.ng.geom.core.intersect/intersect-sphere-sphere?","p__27851","p__27852","map__27853","map__27854","p1","p2","thi.ng.geom.core.intersect.intersect_sphere_sphere_QMARK_","thi.ng.geom.core/dist-squared","G__27859","thi.ng.geom.core.intersect/intersect-ray-sphere?","p__27863","p__27864","map__27865","map__27866","rp","dir","thi.ng.geom.core.intersect.intersect_ray_sphere_QMARK_","thi.ng.geom.core/mag-squared","v","thi.ng.geom.core/dot","b","thi.ng.geom.core.intersect/intersect-ray-triangle3?","c","u","n","thi.ng.geom.core/cross","thi.ng.geom.core.vector/V3","w0","a'","b'","thi.ng.math.core/delta=","vec__27875","i","thi.ng.geom.core.utils.triangle_barycentric_coords","thi.ng.math.core.in_range_QMARK_","thi.ng.geom.core.intersect/triaabb-axis-test","pa1","pb1","pa2","pb2","fa","fb","vec__27886","min","max","rad","p__27889","p__27890","p__27891","p__27892","p__27893","vec__27895","vec__27898","vec__27901","vec__27904","vec__27907","thi.ng.geom.core.intersect/triaabb-edge-test-e0","ax","ay","az","bx","by","bz","ex","ey","ez","e","sx","sy","vec__27912","fx","fy","fz","thi.ng.geom.core/abs","p__27925","p__27926","p__27927","p__27928","p__27929","vec__27930","vec__27933","vec__27936","vec__27939","vec__27942","thi.ng.geom.core.intersect/triaabb-edge-test-e1","vec__27948","p__27961","p__27962","p__27963","p__27964","p__27965","vec__27966","vec__27969","vec__27972","vec__27975","vec__27978","thi.ng.geom.core.intersect/triaabb-edge-test-e2","vec__27982","thi.ng.geom.core.intersect/triaabb-edge-minmax","x__4217__auto__","y__4218__auto__","x__4214__auto__","y__4215__auto__","thi.ng.geom.core.intersect/intersect-triangle3-aabb?","vec__27990","vec__27993","vec__27996","vec__27999","e0","e1","G__28003","G__28004","G__28005","thi.ng.geom.core.intersect/intersect-plane-aabb?","p__28011","p__28012","p__28013","p__28014","vec__28015","vec__28018","vec__28021","vec__28024","thi.ng.geom.core.intersect/intersect-line2-line2?","lp","lq","dx1","dy1","dx2","dy2","dx12","dy12","denom","na","nb","ip","thi.ng.geom.core.utils/closest-point-on-segment","iq","or__4126__auto__","ua","ub","thi.ng.geom.core/mix","thi.ng.geom.core.intersect/intersect-line2-edges?","rq","edges","cljs.core.transduce","cljs.core.comp","cljs.core.map","p__28036","vec__28037","p1__28029#","cljs.core.filter","and__4115__auto__","G__28043","fexpr__28042","cljs.core.completing","closest","isec","thi.ng.math.core/INF+","cljs.core/first","thi.ng.geom.core.intersect/intersect-ray2-edges?","rd","thi.ng.geom.core.intersect/intersect-plane-plane?","an","aw","bn","bw","thi.ng.math.core/*eps*","od","det","thi.ng.geom.core.utils.ortho_normal","thi.ng.geom.core.intersect/intersect-ray-plane?","dp","dn","du","G__28050","p__28054","p__28055","p__28056","vec__28057","vec__28060","vec__28063","s2","thi.ng.geom.core.intersect.intersect_plane_aabb_QMARK_","vec__28066","vec__28069","vec__28072","vx1","vx2","vy1","vy2","vz1","vz2","thi.ng.geom.core.intersect/intersect-plane-sphere?","G__28079","thi.ng.geom.core.intersect/subdot","thi.ng.geom.core/subm","thi.ng.geom.core.intersect/face-a","f","deltas","aff","cljs.core.mapv","thi.ng.geom.core.intersect/face-b1?","p1__28085#","cljs.core/every?","thi.ng.geom.core.intersect/face-b2?","verts","refv","p1__28087#","thi.ng.geom.core.intersect/edge-a","ma","mb","ea","eb","xa","xb","edge","j","cp","cljs.core.not_EQ_","thi.ng.geom.core.intersect/get-edge","epoints","id","ep","cljs.core.assoc","thi.ng.geom.core.intersect/check-faces-a","specs","masks","affine","vec__28110","cljs.core._EQ_","vec__28113","vec__28116","vec__28119","m","p1__28092#","p1__28093#","cljs.core.conj","cljs.core/next","thi.ng.geom.core.intersect/check-faces-b","vec__28132","vec__28135","vec__28138","p__28149","p__28150","vec__28152","vec__28155","thi.ng.geom.core.intersect/intersect-tetrahedra?","pc","pd","qc","qd","p1__28146#","cljs.core/bit-or","p1__28147#"],"sourcesContent":["(ns thi.ng.geom.core.intersect\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.core.utils :as gu]\n   [thi.ng.geom.core.vector :as v :refer [vec2 vec3 V2 V3]]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.math.macros :as mm])))\n\n(declare intersect-plane-aabb?)\n\n(defn- sq [x] (* x x))\n\n(defn intersect-circle-circle?\n  ([{p :p r1 :r} {q :p r2 :r}]\n     (intersect-circle-circle? p r1 q r2))\n  ([p r1 q r2]\n     (let [delta (g/- q p)\n           d (g/mag delta)]\n       (when (and (<= d (+ r1 r2)) (>= d (m/abs (- r1 r2))))\n         (let [a (/ (+ (- (* r1 r1) (* r2 r2)) (* d d)) (* 2.0 d))\n               invd (/ 1.0 d)\n               p (g/madd delta (* a invd) p)\n               h (Math/sqrt (- (* r1 r1) (* a a)))\n               perp (g/* (g/normal delta) (* h invd))]\n           [(g/+ p perp) (g/- p perp)])))))\n(defn intersect-rect-rect?\n  ([{[px py] :p [w h] :size} {[qx qy] :p [qw qh] :size}]\n     (not (or (> px (+ qx qw)) (> qx (+ px w)) (> py (+ qy qh)) (> qy (+ py h)))))\n  ([[px1 py1] [qx1 qy1] [px2 py2] [qx2 qy2]]\n     (not (or (> px1 qx2) (> px2 qx1) (> py1 qy2) (> py2 qy1)))))\n(defn intersect-rect-circle?\n  ([{p :p sz :size} {s :p r :r}]\n     (intersect-rect-circle? p (g/+ p sz) s r))\n  ([[px py] [qx qy] [cx cy] r]\n     (let [ds (if (< cx px) (sq (- cx px)) (if (> cx qx) (sq (- cx qx)) 0.0))\n           ds (+ ds (if (< cy py) (sq (- cy py)) (if (> cy qy) (sq (- cy qy)) 0.0)))]\n       (<= ds (* r r)))))\n(defn intersect-aabb-aabb?\n  ([{pa :p sa :size} {pb :p sb :size}]\n     (intersect-aabb-aabb? pa pb (g/+ pa sa) (g/+ pb sb)))\n  ([pa pb qa qb]\n     (if (and (<= (pa 0) (qb 0)) (<= (pb 0) (qa 0)))\n       (if (and (<= (pa 1) (qb 1)) (<= (pb 1) (qa 1)))\n         (and (<= (pa 2) (qb 2)) (<= (pb 2) (qa 2)))))))\n(defn intersect-aabb-sphere?\n  ([{p :p sz :size} {s :p r :r}]\n     (intersect-aabb-sphere? p (g/+ p sz) s r))\n  ([[px py pz] [qx qy qz] [cx cy cz] r]\n     (let [ds (if (< cx px) (sq (- cx px)) (if (> cx qx) (sq (- cx qx)) 0.0))\n           ds (+ ds (if (< cy py) (sq (- cy py)) (if (> cy qy) (sq (- cy qy)) 0.0)))\n           ds (+ ds (if (< cz pz) (sq (- cz pz)) (if (> cz qz) (sq (- cz qz)) 0.0)))]\n       (<= ds (* r r)))))\n(defn intersect-aabb-frustum?\n  \"Takes 2 vectors defining an AABB (min-p & size) and a seq of plane\n  parameters (each element [normal w]). The plane normals must be\n  pointing *inwards*. Returns :inside, :intersect or :outside\"\n  [[px py pz :as p] size planes]\n  (let [[qx qy qz] (g/+ p size)]\n    (reduce\n     (fn [res [[nx ny nz] w]]\n       (let [vx (if (pos? nx) px qx)\n             vy (if (pos? ny) py qy)\n             vz (if (pos? nz) pz qz)]\n         (if (pos? (mm/madd nx vx ny vy nz vz w))\n           (reduced :outside)\n           (let [vx (if (pos? nx) qx px)\n                 vy (if (pos? ny) qy py) \n                 vz (if (pos? nz) qz pz)]\n             (if (pos? (mm/madd nx vx ny vy nz vz w))\n               :intersect\n               res)))))\n     :inside planes)))\n(defn intersect-sphere-sphere?\n  ([{p1 :p r1 :r} {p2 :p r2 :r}]\n     (intersect-sphere-sphere? p1 r1 p2 r2))\n  ([p1 r1 p2 r2]\n     (<= (g/dist-squared p1 p2) (mm/addm r1 r2 r1 r2))))\n(defn intersect-ray-sphere?\n  ([{rp :p dir :dir} {p :p r :r}]\n     (intersect-ray-sphere? rp dir p r))\n  ([rp dir p r]\n   (let [q (g/- p rp)\n         ds (g/mag-squared q)\n         v (- (g/dot q dir))\n         d (mm/msub r r (- ds (* v v)))]\n     (if (>= d 0.0)\n       (let [d (Math/sqrt d)\n             a (+ v d)\n             b (- v d)]\n         (if-not (and (< a 0) (< b 0))\n           (if (and (> a 0) (> b 0))\n             (if (> a b) [b a] [a b])\n             (if (> b 0) [b a] [a b]))\n           [a b]))))))  \n(defn intersect-ray-triangle3?\n  [p d a b c]\n  (let [u (g/- b a)\n        v (g/- c a)\n        n (g/cross u v)]\n    (if (m/delta= V3 n)\n      {:type :degenerate}\n      (let [w0 (g/- p a)\n            a' (- (g/dot n w0))\n            b' (g/dot n d)]\n        (if (m/delta= 0.0 b')\n          (if (m/delta= 0.0 a')\n            {:type :same-plane}\n            {:type :no-intersect})\n          (let [r (/ a' b')]\n            (if (< r 0.0)\n              {:type :no-intersect}\n              (let [i (g/madd d r p)\n                    [u v w] (gu/triangle-barycentric-coords a b c i u v)]\n                (if (and (>= u 0.0) (>= w 0.0) (m/in-range? 0.0 1.0 v))\n                  {:type :intersect :p i}\n                  {:type :no-intersect :p i})))))))))\n(defn- triaabb-axis-test\n  [pa1 pb1 pa2 pb2 a b fa fb sa sb]\n  (let [q (mm/madd a pa1 b pb1)\n        r (mm/madd a pa2 b pb2)\n        [min max] (if (< q r) [q r] [r q])\n        rad (mm/madd fa sa fb sb)]\n    (if (<= min rad) (>= max (- rad)))))\n\n(defn- triaabb-edge-test-e0\n  [[ax ay az :as a] [bx by bz :as b] [cx cy cz] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (g/abs e)]\n    (if (triaabb-axis-test ay az cy cz ez (- ey) fz fy sy sz)\n      (if (triaabb-axis-test ax az cx cz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test bx by cx cy ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-test-e1\n  [[ax ay az] [bx by bz :as b] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (g/abs e)]\n    (if (triaabb-axis-test ay az cy cz ez ey fz fy sy sz)\n      (if (triaabb-axis-test ax az cx cz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test ax ay bx by ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-test-e2\n  [[ax ay az :as a] [bx by bz] [cx cy cz :as c] [ex ey ez :as e] [sx sy sz]]\n  (let [[fx fy fz] (g/abs e)]\n    (if (triaabb-axis-test ay az by bz ez (- ey) fz fy sy sz)\n      (if (triaabb-axis-test ax az bx bz (- ez) ex fz fx sx sz)\n        (triaabb-axis-test bx by cx cy ey (- ex) fy fx sx sy)))))\n\n(defn- triaabb-edge-minmax\n  [a b c s]\n  (if (< (min (min a b) c) s)\n    (>= (max (max a b) c) (- s))))\n\n(defn intersect-triangle3-aabb?\n  [a b c p s]\n  (let [[sx sy sz :as s] (g/* s 0.5)\n        p (g/+ p s)\n        [ax ay az :as a] (g/- a p)\n        [bx by bz :as b] (g/- b p)\n        [cx cy cz :as c] (g/- c p)\n        e0 (g/- b a)\n        e1 (g/- c b)]\n    (if (triaabb-edge-test-e0 a b c e0 s)\n      (if (triaabb-edge-test-e1 a b c e1 s)\n        (if (triaabb-edge-test-e2 a b c (g/- a c) s)\n          (if (triaabb-edge-minmax ax bx cx sx)\n            (if (triaabb-edge-minmax ay by cy sy)\n              (if (triaabb-edge-minmax az bz cz sz)\n                (intersect-plane-aabb? a (g/cross e0 e1) s)))))))))\n(defn intersect-line2-line2?\n  [[px1 py1 :as p] [qx1 qy1 :as q]\n   [px2 py2 :as lp] [qx2 qy2 :as lq]]\n  (let [dx1 (- qx1 px1), dy1 (- qy1 py1)\n        dx2 (- qx2 px2), dy2 (- qy2 py2)\n        dx12 (- px1 px2), dy12 (- py1 py2)\n        denom (mm/msub dy2 dx1 dx2 dy1)\n        na (mm/msub dx2 dy12 dy2 dx12)\n        nb (mm/msub dx1 dy12 dy1 dx12)]\n    (if (zero? denom)\n      (if (and (zero? na) (zero? nb))\n        (let [ip (gu/closest-point-on-segment lp p q)\n              iq (gu/closest-point-on-segment lq p q)]\n          (if (or (m/delta= ip lp) (m/delta= iq lq))\n            {:type :coincident :p ip :q iq}\n            {:type :coincident-no-intersect :p ip :q iq}))\n        {:type :parallel})\n      (let [ua (/ na denom)\n            ub (/ nb denom)\n            i (g/mix p q ua)]\n        (if (and (>= ua 0.0) (<= ua 1.0) (>= ub 0.0) (<= ub 1.0))\n          {:type :intersect :p i :ua ua :ub ub}\n          {:type :intersect-outside :p i :ua ua :ub ub})))))\n(defn intersect-line2-edges?\n  [rp rq edges]\n  (->> edges\n       (transduce\n        (comp\n         (map (fn [[p q]] (intersect-line2-line2? rp rq p q)))\n         (filter #(and (:p %) (#{:intersect :coincident} (:type %)))))\n        (completing\n         (fn [closest isec]\n           (let [p (:p isec)\n                 d (g/dist-squared rp p)]\n             (if (< d (closest 1)) [p d] closest))))\n        [nil m/INF+])\n       (first)))\n\n(defn intersect-ray2-edges?\n  [rp rd edges]\n  (intersect-line2-edges? rp (g/madd rd 1e29 rp) edges))\n(defn intersect-plane-plane?\n  [an aw bn bw]\n  (when-not (or (m/delta= aw bw *eps*) (m/delta= an bn *eps*))\n    (let [od (g/dot an bn)\n          det (/ (mm/madd od od -1))\n          u (* (mm/madd bw od aw) det)\n          v (* (mm/madd aw od bw) det)]\n      {:p (g/madd an u (g/* bn v)) :dir (gu/ortho-normal an bn)})))\n(defn intersect-ray-plane?\n  [rp dir n w]\n  (let [dp (g/dot n dir)\n        dn (+ (g/dot n rp) w)]\n    (if (m/delta= 0.0 dp *eps*)\n      {:type (if (zero? dn) :on-plane :parallel)}\n      (let [du (- (/ dn dp))\n            i (g/madd dir du rp)]\n        (if (m/in-range? 0.0 1.0 du)\n          {:type :intersect :p i}\n          {:type :intersect-outside :p i})))))\n(defn intersect-plane-aabb?\n  \"Takes a point & normal defining a plane and 2 vectors defining an\n  AABB (min-p & size). Returns true if plane intersects box.\"\n  ([p n q s]\n   (let [s2 (g/* s 0.5)]\n     (intersect-plane-aabb? (g/- p (g/+ q s2)) n s2)))\n  ([[px py pz] [nx ny nz :as n] [sx sy sz]]\n   (let [[vx1 vx2] (if (pos? nx) [(- (- sx) px) (- sx px)] [(- sx px) (- (- sx) px)])\n         [vy1 vy2] (if (pos? ny) [(- (- sy) py) (- sy py)] [(- sy py) (- (- sy) py)])\n         [vz1 vz2] (if (pos? nz) [(- (- sz) pz) (- sz pz)] [(- sz pz) (- (- sz) pz)])]\n     (if (<= (mm/madd nx vx1 ny vy1 nz vz1) 0.0)\n       (>= (mm/madd nx vx2 ny vy2 nz vz2) 0.0)))))\n(defn intersect-plane-sphere?\n  [n w p r] (<= (m/abs (+ (g/dot n p) w)) r))\n(defn- subdot\n  \"Computes sum((a-b)*c), where a, b, c are 3D vectors.\"\n  [a b c] (let [d (g/subm a b c)] (mm/add (d 0) (d 1) (d 2))))\n\n(defn- face-a\n  \"Takes a transformation fn and the 4 delta vectors between tetra1/tetra2.\n    Returns 2-elem vec of [bitmask affine-coords].\"\n  [f deltas]\n  (let [aff (mapv f deltas)]\n    [(mm/bitmask pos? (aff 0) (aff 1) (aff 2) (aff 3)) aff]))\n\n(defn- face-b1?\n  \"Takes the 4 delta vectors between tetra2/tetra1 and a normal.\n    Returns true if all dot products are positive.\"\n  [deltas n] (every? #(pos? (g/dot % n)) deltas))\n\n(defn- face-b2?\n  \"Like face-b1?, but optimized for last face of tetrahedron.\"\n  [verts refv n] (every? #(pos? (subdot % refv n)) verts))\n\n(defn- edge-a\n  \"Takes 2 bitmasks and edge flags, returns true if there's a\n    separating plane between the faces shared by that edge.\"\n  [ma mb ea eb]\n  (let [xa (bit-and ma (bit-xor ma mb))\n        xb (bit-and mb (bit-xor xa mb))\n        edge (fn [a b i j]\n               (let [cp (mm/msub (ea i) (eb j) (ea j) (eb i))]\n                 (or (and (pos? cp) (pos? (bit-or xa a)) (pos? (bit-or xb b)))\n                     (and (neg? cp) (pos? (bit-or xa b)) (pos? (bit-or xb a))))))]\n    (not\n     (or\n      (not= 15 (bit-or ma mb))\n      (edge 1 2 1 0)\n      (edge 1 4 2 0)\n      (edge 1 8 3 0)\n      (edge 2 4 2 1)\n      (edge 2 8 3 1)\n      (edge 4 8 3 2)))))\n\n(defn- get-edge\n  \"Lazy edge evaluation. Takes a vector of edges, vector of edge\n    points and an edge id. Looks up edge for given id and if not yet\n    present constructs it. Returns 2-elem vector of [edges edge].\"\n  [edges epoints id]\n  (let [e (edges id)]\n    (if e\n      [edges e]\n      (let [ep (epoints id), e (g/- (ep 0) (ep 1))]\n        [(assoc edges id e) e]))))\n\n(defn- check-faces-a\n  \"Takes the 4 delta vectors between the two tetras, edge definitions\n    of the 1st tetra, vertices of the 2nd, a reference point of the 1st\n    and a seq of specs, each encoding a specific check (either calls to\n    face-a* or edge-a). Returns vector of bitmasks or nil if fail early.\"\n  [deltas epoints verts p specs]\n  (loop [masks [], affine [], edges [nil nil nil nil nil], s specs]\n    (if s\n      (let [[f a b] (first s)]\n        (if (or (= :f f) (= :f* f))\n          (let [[edges ea] (get-edge edges epoints a)\n                [edges eb] (get-edge edges epoints b)\n                n (g/cross ea eb)\n                [m a] (if (= :f f)\n                        (face-a #(g/dot % n) deltas)\n                        (face-a #(subdot % p n) verts))]\n            (if (< m 15)\n              (recur (conj masks m) (conj affine a) edges (next s))))\n          (if-not (edge-a (masks a) (masks b) (affine a) (affine b))\n            (recur masks affine edges (next s)))))\n      masks)))\n\n(defn- check-faces-b\n  \"Much like check-faces-a, but for 2nd tetra and specs encoding calls to face-b1/2?.\n    Returns true if tetras do intersect.\"\n  [deltas epoints verts p specs]\n  (loop [edges [nil nil nil nil nil], s specs]\n    (if s\n      (let [[f a b] (first s)\n            [edges ea] (get-edge edges epoints a)\n            [edges eb] (get-edge edges epoints b)]\n        (if-not (if (= :f f)\n                  (face-b1? deltas (g/cross ea eb))\n                  (face-b2? verts p (g/cross ea eb)))\n          (recur edges (next s))))\n      true)))\n(defn intersect-tetrahedra?\n  \"Takes 2 seqs of 4 3D points, each defining a tetrahedron. Returns\n    true if they intersect. Orientation of points is irrelevant (unlike\n    in the original algorithm this implementation is based on).\"\n  [[pa pb pc pd :as p] [qa qb qc qd :as q]]\n  (let [masks (check-faces-a\n               (map #(g/- % pa) q)\n               [[pb pa] [pc pa] [pd pa] [pc pb] [pd pb]]\n               q pb [[:f 0 1] [:f 2 0] [:e 0 1] [:f 1 2]\n                     [:e 0 2] [:e 1 2] [:f* 4 3] [:e 0 3]\n                     [:e 1 3] [:e 2 3]])]\n    (if masks\n      (or (not= 15 (reduce bit-or masks))\n          (check-faces-b\n           (map #(g/- % qa) p)\n           [[qb qa] [qc qa] [qd qa] [qc qb] [qd qb]]\n           p qb [[:f 0 1] [:f 2 0] [:f 1 2] [:f* 4 3]])))))\n"]}