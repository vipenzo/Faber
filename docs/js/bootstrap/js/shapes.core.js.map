{"version":3,"sources":["shapes/core.cljs"],"mappings":"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":["shapes$core$IListen$_listen$dyn","x__4428__auto__","m__4429__auto__","shapes.core/-listen","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","shapes.core/IListen","this","listeners","var_args","G__48978","shapes.core/listen","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq48970","G__48971","cljs.core/first","cljs.core/next","G__48973","G__48974","G__48975","self__4723__auto__","event","listener","shape","event-1","listener-1","event-2","listener-2","args","cljs.core/last","cljs.core.into","cljs.core/butlast","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","shapes.core/Shape","shapes.core/->Shape","attrs","cljs.core.reduce","p__48989","vec__48990","cljs.core.nth","cljs.core.assoc","cljs.core.keyword","cljs.core/name","cljs.core.partition","k","cljs.core.get","not-found","key","val","cljs.core/contains?","cljs.core.dissoc","cljs.core/seq","writer","_","cljs.core.write_all","cljs.core.pr_str","shapes.core/assert-number","message","x","js/isNaN","js/Error","js/parseFloat","shapes.core/assert-number-range","x-min","x-max","x-parsed","shapes.core/circle","radius","shapes.core/rectangle","width","height","shapes.core/square","side","shapes.core/triangle","size","h","G__49024","shapes.core/image","src","shapes.core.image","shapes.core/text","the-text","cljs.core/count","args__4742__auto__","argseq__4743__auto__","shapes.core/path","seq49034","self__4724__auto__","points","shapes.core/assure-shape-seq","shape-or-shapes","G__49038","shapes.core/scale-points","factor","p1__49039#","cljs.core.map","shapes.core/points-bounds","pts","p__49040","p__49041","vec__49042","vec__49045","y-min","y-max","y","cljs.core.filter","cljs.core/number?","shapes.core/shape-bounds","or__4126__auto__","temp__5733__auto__","vec__49048","vec__49052","shapes.core/center-point","bounds","shapes.core/bounds","shapes","cljs.core.apply","cljs.core/max-key","shapes.core/points->string","cljs.core.partial","cljs.core/interpose","cljs.core.interpose","cljs.core/flatten","cljs.core/str","shapes.core/path-points->string","p1__49062#","cljs.core/Keyword","shapes.core/shape->vector","map__49068","cljs.core/deref","cljs.core/hash-map","kind","children","d","text","unkinded","p__49070","vec__49071","m","v","G__49074","cljs.core.update","G__49079","vec__49080","p1__49063#","vec__49083","p1__49065#","p1__49066#","p1__49067#","cljs.core/select-keys","cljs.core.mapv","shapes.core/to-hiccup","shapes.core/stroke","color","cljs.core._EQ_","shapes.core/no-stroke","shapes.core/fill","shapes.core/no-fill","shapes.core/colorize","shapes.core/scale","amount","G__49087","shapes.core/rotate","cljs.core.not_EQ_","shapes.core/move-points","new-x","new-y","old-x","old-y","p__49094","vec__49095","shapes.core/position","G__49104","shapes.core/layer","seq49105","shapes.core/beside","seq49110","cljs.core/reverse","state","cljs.core.conj","cljs.core/+","p1__49108#","shapes.core/above","seq49115","p1__49114#","shapes.core/opacity","o","shapes.core/rgb","red","green","blue","shapes.core/rgba","alpha","shapes.core/hsl","hue","saturation","lightness","shapes.core/hsla","shapes.core/rescale","value","old-min","old-max","new-min","new-max","old-spread","new-spread","shapes.core/color-names","p__49125","vec__49127","color-name"],"sourcesContent":["(ns shapes.core)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Support for _An Introduction to Racket with Pictures_-style pedagogy\n\n(defprotocol IListen\n  (-listen [this listeners]\n           \"Attach event listeners to shape.\"))\n\n(defn listen\n  ([event listener shape]\n   (-listen shape [event listener]))\n  ([event-1 listener-1\n    event-2 listener-2 & args]\n   (-listen (last args)\n            (into [event-1 listener-1\n                   event-2 listener-2]\n                  (butlast args)))))\n\n(deftype Shape [attrs]\n  IListen\n  (-listen [this listeners]\n    (new Shape (reduce (fn [attrs [event listener]]\n                         (assoc attrs (keyword (str \"on-\" (name event))) listener))\n                       attrs\n                       (partition 2 listeners))))\n  IDeref\n  (-deref [this] attrs)\n  ILookup\n  (-lookup [this k]\n    (get attrs k))\n  (-lookup [this k not-found]\n    (get attrs k not-found))\n  IAssociative\n  (-assoc [this key val]\n    (new Shape (assoc attrs key val)))\n  (-contains-key? [this key]\n    (contains? attrs key))\n  IMap\n  (-dissoc [this key]\n    (new Shape (dissoc attrs key)))\n  ISeqable\n  (-seq [this] (seq attrs))\n  IPrintWithWriter\n  (-pr-writer [this writer _]\n    (write-all writer (pr-str attrs))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; helpers for param checks\n\n(defn assert-number [message x]\n  (if (js/isNaN x)\n    (throw (js/Error. message))\n    (js/parseFloat x)))\n\n(defn assert-number-range [message x-min x-max x]\n  (let [x-parsed (assert-number message x)]\n    (if (<= x-min x-parsed x-max)\n      x-parsed\n      (throw (js/Error. message)))))\n\n(defn circle\n  \"Returns a circle of `radius`.\"\n  [radius]\n  (assert-number \"radius must be a number!\" radius)\n  (->Shape {:is-a   :shape\n            :kind   :circle\n            :r      radius\n            :cx     radius\n            :cy     radius\n            :stroke \"none\"\n            :fill   \"black\"}))\n\n(defn rectangle\n  \"Returns a rectangle of `width` and `height`.\"\n  [width height]\n  (assert-number \"width must be a number!\" width)\n  (assert-number \"height must be a number!\" height)\n  (->Shape {:is-a   :shape\n            :kind   :rect\n            :x      0\n            :y      0\n            :width  width\n            :height height\n            :stroke \"none\"\n            :fill   \"black\"}))\n\n(defn square\n  \"Returns a square of dimension `side`.\"\n  [side]\n  (assert-number \"side must be a number!\" side)\n  (rectangle side side))\n\n(defn triangle\n  \"Returns an equilateral triangle with sides of `size`.\"\n  [size]\n  (assert-number \"size must be a number!\" size)\n  (->Shape (let [h (* 0.8660259 size)]\n             {:is-a   :shape\n              :kind   :polygon\n              :x      0\n              :y      0\n              :width  size\n              :height size\n              :points [[0 size]\n                       [(/ size 2) (- size h)]\n                       [size size]]\n              :stroke \"none\"\n              :fill   \"black\"})))\n\n(defn image\n  \"Add an image to the drawing\"\n  ([src] (image 200 200 src))\n  ([size src]\n   (assert-number \"size must be a number!\" size)\n   (image size size src))\n  ([width height src]\n  (assert-number \"width must be a number!\" width)\n  (assert-number \"height must be a number!\" height)  \n   (->Shape {:kind   :image\n             :href   src\n             :width  width\n             :height height})))\n\n(defn text\n  \"Add a label containing `the-text` to a drawing.\"\n  [the-text]\n  (->Shape {:is-a        :shape\n            :kind        :text\n            :text        the-text\n            :x           0\n            :y           18\n            :font-family \"Fira Code\"\n            :font-size   15\n            :font-weight \"normal\"\n            :width       (* 9 (count the-text))\n            :height      18\n            :fill        \"#3f4245\"}))\n\n;; XXX no verification yet, too complicated for the moment\n(defn path\n  \"Create an arbitrary path from a set of points.\"\n  [& points]\n  (->Shape {:is-a   :shape\n            :kind   :path\n            :width  100\n            :height 100\n            :d      points\n            :stroke \"black\"\n            :fill   \"none\"}))\n\n;; TODO add general polygon fn\n;; TODO add spec annotations!\n\n(defn assure-shape-seq\n  \"Returns `shape-or-shapes` wrapped in a vector if it appears to be a single shape.\"\n  [shape-or-shapes]\n  (cond (instance? Shape shape-or-shapes) [shape-or-shapes]\n        (instance? Shape (first shape-or-shapes)) shape-or-shapes\n        :else (assure-shape-seq (first shape-or-shapes))))\n\n(defn scale-points\n  \"Scale a set of `points` by `factor`.\"\n  [points factor]\n  (map #(if (number? %) (* factor %) %) points))\n\n(defn points-bounds [pts]\n  (reduce (fn [[x-min y-min x-max y-max] [x y]]\n            [(if (< x x-min) x x-min)\n             (if (< y y-min) y y-min)\n             (if (> x x-max) x x-max)\n             (if (> y y-max) y y-max)])\n          [100000 100000 -100000 -100000]                   ;; buggy because not max positive/negative\n          (partition 2 (filter number? pts))))\n\n(defn shape-bounds\n  \"Returns a map containing :height :width keys that represent the outer (i.e. highest) x/y position for this shape.\"\n  [shape]\n  {:width  (+ (or (:x shape) 0)\n              (or (:cx shape) 0)\n              (or (:width shape) 0)\n              (or (:r shape) 0)\n              (if-let [pts (:d shape)]\n                (let [[x-min y-min x-max y-max] (points-bounds pts)]\n                  x-max)\n                0))\n   :height (+ (or (:y shape) 0)\n              (or (:cy shape) 0)\n              (or (:height shape) 0)\n              (or (:r shape) 0)\n              (if-let [pts (:d shape)]\n                (let [[x-min y-min x-max y-max] (points-bounds pts)]\n                  y-max)\n                0))})\n\n(defn center-point [shape]\n  (let [bounds (shape-bounds shape)]\n    [(+ (/ (- (:width bounds) (or (:x shape) 0)) 2) (or (:x shape) 0))\n     (+ (/ (- (:height bounds) (or (:y shape) 0)) 2) (or (:y shape) 0))]))\n\n(defn bounds\n  \"Returns a map containing :height :width keys that represent the outer (i.e. highest) x/y position for this group of shapes.\"\n  [shapes]\n  (let [shapes (assure-shape-seq shapes)\n        bounds (map shape-bounds shapes)]\n    {:width  (:width (apply max-key :width bounds))\n     :height (:height (apply max-key :height bounds))}))\n\n(defn points->string [pts]\n  (->> (map (partial interpose \",\") pts)\n       (interpose \" \")\n       flatten\n       (apply str)))\n\n(defn path-points->string [pts]\n  (->> (map #(if (keyword? %) (str (name %)) %) pts)\n       (interpose \" \")\n       (apply str)))\n\n;; TODO rotate can take two more numbers for the centrum, would\n;; probably be better for each thing to rotate around itself\n;; TODO SVG translation/rotation causes slipping, may need to re-calc bounds\n;; TODO re-implement this mess using a transform matrix\n(defn shape->vector [shape]\n  (let [{:keys [kind children d text] :as attrs} @shape\n        unkinded (dissoc attrs :is-a :kind)]\n    (into [kind (reduce                                     ;; clean up/preprocess the string-y bits of the SVG element\n                  (fn [m [k v]]\n                    (case k\n                      :d (update m :d path-points->string)\n                      :points (update m :points points->string)\n                      :rotate (case kind\n                                :path (let [[x-min y-min x-max y-max] (points-bounds d)]\n                                        (update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" (- x-max x-min) \",\" (- y-max y-min) \")\")))\n                                #_(update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" (:x attrs) \",\" (:y attrs) \")\"))\n                                (let [[x y] (center-point m)]\n                                  (update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" x \",\" y \")\"))))\n                      :translate (update m :transform #(str (or % \"\") \" translate(\" (apply str (interpose \",\" (:translate m))) \")\"))\n                      :scale (update m :transform #(str (or % \"\") \" scale(\" (:scale m) \")\"))\n                      m))\n                  unkinded\n                  (select-keys unkinded [:d :points :rotate :translate :scale]))\n           text]\n          (mapv shape->vector children))))\n\n(defn to-hiccup [shape]\n  [:svg (assoc (bounds shape) :x 0 :y 0)\n   (shape->vector shape)])\n\n(defn stroke\n  \"Return `shape` with its stroke set to `color`.\"\n  [color shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv (partial stroke color) (:children shape)))\n    (assoc shape :stroke color)))\n\n(defn no-stroke\n  \"Return `shape` with its stroke color turned off.\"\n  [shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv no-stroke (:children shape)))\n    (assoc shape :stroke \"none\")))\n\n(defn fill\n  \"Return `shape` with its fill set to `color`.\"\n  [color shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv (partial fill color) (:children shape)))\n    (assoc shape :fill color)))\n\n(defn no-fill\n  \"Return `shape` with its fill color turned off.\"\n  [shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv no-fill (:children shape)))\n    (assoc shape :fill \"none\")))\n\n(defn colorize\n  \"Return `shape` with its color set to `color`.\"\n  [color shape]\n  (stroke color shape)\n  (fill color shape))\n\n;; XXX SVG transforms are a fucking mess, so this needs to be fixed\n(defn scale\n  \"Return `shape` with rotated by `amount`.\"\n  [amount shape]\n  (assert-number \"amount must be a number!\" amount)\n  (case (:kind shape)\n    :path (update shape :d scale-points amount)\n    (assoc shape :scale amount)))\n\n;; XXX SVG transforms are a fucking mess, so this needs to be fixed\n(defn rotate\n  \"Return `shape` with rotated by `amount`.\"\n  [amount shape]\n  (assert-number \"amount must be a number!\" amount)\n  (if (not= :circle (:kind shape))\n    (assoc shape :rotate amount)))\n\n(defn move-points [m new-x new-y]\n  (let [old-x (:x m)\n        old-y (:y m)]\n    (assoc m :points (mapv (fn [[x y]]\n                             [(+ new-x (- x old-x))\n                              (+ new-y (- y old-y))])\n                           (:points m)))))\n\n(defn position\n  \"Return `shape` with its x and y positions set to `x` and `y`.\"\n  [x y shape]\n  (assert-number \"x must be a number!\" x)\n  (assert-number \"y must be a number!\" y)\n  (case (:kind shape)\n    :circle (-> shape\n                (assoc :cx x)\n                (assoc :cy y))\n    :polygon (-> (move-points shape x y)\n                 (assoc :x x)\n                 (assoc :y y))\n    :path (-> (assoc shape :translate [x y])\n              (assoc :x x)\n              (assoc :y y))\n    (-> shape\n        (assoc :x x)\n        (assoc :y y))))\n\n(defn layer\n  \"Returns a new shape with these `shapes` layered over each other.\"\n  [& shapes]\n  (->Shape (assoc (bounds shapes)\n             :is-a :shape\n             :kind :svg\n             :x 0\n             :y 0\n             :children shapes)))\n\n;; XXX broken for triangles!\n(defn beside\n  \"Return `shapes` with their positions adjusted so they're lined up beside one another.\"\n  [& shapes]\n  (->> (assure-shape-seq shapes)\n       reverse\n       (reduce (fn [state shape]\n                 {:out    (conj (state :out)\n                                (update shape (if (= (:kind shape) :circle)\n                                                :cx\n                                                :x) + (apply + (:widths state))))\n                  :widths (butlast (state :widths))})\n               {:out    '()\n                :widths (map #(if (= (:kind %) :circle)\n                                (:r %)\n                                (:width %))\n                             (map shape-bounds (butlast shapes)))})\n       :out\n       (apply layer)))\n\n(defn above\n  \"Return `shapes` with their positions adjusted so they're stacked above one another.\"\n  [& shapes]\n  (->> (assure-shape-seq shapes)\n       reverse\n       (reduce (fn [state shape]\n                 {:out     (conj (state :out)\n                                 (update shape (if (= (:kind shape) :circle)\n                                                 :cy\n                                                 :y) + (apply + (:heights state))))\n                  :heights (butlast (state :heights))})\n               {:out     '()\n                :heights (map #(if (= (:kind %) :circle)\n                                 (:r %)\n                                 (:height %))\n                              (map shape-bounds (butlast shapes)))})\n       :out\n       (apply layer)))\n\n;;;; from Henderson's functional geometry\n;; flip   : picture \u2192 picture (Flip a picture along its vertical center axis)\n;; rot    : picture \u2192 picture (Rotate a picture anti-clockwise by 90\u00b0)\n;; rot45  : picture \u2192 picture (rotate the picture anti-clockwise by 45\u00b0)\n\n;;;; from \"Creative Scala\" intro:\n;; \"click to reveal\" solutions are a good idea\n;; stroke vs fill? more complicated, but useful.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; color helpers and scaling fn\n\n(defn opacity\n  \"Set the opacity of the shape to `o`, which should be a decimal number between 0 and 1.0\"\n  [o shape]\n  (assert-number-range \"opacity must be a number between 0 and 1.0!\" 0 1.0 o)\n  (assoc shape :opacity (str o)))\n\n(defn rgb [red green blue]\n  \"Returns a color of `red`, `green`, `blue`, each represented as a number from (0-255).\"\n  (assert-number-range \"red must be a number between 0 and 255!\" 0 255 red)\n  (assert-number-range \"green must be a number between 0 and 255!\" 0 255 green)\n  (assert-number-range \"blue must be a number between 0 and 255!\" 0 255 blue)\n  (apply str \"rgb(\" red \",\" green \",\" blue \")\"))\n\n(defn rgba [red green blue alpha]\n  \"Returns a color of `red`, `green`, `blue`, each represented as a number from (0-255), with an opacity of `alpha` (0.0-1.0).\"\n  (assert-number-range \"red must be a number between 0 and 255!\" 0 255 red)\n  (assert-number-range \"green must be a number between 0 and 255!\" 0 255 green)\n  (assert-number-range \"blue must be a number between 0 and 255!\" 0 255 blue)\n  (assert-number-range \"alpha must be a number between 0 and 1.0!\" 0 1.0 alpha)\n  (apply str \"rgba(\" red \",\" green \",\" blue \",\" alpha \")\"))\n\n(defn hsl\n  \"Returns a color of `hue` (a number between 0-359 representing an angle on the color wheel), `saturation` percentage and `lightness` percentage.\"\n  [hue saturation lightness]\n  (assert-number-range \"hue must be a number between 0 and 359!\" 0 359 hue)\n  (assert-number-range \"saturation must be a number between 0 and 100!\" 0 100 saturation)\n  (assert-number-range \"lightness must be a number between 0 and 100!\" 0 100 lightness)\n  (apply str \"hsl(\" hue \",\" saturation \"%,\" lightness \"%)\"))\n\n(defn hsla\n  \"Returns a color of `hue` (a number between 0-359 representing an angle on the color wheel)/`saturation` (percentage)/`lightness` (percentage)/`alpha` (0.0-1.0).\"\n  [hue saturation lightness alpha]\n  (assert-number-range \"hue must be a number between 0 and 359!\" 0 359 hue)\n  (assert-number-range \"saturation must be a number between 0 and 100!\" 0 100 saturation)\n  (assert-number-range \"lightness must be a number between 0 and 100!\" 0 100 lightness)\n  (assert-number-range \"alpha must be a number between 0 and 1.0!\" 0 1.0 alpha)\n  (apply str \"hsla(\" hue \",\" saturation \"%,\" lightness \"%, \" alpha \")\"))\n\n(defn rescale \n  \"Rescales value from range [old-min, old-max] to [new-min, new-max]\"\n  [value old-min old-max new-min new-max]\n  (assert-number \"value must be a number!\" value)\n  (assert-number \"old-min must be a number!\" old-min)\n  (assert-number \"old-max must be a number!\" old-max)\n  (assert-number \"new-min must be a number!\" new-min)\n  (assert-number \"new-max must be a number!\" new-max)\n  (let [old-spread (- old-max old-min)\n        new-spread (- new-max new-min)]\n    (+ (* (- value old-min) (/ new-spread old-spread))\n       new-min)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; color name dictionary\n\n(def color-names\n  \"Recognized SVG color keyword names, mapped to their RGB value.\"\n  (mapv (fn [[color-name _]]\n          [color-name (colorize color-name (square 25))])\n        {\"aliceblue\"            [240, 248, 255]\n         \"antiquewhite\"         [250, 235, 215]\n         \"aqua\"                 [0, 255, 255]\n         \"aquamarine\"           [127, 255, 212]\n         \"azure\"                [240, 255, 255]\n         \"beige\"                [245, 245, 220]\n         \"bisque\"               [255, 228, 196]\n         \"black\"                [0, 0, 0]\n         \"blanchedalmond\"       [255, 235, 205]\n         \"blue\"                 [0, 0, 255]\n         \"blueviolet\"           [138, 43, 226]\n         \"brown\"                [165, 42, 42]\n         \"burlywood\"            [222, 184, 135]\n         \"cadetblue\"            [95, 158, 160]\n         \"chartreuse\"           [127, 255, 0]\n         \"chocolate\"            [210, 105, 30]\n         \"coral\"                [255, 127, 80]\n         \"cornflowerblue\"       [100, 149, 237]\n         \"cornsilk\"             [255, 248, 220]\n         \"crimson\"              [220, 20, 60]\n\n         \"cyan\"                 [0, 255, 255]\n         \"darkblue\"             [0, 0, 139]\n         \"darkcyan\"             [0, 139, 139]\n         \"darkgoldenrod\"        [184, 134, 11]\n         \"darkgray\"             [169, 169, 169]\n         \"darkgreen\"            [0, 100, 0]\n         \"darkgrey\"             [169, 169, 169]\n         \"darkkhaki\"            [189, 183, 107]\n         \"darkmagenta\"          [139, 0, 139]\n         \"darkolivegreen\"       [85, 107, 47]\n         \"darkorange\"           [255, 140, 0]\n         \"darkorchid\"           [153, 50, 204]\n         \"darkred\"              [139, 0, 0]\n         \"darksalmon\"           [233, 150, 122]\n         \"darkseagreen\"         [143, 188, 143]\n         \"darkslateblue\"        [72, 61, 139]\n         \"darkslategray\"        [47, 79, 79]\n         \"darkslategrey\"        [47, 79, 79]\n         \"darkturquoise\"        [0, 206, 209]\n\n         \"darkviolet\"           [148, 0, 211]\n         \"deeppink\"             [255, 20, 147]\n         \"deepskyblue\"          [0, 191, 255]\n         \"dimgray\"              [105, 105, 105]\n         \"dimgrey\"              [105, 105, 105]\n         \"dodgerblue\"           [30, 144, 255]\n         \"firebrick\"            [178, 34, 34]\n         \"floralwhite\"          [255, 250, 240]\n         \"forestgreen\"          [34, 139, 34]\n         \"fuchsia\"              [255, 0, 255]\n         \"gainsboro\"            [220, 220, 220]\n         \"ghostwhite\"           [248, 248, 255]\n         \"gold\"                 [255, 215, 0]\n         \"goldenrod\"            [218, 165, 32]\n         \"gray\"                 [128, 128, 128]\n         \"grey\"                 [128, 128, 128]\n         \"green\"                [0, 128, 0]\n         \"greenyellow\"          [173, 255, 47]\n         \"honeydew\"             [240, 255, 240]\n\n         \"hotpink\"              [255, 105, 180]\n         \"indianred\"            [205, 92, 92]\n         \"indigo\"               [75, 0, 130]\n         \"ivory\"                [255, 255, 240]\n         \"khaki\"                [240, 230, 140]\n         \"lavender\"             [230, 230, 250]\n         \"lavenderblush\"        [255, 240, 245]\n         \"lawngreen\"            [124, 252, 0]\n         \"lemonchiffon\"         [255, 250, 205]\n         \"lightblue\"            [173, 216, 230]\n         \"lightcoral\"           [240, 128, 128]\n         \"lightcyan\"            [224, 255, 255]\n         \"lightgoldenrodyellow\" [250, 250, 210]\n         \"lightgray\"            [211, 211, 211]\n         \"lightgreen\"           [144, 238, 144]\n         \"lightgrey\"            [211, 211, 211]\n         \"lightpink\"            [255, 182, 193]\n         \"lightsalmon\"          [255, 160, 122]\n         \"lightseagreen\"        [32, 178, 170]\n         \"lightskyblue\"         [135, 206, 250]\n         \"lightslategray\"       [119, 136, 153]\n\n         \"lightslategrey\"       [119, 136, 153]\n         \"lightsteelblue\"       [176, 196, 222]\n         \"lightyellow\"          [255, 255, 224]\n         \"lime\"                 [0, 255, 0]\n         \"limegreen\"            [50, 205, 50]\n         \"linen\"                [250, 240, 230]\n         \"magenta\"              [255, 0, 255]\n         \"maroon\"               [128, 0, 0]\n         \"mediumaquamarine\"     [102, 205, 170]\n         \"mediumblue\"           [0, 0, 205]\n         \"mediumorchid\"         [186, 85, 211]\n         \"mediumpurple\"         [147, 112, 219]\n         \"mediumseagreen\"       [60, 179, 113]\n         \"mediumslateblue\"      [123, 104, 238]\n         \"mediumspringgreen\"    [0, 250, 154]\n         \"mediumturquoise\"      [72, 209, 204]\n         \"mediumvioletred\"      [199, 21, 133]\n         \"midnightblue\"         [25, 25, 112]\n         \"mintcream\"            [245, 255, 250]\n         \"mistyrose\"            [255, 228, 225]\n         \"moccasin\"             [255, 228, 181]\n         \"navajowhite\"          [255, 222, 173]\n         \"navy\"                 [0, 0, 128]\n\n         \"oldlace\"              [253, 245, 230]\n         \"olive\"                [128, 128, 0]\n         \"olivedrab\"            [107, 142, 35]\n         \"orange\"               [255, 165, 0]\n         \"orangered\"            [255, 69, 0]\n         \"orchid\"               [218, 112, 214]\n         \"palegoldenrod\"        [238, 232, 170]\n         \"palegreen\"            [152, 251, 152]\n         \"paleturquoise\"        [175, 238, 238]\n         \"palevioletred\"        [219, 112, 147]\n         \"papayawhip\"           [255, 239, 213]\n         \"peachpuff\"            [255, 218, 185]\n         \"peru\"                 [205, 133, 63]\n         \"pink\"                 [255, 192, 203]\n         \"plum\"                 [221, 160, 221]\n         \"powderblue\"           [176, 224, 230]\n         \"purple\"               [128, 0, 128]\n         \"red\"                  [255, 0, 0]\n         \"rosybrown\"            [188, 143, 143]\n         \"royalblue\"            [65, 105, 225]\n         \"saddlebrown\"          [139, 69, 19]\n         \"salmon\"               [250, 128, 114]\n         \"sandybrown\"           [244, 164, 96]\n         \"seagreen\"             [46, 139, 87]\n         \"seashell\"             [255, 245, 238]\n         \"sienna\"               [160, 82, 45]\n\n         \"silver\"               [192, 192, 192]\n         \"skyblue\"              [135, 206, 235]\n         \"slateblue\"            [106, 90, 205]\n         \"slategray\"            [112, 128, 144]\n         \"slategrey\"            [112, 128, 144]\n         \"snow\"                 [255, 250, 250]\n         \"springgreen\"          [0, 255, 127]\n         \"steelblue\"            [70, 130, 180]\n         \"tan\"                  [210, 180, 140]\n         \"teal\"                 [0, 128, 128]\n         \"thistle\"              [216, 191, 216]\n         \"tomato\"               [255, 99, 71]\n         \"turquoise\"            [64, 224, 208]\n         \"violet\"               [238, 130, 238]\n         \"wheat\"                [245, 222, 179]\n         \"white\"                [255, 255, 255]\n         \"whitesmoke\"           [245, 245, 245]\n         \"yellow\"               [255, 255, 0]\n         \"yellowgreen\"          [154, 205, 50]}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; pre-cooked SVG shapes\n\n;; (def fish\n;;   \"An Escher-style fish.\"\n;;   {:is-a   :shape\n;;    :kind   :path\n;;    :width  100\n;;    :height 100\n;;    :d      [:M 9.67 40.17 :C 6.86 37.67 4.49 35.56 2.63 32.93 :c 0 -0.12 0.17 -0.54 0.37 -0.94 :c 1.15 -2.28 2.17 -3.75 4.73 -6.83 :l 1.37 -1.64 :l -0.07 -0.7 :C 8.65 18.39 8.87 15.11 9.97 10.9 :C 10.11 9.63 10.41 10.28 12.04 11.5 :C 13.89 12.99 15.6 13.84 17.34 16.64 :l 2.17 0.09 :c 2.46 0.11 3.46 0.27 4.87 0.72 :l 1.06 0.34 :c 0.01 1.38 0.02 2.76 0.03 4.15 :c 0.01 1.19 0.02 2.38 0.03 3.57 :c -1.23 1.23 -2.53 2.71 -3.76 3.94 :c 1.65 2.68 6.11 4.18 9.99 4.57 :l 1.6 0.14 :l 1.12 1.32 :c 1.26 1.48 2.04 2.15 4.23 3.65 :l 1.52 1.04 :c 0.16 0.09 0.97 0.57 -0.18 0.46 :l -2.26 -0.43 :c -3.09 -0.59 -4.51 -0.78 -5.89 -0.78 :c -1.1 -0 -3.28 0.14 -4.34 0.29 :c -0.45 0.06 -0.52 0.03 -1.64 -0.91 :c -3.5 -2.93 -4.67 -3.77 -6.86 -4.93 :l -1.23 -0.66 :c -2.44 2.44 -4.88 4.88 -7.32 7.32 :c -0.26 0.37 -0.82 -0.35 -0.82 -0.35 :z :M 17.41 33.02 :C 16.08 32.32 14.9 31.64 13.36 30.72 :l -0.79 0.76 :c -0.41 0.4 -1.24 0.97 -1.7 1.43 :c -0.74 0.73 -0.93 1.02 -1.58 2.38 :c -0.68 1.41 -1.04 1.88 -1.03 1.34 :c 0 -0.35 1.35 -2.99 1.85 -3.62 :C 10.36 32.68 11.14 32.01 11.81 31.49 :l 1.26 -0.97 :c -0.49 -0.45 -0.94 -0.85 -1.33 -1.29 :c -0.15 -0.06 -2 1.44 -2.65 2.15 :c -0.34 0.37 -1.01 1.32 -1.51 2.12 :c -0.83 1.34 -1.21 1.74 -1.21 1.27 :c 0 -0.24 1.41 -2.49 2.13 -3.41 :c 0.31 -0.39 0.99 -1.05 1.52 -1.47 :c 0.53 -0.41 1.34 -0.98 1.48 -1.09 :C 10.33 26.87 9.96 25.63 9.24 24.03 :l -1.64 2 :c -2.16 2.63 -2.79 3.52 -3.79 5.35 :l -0.83 1.52 :c 0.7 0.58 4.85 5.64 7.26 7.21 :C 12.8 37.65 14.7 35.72 17.41 33.02 :z :M 9.31 38.59 :C 10.54 36.67 13.23 32.93 14.9 31.91 :c -1.08 1.8 -3.52 3.88 -4.84 6.19 :c -0.21 0.37 -0.42 0.61 -0.55 0.61 :c -0.11 0 -0.21 -0.05 -0.21 -0.12 :z :M 4.85 33.31 :c 0 -0.24 1.31 -2.7 1.75 -3.28 :c 0.74 -0.92 3.91 -4.13 4.01 -3.17 :c -1.95 1.23 -4.25 3.78 -5.05 5.85 :c -0.2 0.4 -0.45 0.73 -0.54 0.73 :c -0.1 0 -0.17 -0.06 -0.17 -0.13 :z :m 32.97 5.78 :c -1.94 -1.35 -3.1 -2.45 -4.44 -4.17 :c -0.25 -0.32 -0.31 -0.33 -2.4 -0.55 :c -4.84 -0.43 -9.35 -2.98 -10.59 -6.68 :c -2.28 -5.68 -0.94 -9.92 -6.21 -14.17 :c -0.45 -0.37 -1.49 -1.13 -2.3 -1.69 :L 10.39 10.81 :C 9.03 15.59 8.84 20.53 9.71 23.84 :c 0.58 2.22 1.63 4.4 3.24 5.81 :c 2.36 2.07 8.78 4.31 14.24 9.65 :l 0.64 -0.06 :c 4.11 -0.38 5.35 -0.34 8.91 0.34 :c 1.13 0.21 2.13 0.4 2.22 0.4 :c 0.09 0.01 -0.42 -0.39 -1.14 -0.89 :z :m -6.77 -2.06 :C 23.62 34.03 21.59 33.07 19.55 31.02 :C 16.84 27.84 15.3 24.33 13.75 20.48 :c -0.78 -2.92 0.56 0.34 0.97 1.38 :c 0.96 2.41 2.05 4.09 2.89 5.63 :c 2.35 4.33 5.52 5.98 14.71 9.58 :c 1.52 0.6 2.43 1.03 2.43 1.13 :c 0 0.09 -0.09 0.16 -0.21 0.16 :c -0.11 -0 -1.68 -0.6 -3.49 -1.33 :z :M 10.68 20.22 :C 10.61 19.64 10.41 15.52 11.2 15.35 :c 0.18 -0.03 0.37 0.24 0.55 0.63 :c 0.35 0.75 0.66 1.92 0.74 2.18 :l 0.25 1.01 :C 11.86 19.74 11.2 20.55 10.95 20.52 :C 10.81 20.53 10.73 20.43 10.68 20.22 :z :M 10.97 20.02 :C 11.43 19.57 12.15 19.2 12.4 18.97 :C 11.85 16.61 11.44 15.7 11.24 15.8 :C 10.92 16.97 10.89 18.45 10.97 20.02 :z :M 12.82 14.72 :c 0.33 -0.29 3.16 2.32 3.16 2.63 :c 0 0.06 -0.51 0.36 -1.08 0.63 :c -0.41 0.19 -1 0.47 -1.1 0.47 :c -0.28 -0.27 -1.11 -3.56 -0.98 -3.73 :z :m 0.39 0.5 :c -0.22 -0.15 0.41 2.12 0.67 2.84 :c 0.94 -0.27 1.68 -0.82 1.67 -0.86 :C 14.96 16.6 13.62 15.41 13.2 15.22 :z :m 7.37 10.36 :c -0.29 0 -0.08 -0.36 0.57 -0.98 :c 0.27 -0.25 0.5 -0.46 0.73 -0.61 :c 0.59 -0.4 1.13 -0.53 2.08 -0.55 :l 1.06 -0.02 :c -0.01 -0.49 0.04 -1.15 -0.09 -1.54 :c -0.05 0.03 -0.65 -0.17 -1.07 -0.25 :c -1.23 -0.26 -1.58 -0.14 -2.54 0.32 :c -0.92 0.44 -1.11 0.57 -1.11 0.33 :c 0 -0.08 0.43 -0.36 0.95 -0.62 :c 0.86 -0.42 1.03 -0.46 1.79 -0.44 :c 0.46 0.01 1.11 0.13 1.45 0.19 :l 0.68 0.12 :c 0.01 -0.14 0.02 -0.4 0.04 -0.67 :c 0.02 -0.42 0.03 -0.87 -0 -1 :c -0.99 -0.46 -2.15 -0.84 -3.07 -0.85 :c -0.97 -0.01 -1.86 0 -2.58 0.3 :c -0.32 0.13 -0.5 0.35 -0.75 0.62 :c 0.41 1.7 1.43 7.99 2.76 9.21 :c 1.16 -1.16 2.37 -2.56 3.53 -3.72 :c 0.23 -0.8 0.08 -1.62 -0.06 -1.65 :c -2.29 -0.53 -3.69 0.99 -4.39 1.82 :z :m 4.44 -7.47 :m -0.63 -0.22 :m -1.18 -0.42 :C 22.66 17.28 22.13 17.18 21.55 17.12 :C 20.88 17.06 20.14 17.04 19.22 16.96 :C 18.7 16.92 17.65 16.91 17.5 16.88 :c 0.15 0.31 0.32 0.65 0.49 1.01 :c 0.26 0.54 0.51 1.11 0.62 1.62 :c 0.81 -0.55 1.58 -0.71 2.31 -0.77 :c 0.87 -0.08 1.89 0.1 2.69 0.3 :c 0.69 0.17 1.21 0.35 1.32 0.38 :c 0.13 0.04 0.15 -0.14 0.14 -0.42 :c -0.01 -0.25 -0.05 -0.59 -0.05 -0.89 :z :m 1.48 13.43 :c -0.34 -0.09 -0.81 -0.37 -1.21 -0.71 :c -0.22 -0.19 -0.43 -0.41 -0.57 -0.62 :c -0.12 -0.18 -0.2 -0.35 -0.21 -0.51 :c -0.03 -0.38 0.5 0.46 0.88 0.85 :c 0.13 0.13 0.3 0.25 0.48 0.36 :c 0.36 0.21 0.77 0.39 0.98 0.58 :c -0.01 0.09 -0.14 0.15 -0.36 0.05 :z :m -0.18 -2.17 :c -0.12 -0.08 -0.23 -0.13 -0.33 -0.27 :c -0.13 -0.16 -0.23 -0.36 -0.31 -0.55 :c -0.17 -0.42 -0.28 -0.79 -0.05 -0.79 :c 0.06 0 0.15 0.23 0.24 0.46 :c 0.06 0.16 0.12 0.31 0.16 0.39 :c 0.1 0.19 0.34 0.43 0.53 0.53 :c 0.09 0.46 -0.16 0.28 -0.24 0.23 :z]\n;;    :stroke \"black\"\n;;    :fill   \"none\"})\n"]}