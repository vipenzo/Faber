{"version":3,"sources":["re_view/core$macros.cljc"],"mappings":"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","names":["re-view.core$macros/js-obj-with-set!","m","temp__5735__auto__","cljs.core/seq","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","sym","cljs.core.gensym","exprs","cljs.core.map","p__27210","vec__27211","cljs.core.nth","k","v","cljs.core.symbol","re-view.util/camelCase","cljs.core/name","re-view.core$macros/group-methods","methods","cljs.core/reduce-kv","cljs.core/assoc-in","G__27218","cljs.core/Keyword","G__27219","cljs.core/namespace","cljs.core.update","re-view.core$macros/parse-view-args","args","re-view.util/parse-opt-args","cljs.core/symbol?","cljs.core/string?","cljs.core/map?","G__27223","cljs.core/first","cljs.core.assoc","re-view.core$macros/display-name","ns","given-name","cljs.core/last","clojure.string.split","cljs.core/ns-name","p__27227","vec__27228","seq__27229","first__27230","cljs.core/next","cljs.core.apply","cljs.core/array-map","re-view.core$macros/wrap-body","name","body","js/Error","cljs.core/vector?","cljs.core.drop_last","ret__4785__auto__","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-view.core$macros/defview","&form","&env","seq27238","G__27239","G__27240","self__4723__auto__","vec__27241","view-name","docstring","_","cljs.core/Symbol","cljs.core.merge","cljs.core/*ns*","G__27248","re-view.core$macros/view","seq27252","G__27253","G__27254","vec__27261","re-view.core$macros/defn","seq27270","G__27271","G__27272","vec__27273","re-view.core$macros/extend-view","seq27283","G__27284","G__27285","G__27286","view"],"sourcesContent":["(ns ^:figwheel-always re-view.core\n  (:refer-clojure :exclude [defn])\n  (:require [clojure.string :as string]\n            [re-view.util :as util :refer [camelCase]]))\n\n(clojure.core/defn- js-obj-with-set!\n  \"Convert a Clojure map to javascript object using `set!`, to play well with Closure Compiler.\n  Keys are converted to camelCase. Shallow.\"\n  [m]\n  (when-let [m (seq m)]\n    (let [sym (gensym)\n          exprs (map (fn [[k v]]\n                       `(~'set! (~(symbol (str \".-\" (camelCase (name k)))) ~sym) ~v)) m)]\n      `(let [~sym (~'js-obj)]\n         ~@exprs\n         ~sym))))\n\n#_(clojure.core/defn- js-obj-camelCase\n    \"Return a javascript object for m with keys as camelCase strings (keys will not be recognized by Closure compiler).\"\n    [m]\n    (when-let [m (seq m)]\n      `(~'js-obj ~@(mapcat (fn [[k v]] (list (camelCase (name k)) v)) m))))\n\n(clojure.core/defn group-methods\n  \"Groups methods by role in a React component.\"\n  [methods]\n  (-> (reduce-kv (fn [m k v]\n                   (assoc-in m [(case k (:key :display-name :docstring) :react-keys\n                                        (case (namespace k)\n                                          \"spec\" :class-keys\n                                          \"view\" :lifecycle-keys\n                                          :instance-keys)) k] v)) {} methods)\n      ;; instance keys are accessed via dot notation.\n      ;; must use set! for the keys, otherwise they will\n      ;; be modified in advanced compilation.\n      (update :instance-keys js-obj-with-set!)\n\n      ;; this won't last - currently building :view/default-props\n      ;; in the macro so there's no way to reuse specs.\n      ))\n\n(clojure.core/defn parse-view-args [args]\n  (let [args (util/parse-opt-args [symbol? string? map?] args)]\n    (cond-> args\n            (nil? (first args)) (assoc 0 (gensym)))))\n\n(clojure.core/defn display-name\n  \"Generate a meaningful name to identify React components while debugging\"\n  [ns given-name]\n  (str (last (string/split (name (ns-name ns)) #\"\\.\")) \"/\" given-name))\n\n(clojure.core/defn wrap-body\n  \"Wrap body in anonymous function form.\"\n  [name [args & body]]\n  (assert (vector? args))\n  `(~'fn ~name ~args\n     (do ~@(drop-last body)\n         (~'re-view.hiccup.core/element ~(last body) {:wrap-props ~'re-view.core/wrap-props}))))\n\n(defmacro defview\n  \"Define a view function.\n\n   Expects optional docstring and methods map, followed by\n    the argslist and body for the render function, which should\n    return a Hiccup vector or React element.\"\n  [& args]\n  (let [[view-name docstring methods body] (parse-view-args args)\n        _ (assert (symbol? view-name))\n        methods (-> methods\n                    (merge {:docstring    docstring\n                            :display-name (display-name *ns* view-name)\n                            :view/render  (wrap-body view-name body)})\n                    (group-methods))]\n    `(let [the-class# (~'re-view.core/class* ~methods)]\n       (def ~(symbol (str view-name \"Class\")) the-class#)\n       (def ~view-name ~@(some-> docstring (list)) (~'re-view.core/factory the-class#)))))\n\n(defmacro view\n  \"Returns anonymous view, given the same args as `defview`.\"\n  [& args]\n  (let [[view-name docstring methods body] (parse-view-args args)\n        methods (-> methods\n                    (merge {:docstring    docstring\n                            :display-name (display-name *ns* view-name)\n                            :view/render  (wrap-body view-name body)})\n                    (group-methods))]\n    `(~'re-view.core/view* ~methods)))\n\n(defmacro defn\n  \"Defines a stateless view function\"\n  [& args]\n  (let [[view-name docstring methods body] (parse-view-args args)]\n    `(clojure.core/defn ~view-name ~@(if docstring [docstring] [])\n       [& args#]\n       (apply ~(wrap-body view-name body) (if (map? (first args#)) args# (cons {} args#))))))\n\n(defmacro extend-view [view & args]\n  `(let [prototype# (:prototype (~'goog.object/get ~view \"re$view$base\"))]\n     (clojure.core/specify! prototype# ~@args)))\n\n(comment\n  (assert (= (parse-view-args '(name \"a\" {:b 1} [c] 1 2))\n             '[name \"a\" {:b 1} ([c] 1 2)]))\n\n  (assert (= (parse-view-args '(name {} [] 1 2))\n             '[name nil {} ([] 1 2)]))\n\n  (assert (= (parse-view-args '(name \"a\" [] 1 2))\n             '[name \"a\" nil ([] 1 2)]))\n\n  (assert (= (parse-view-args '(name [] 1 2))\n             '[name nil nil ([] 1 2)]))\n\n  (assert (= (parse-view-args '(name []))\n             '[name nil nil ([])])))\n"]}