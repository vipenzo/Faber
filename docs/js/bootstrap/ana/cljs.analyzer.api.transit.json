["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","~:file","cljs/analyzer/api.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$find-ns","~$remove-ns","~$ns-publics","~$ns-resolve","~$ns-interns","~$all-ns","~$resolve"]],"~:name","~$cljs.analyzer.api","~:imports",null,"~:requires",["^ ","~$cljs.analyzer","^N","~$ana","^N","~$cljs.env","^P","~$env","^P","^=","^=","~$goog","^R"],"~:seen",["^B",["~:require"]],"~:shadow/js-access-global",["^B",["Error"]],"~:uses",null,"~:defs",["^ ","^C",["^ ","~:protocol-inline",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",220,"^6",7,"^7",220,"^8",14,"~:arglists",["~#list",["~$quote",["^Z",[["~$sym"],["~$state","^10"]]]]],"^3","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^10"],["^11","^10"]],"^Y",["^Z",[["^10"],["^11","^10"]]],"~:arglists-meta",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/find-ns","^4","cljs/analyzer/api.cljc","^8",14,"^12",["^ ","^13",false,"^14",2,"^15",2,"^16",[["^10"],["^11","^10"]],"^Y",["^Z",[["^10"],["^11","^10"]]],"^17",["^Z",[null,null]]],"^16",[["^10"],["^11","^10"]],"~:protocol-impl",null,"^14",2,"^17",["^Z",[null,null]],"^6",1,"^13",false,"~:methods",[["^ ","^14",1,"^13",false,"~:tag","~$any"],["^ ","^14",2,"^13",false,"^1;",["^B",[null,"^1<"]]]],"^5",220,"^7",220,"^15",2,"~:fn-var",true,"^Y",["^Z",[["^10"],["^11","^10"]]],"^3","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns."],"^D",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",262,"^6",7,"^7",262,"^8",16,"^Y",["^Z",["^[",["^Z",[["~$ns"],["^11","^1>"]]]]],"^3","Removes the namespace named by the symbol.","^12",["^ ","^13",false,"^14",2,"^15",2,"^16",[["^1>"],["^11","^1>"]],"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^17",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/remove-ns","^4","cljs/analyzer/api.cljc","^8",16,"^12",["^ ","^13",false,"^14",2,"^15",2,"^16",[["^1>"],["^11","^1>"]],"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^17",["^Z",[null,null]]],"^16",[["^1>"],["^11","^1>"]],"^19",null,"^14",2,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^1:",[["^ ","^14",1,"^13",false,"^1;","^1<"],["^ ","^14",2,"^13",false,"^1;",["^B",[null,"^1<"]]]],"^5",262,"^7",262,"^15",2,"^1=",true,"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^3","Removes the namespace named by the symbol."],"^E",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",240,"^6",7,"^7",240,"^8",17,"^Y",["^Z",["^[",["^Z",[["^1>"],["^11","^1>"]]]]],"^3","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","^12",["^ ","^13",false,"^14",2,"^15",2,"^16",[["^1>"],["^11","^1>"]],"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^17",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/ns-publics","^4","cljs/analyzer/api.cljc","^8",17,"^12",["^ ","^13",false,"^14",2,"^15",2,"^16",[["^1>"],["^11","^1>"]],"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^17",["^Z",[null,null]]],"^16",[["^1>"],["^11","^1>"]],"^19",null,"^14",2,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^1:",[["^ ","^14",1,"^13",false,"^1;","^1<"],["^ ","^14",2,"^13",false,"^1;",["^B",[null,"~$clj","^1<"]]]],"^5",240,"^7",240,"^15",2,"^1=",true,"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^3","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars."],"~$get-options",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",102,"^6",7,"^7",102,"^8",18,"^Y",["^Z",["^[",["^Z",[[],["^11"]]]]],"^3","Return the compiler options from compiler state.","^12",["^ ","^13",false,"^14",1,"^15",1,"^16",[[],["^11"]],"^Y",["^Z",[[],["^11"]]],"^17",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/get-options","^4","cljs/analyzer/api.cljc","^8",18,"^12",["^ ","^13",false,"^14",1,"^15",1,"^16",[[],["^11"]],"^Y",["^Z",[[],["^11"]]],"^17",["^Z",[null,null]]],"^16",[[],["^11"]],"^19",null,"^14",1,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^1:",[["^ ","^14",0,"^13",false,"^1;","^1<"],["^ ","^14",1,"^13",false,"^1;",["^B",["^1<","~$clj-nil"]]]],"^5",102,"^7",102,"^15",1,"^1=",true,"^Y",["^Z",[[],["^11"]]],"^3","Return the compiler options from compiler state."],"~$warning-message",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",91,"^6",7,"^7",91,"^8",22,"^Y",["^Z",["^[",["^Z",[["~$warn-type","~$warn-info"]]]]],"^3","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"^J","~$cljs.analyzer.api/warning-message","^4","cljs/analyzer/api.cljc","^8",22,"^16",["^Z",[["^1F","^1G"]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",91,"~:ret-tag","^1<","^7",91,"^15",2,"^1=",true,"^Y",["^Z",["^[",["^Z",[["^1F","^1G"]]]]],"^3","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"~$warning-enabled?",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",69,"^6",7,"^7",69,"^8",23,"^Y",["^Z",["^[",["^Z",[["~$warning-type"]]]]],"^3","Test if the given warning-type is enabled."],"^J","~$cljs.analyzer.api/warning-enabled?","^4","cljs/analyzer/api.cljc","^8",23,"^16",["^Z",[["^1K"]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",69,"^1I","^1<","^7",69,"^15",1,"^1=",true,"^Y",["^Z",["^[",["^Z",[["^1K"]]]]],"^3","Test if the given warning-type is enabled."],"~$current-state",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",36,"^6",7,"^7",36,"^8",20,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Return the current compiler state atom."],"^J","~$cljs.analyzer.api/current-state","^4","cljs/analyzer/api.cljc","^8",20,"^16",["^Z",[[]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",36,"^1I","^1<","^7",36,"^15",0,"^1=",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Return the current compiler state atom."],"^F",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",253,"^6",7,"^7",253,"^8",17,"^Y",["^Z",["^[",["^Z",[["^1>","^10"],["^11","^1>","^10"]]]]],"^3","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","^12",["^ ","^13",false,"^14",3,"^15",3,"^16",[["^1>","^10"],["^11","^1>","^10"]],"^Y",["^Z",[["^1>","^10"],["^11","^1>","^10"]]],"^17",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/ns-resolve","^4","cljs/analyzer/api.cljc","^8",17,"^12",["^ ","^13",false,"^14",3,"^15",3,"^16",[["^1>","^10"],["^11","^1>","^10"]],"^Y",["^Z",[["^1>","^10"],["^11","^1>","^10"]]],"^17",["^Z",[null,null]]],"^16",[["^1>","^10"],["^11","^1>","^10"]],"^19",null,"^14",3,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^1:",[["^ ","^14",2,"^13",false,"^1;","^1<"],["^ ","^14",3,"^13",false,"^1;",["^B",[null,"^1<"]]]],"^5",253,"^7",253,"^15",3,"^1=",true,"^Y",["^Z",[["^1>","^10"],["^11","^1>","^10"]]],"^3","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var."],"~$enabled-warnings",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",97,"^6",7,"^7",97,"^8",23,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Get the enabled warning types."],"^J","~$cljs.analyzer.api/enabled-warnings","^4","cljs/analyzer/api.cljc","^8",23,"^16",["^Z",[[]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",97,"^1I","^1<","^7",97,"^15",0,"^1=",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Get the enabled warning types."],"~$empty-state",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",25,"^6",7,"^7",25,"^8",18,"^Y",["^Z",["^[",["^Z",[[],["~$opts"]]]]],"^3","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","^12",["^ ","^13",false,"^14",1,"^15",1,"^16",[[],["^1S"]],"^Y",["^Z",[[],["^1S"]]],"^17",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/empty-state","^4","cljs/analyzer/api.cljc","^8",18,"^12",["^ ","^13",false,"^14",1,"^15",1,"^16",[[],["^1S"]],"^Y",["^Z",[[],["^1S"]]],"^17",["^Z",[null,null]]],"^16",[[],["^1S"]],"^19",null,"^14",1,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^1:",[["^ ","^14",0,"^13",false,"^1;","^1<"],["^ ","^14",1,"^13",false,"^1;","~$cljs.core/Atom"]],"^5",25,"^7",25,"^15",1,"^1=",true,"^Y",["^Z",[[],["^1S"]]],"^3","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options"],"~$default-passes",["^ ","^2",["^ ","^4","cljs/analyzer/api.cljc","^5",117,"^6",3,"^7",117,"^8",17,"^3","ClojureScript's default analysis passes."],"^J","~$cljs.analyzer.api/default-passes","^4","cljs/analyzer/api.cljc","^8",17,"^6",1,"^5",115,"^7",117,"^1;","~$cljs.core/IVector","^3","ClojureScript's default analysis passes."],"~$empty-env",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",57,"^6",7,"^7",57,"^8",16,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Creates an empty analysis environment."],"^J","~$cljs.analyzer.api/empty-env","^4","cljs/analyzer/api.cljc","^8",16,"^16",["^Z",[[]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",57,"^1I","^1<","^7",57,"^15",0,"^1=",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Creates an empty analysis environment."],"~$default-warning-handler",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",74,"^6",7,"^7",74,"^8",30,"^Y",["^Z",["^[",["^Z",[["^1K","^Q","~$extra"]]]]],"^3","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^J","~$cljs.analyzer.api/default-warning-handler","^4","cljs/analyzer/api.cljc","^8",30,"^16",["^Z",[["^1K","^Q","^20"]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",74,"^1I",["^B",[null,"^1D"]],"^7",74,"^15",3,"^1=",true,"^Y",["^Z",["^[",["^Z",[["^1K","^Q","^20"]]]]],"^3","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^G",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",229,"^6",7,"^7",229,"^8",17,"^Y",["^Z",["^[",["^Z",[["^1>"],["^11","^1>"]]]]],"^3","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","^12",["^ ","^13",false,"^14",2,"^15",2,"^16",[["^1>"],["^11","^1>"]],"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^17",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/ns-interns","^4","cljs/analyzer/api.cljc","^8",17,"^12",["^ ","^13",false,"^14",2,"^15",2,"^16",[["^1>"],["^11","^1>"]],"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^17",["^Z",[null,null]]],"^16",[["^1>"],["^11","^1>"]],"^19",null,"^14",2,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^1:",[["^ ","^14",1,"^13",false,"^1;","^1<"],["^ ","^14",2,"^13",false,"^1;",["^B",["^1<","^1D"]]]],"^5",229,"^7",229,"^15",2,"^1=",true,"^Y",["^Z",[["^1>"],["^11","^1>"]]],"^3","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars."],"^H",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",212,"^6",7,"^7",212,"^8",13,"^Y",["^Z",["^[",["^Z",[[],["^11"]]]]],"^3","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","^12",["^ ","^13",false,"^14",1,"^15",1,"^16",[[],["^11"]],"^Y",["^Z",[[],["^11"]]],"^17",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/all-ns","^4","cljs/analyzer/api.cljc","^8",13,"^12",["^ ","^13",false,"^14",1,"^15",1,"^16",[[],["^11"]],"^Y",["^Z",[[],["^11"]]],"^17",["^Z",[null,null]]],"^16",[[],["^11"]],"^19",null,"^14",1,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^1:",[["^ ","^14",0,"^13",false,"^1;","^1<"],["^ ","^14",1,"^13",false,"^1;",["^B",["~$cljs.core/KeySeq","^1D"]]]],"^5",212,"^7",212,"^15",1,"^1=",true,"^Y",["^Z",[[],["^11"]]],"^3","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances."],"~$current-file",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",41,"^6",7,"^7",41,"^8",19,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Return the current file under analysis or compilation."],"^J","~$cljs.analyzer.api/current-file","^4","cljs/analyzer/api.cljc","^8",19,"^16",["^Z",[[]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",41,"^1I","^1<","^7",41,"^15",0,"^1=",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Return the current file under analysis or compilation."],"~$current-ns",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",46,"^6",7,"^7",46,"^8",17,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Return the current ns under analysis or compilation."],"^J","~$cljs.analyzer.api/current-ns","^4","cljs/analyzer/api.cljc","^8",17,"^16",["^Z",[[]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",46,"^1I","^1<","^7",46,"^15",0,"^1=",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^3","Return the current ns under analysis or compilation."],"^I",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",200,"^6",7,"^7",200,"^8",14,"^Y",["^Z",["^[",["^Z",[["^Q","^10"]]]]],"^3","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"^J","~$cljs.analyzer.api/resolve","^4","cljs/analyzer/api.cljc","^8",14,"^16",["^Z",[["^Q","^10"]]],"^19",null,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^5",200,"^7",200,"^15",2,"^1=",true,"^Y",["^Z",["^[",["^Z",[["^Q","^10"]]]]],"^3","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"~$get-js-index",["^ ","^X",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",108,"^6",7,"^7",108,"^8",19,"^Y",["^Z",["^[",["^Z",[[],["^11"]]]]],"^3","Return the currently computed Google Closure js dependency index from the\n  compiler state.","^12",["^ ","^13",false,"^14",1,"^15",1,"^16",[[],["^11"]],"^Y",["^Z",[[],["^11"]]],"^17",["^Z",[null,null]]]],"^J","~$cljs.analyzer.api/get-js-index","^4","cljs/analyzer/api.cljc","^8",19,"^12",["^ ","^13",false,"^14",1,"^15",1,"^16",[[],["^11"]],"^Y",["^Z",[[],["^11"]]],"^17",["^Z",[null,null]]],"^16",[[],["^11"]],"^19",null,"^14",1,"^17",["^Z",[null,null]],"^6",1,"^13",false,"^1:",[["^ ","^14",0,"^13",false,"^1;","^1<"],["^ ","^14",1,"^13",false,"^1;",["^B",["^1<","^1D"]]]],"^5",108,"^7",108,"^15",1,"^1=",true,"^Y",["^Z",[[],["^11"]]],"^3","Return the currently computed Google Closure js dependency index from the\n  compiler state."]],"~:require-macros",["^ ","^=","^="],"~:cljs.analyzer/constants",["^ ","^S",["^B",["~:cljs.analyzer/namespaces","~:private","~:macros","~:js-dependency-index","^W","~:options"]],"~:order",["^2B","^2A","^2>","^2@","^W","^2?"]],"~:flags",["^ ","^T",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^R","^=","^N","^P"]]