shadow$provide.module$node_modules$prop_types$checkPropTypes=function(global,require,module,exports){var invariant=require("module$node_modules$fbjs$lib$invariant"),warning=require("module$node_modules$fbjs$lib$warning"),ReactPropTypesSecret=require("module$node_modules$prop_types$lib$ReactPropTypesSecret"),loggedTypeFailures={};module.exports=function(typeSpecs,values,location,componentName,getStack){for(var typeSpecName in typeSpecs)if(typeSpecs.hasOwnProperty(typeSpecName)){try{invariant("function"===
typeof typeSpecs[typeSpecName],"%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.",componentName||"React class",location,typeSpecName,typeof typeSpecs[typeSpecName]);var error=typeSpecs[typeSpecName](values,typeSpecName,componentName,location,null,ReactPropTypesSecret)}catch(ex){error=ex}warning(!error||error instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
componentName||"React class",location,typeSpecName,typeof error);if(error instanceof Error&&!(error.message in loggedTypeFailures)){loggedTypeFailures[error.message]=!0;var stack=getStack?getStack():"";warning(!1,"Failed %s type: %s%s",location,error.message,null!=stack?stack:"")}}}}
//# sourceMappingURL=module$node_modules$prop_types$checkPropTypes.js.map
