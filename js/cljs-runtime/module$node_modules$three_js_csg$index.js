shadow$provide.module$node_modules$three_js_csg$index=function(global,require,module,exports){module.exports=function(THREE){var ThreeBSP=function(geometry){var _length_i,polygons=[];if(geometry instanceof THREE.Geometry)this.matrix=new THREE.Matrix4;else if(geometry instanceof THREE.Mesh)geometry.updateMatrix(),this.matrix=geometry.matrix.clone(),geometry=geometry.geometry;else{if(geometry instanceof ThreeBSP.Node)return this.tree=geometry,this.matrix=new THREE.Matrix4,this;throw"ThreeBSP: Given geometry is unsupported";
}var i=0;for(_length_i=geometry.faces.length;i<_length_i;i++){var face=geometry.faces[i];var faceVertexUvs=geometry.faceVertexUvs[0][i];var polygon=new ThreeBSP.Polygon;if(face instanceof THREE.Face3){var vertex=geometry.vertices[face.a];var uvs=faceVertexUvs?new THREE.Vector2(faceVertexUvs[0].x,faceVertexUvs[0].y):null;vertex=new ThreeBSP.Vertex(vertex.x,vertex.y,vertex.z,face.vertexNormals[0],uvs);vertex.applyMatrix4(this.matrix);polygon.vertices.push(vertex);vertex=geometry.vertices[face.b];uvs=
faceVertexUvs?new THREE.Vector2(faceVertexUvs[1].x,faceVertexUvs[1].y):null;vertex=new ThreeBSP.Vertex(vertex.x,vertex.y,vertex.z,face.vertexNormals[2],uvs);vertex.applyMatrix4(this.matrix);polygon.vertices.push(vertex);vertex=geometry.vertices[face.c];uvs=faceVertexUvs?new THREE.Vector2(faceVertexUvs[2].x,faceVertexUvs[2].y):null;vertex=new ThreeBSP.Vertex(vertex.x,vertex.y,vertex.z,face.vertexNormals[2],uvs);vertex.applyMatrix4(this.matrix);polygon.vertices.push(vertex)}else if(typeof THREE.Face4)vertex=
geometry.vertices[face.a],uvs=faceVertexUvs?new THREE.Vector2(faceVertexUvs[0].x,faceVertexUvs[0].y):null,vertex=new ThreeBSP.Vertex(vertex.x,vertex.y,vertex.z,face.vertexNormals[0],uvs),vertex.applyMatrix4(this.matrix),polygon.vertices.push(vertex),vertex=geometry.vertices[face.b],uvs=faceVertexUvs?new THREE.Vector2(faceVertexUvs[1].x,faceVertexUvs[1].y):null,vertex=new ThreeBSP.Vertex(vertex.x,vertex.y,vertex.z,face.vertexNormals[1],uvs),vertex.applyMatrix4(this.matrix),polygon.vertices.push(vertex),
vertex=geometry.vertices[face.c],uvs=faceVertexUvs?new THREE.Vector2(faceVertexUvs[2].x,faceVertexUvs[2].y):null,vertex=new ThreeBSP.Vertex(vertex.x,vertex.y,vertex.z,face.vertexNormals[2],uvs),vertex.applyMatrix4(this.matrix),polygon.vertices.push(vertex),vertex=geometry.vertices[face.d],uvs=faceVertexUvs?new THREE.Vector2(faceVertexUvs[3].x,faceVertexUvs[3].y):null,vertex=new ThreeBSP.Vertex(vertex.x,vertex.y,vertex.z,face.vertexNormals[3],uvs),vertex.applyMatrix4(this.matrix),polygon.vertices.push(vertex);
else throw"Invalid face type at index "+i;polygon.calculateProperties();polygons.push(polygon)}this.tree=new ThreeBSP.Node(polygons)};ThreeBSP.prototype.subtract=function(other_tree){var a=this.tree.clone();other_tree=other_tree.tree.clone();a.invert();a.clipTo(other_tree);other_tree.clipTo(a);other_tree.invert();other_tree.clipTo(a);other_tree.invert();a.build(other_tree.allPolygons());a.invert();a=new ThreeBSP(a);a.matrix=this.matrix;return a};ThreeBSP.prototype.union=function(other_tree){var a=
this.tree.clone();other_tree=other_tree.tree.clone();a.clipTo(other_tree);other_tree.clipTo(a);other_tree.invert();other_tree.clipTo(a);other_tree.invert();a.build(other_tree.allPolygons());a=new ThreeBSP(a);a.matrix=this.matrix;return a};ThreeBSP.prototype.intersect=function(other_tree){var a=this.tree.clone();other_tree=other_tree.tree.clone();a.invert();other_tree.clipTo(a);other_tree.invert();a.clipTo(other_tree);other_tree.clipTo(a);a.build(other_tree.allPolygons());a.invert();a=new ThreeBSP(a);
a.matrix=this.matrix;return a};ThreeBSP.prototype.toGeometry=function(){var i,j,matrix=(new THREE.Matrix4).getInverse(this.matrix),geometry=new THREE.Geometry,polygons=this.tree.allPolygons(),polygon_count=polygons.length,vertice_dict={};for(i=0;i<polygon_count;i++){var polygon=polygons[i];var polygon_vertice_count=polygon.vertices.length;for(j=2;j<polygon_vertice_count;j++){var verticeUvs=[];var vertex_idx_c=polygon.vertices[0];verticeUvs.push(new THREE.Vector2(vertex_idx_c.uv.x,vertex_idx_c.uv.y));
vertex_idx_c=new THREE.Vector3(vertex_idx_c.x,vertex_idx_c.y,vertex_idx_c.z);vertex_idx_c.applyMatrix4(matrix);if("undefined"!==typeof vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z])var vertex_idx_a=vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z];else geometry.vertices.push(vertex_idx_c),vertex_idx_a=vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z]=geometry.vertices.length-1;vertex_idx_c=polygon.vertices[j-1];verticeUvs.push(new THREE.Vector2(vertex_idx_c.uv.x,
vertex_idx_c.uv.y));vertex_idx_c=new THREE.Vector3(vertex_idx_c.x,vertex_idx_c.y,vertex_idx_c.z);vertex_idx_c.applyMatrix4(matrix);if("undefined"!==typeof vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z])var vertex_idx_b=vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z];else geometry.vertices.push(vertex_idx_c),vertex_idx_b=vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z]=geometry.vertices.length-1;vertex_idx_c=polygon.vertices[j];verticeUvs.push(new THREE.Vector2(vertex_idx_c.uv.x,
vertex_idx_c.uv.y));vertex_idx_c=new THREE.Vector3(vertex_idx_c.x,vertex_idx_c.y,vertex_idx_c.z);vertex_idx_c.applyMatrix4(matrix);"undefined"!==typeof vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z]?vertex_idx_c=vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z]:(geometry.vertices.push(vertex_idx_c),vertex_idx_c=vertice_dict[vertex_idx_c.x+","+vertex_idx_c.y+","+vertex_idx_c.z]=geometry.vertices.length-1);vertex_idx_a=new THREE.Face3(vertex_idx_a,vertex_idx_b,vertex_idx_c,
new THREE.Vector3(polygon.normal.x,polygon.normal.y,polygon.normal.z));geometry.faces.push(vertex_idx_a);geometry.faceVertexUvs[0].push(verticeUvs)}}return geometry};ThreeBSP.prototype.toMesh=function(material){var geometry=this.toGeometry();material=new THREE.Mesh(geometry,material);material.position.setFromMatrixPosition(this.matrix);material.rotation.setFromRotationMatrix(this.matrix);return material};ThreeBSP.Polygon=function(vertices,normal,w){vertices instanceof Array||(vertices=[]);this.vertices=
vertices;0<vertices.length?this.calculateProperties():this.normal=this.w=void 0};ThreeBSP.Polygon.prototype.calculateProperties=function(){var a=this.vertices[0],c=this.vertices[2];this.normal=this.vertices[1].clone().subtract(a).cross(c.clone().subtract(a)).normalize();this.w=this.normal.clone().dot(a);return this};ThreeBSP.Polygon.prototype.clone=function(){var vertice_count,polygon=new ThreeBSP.Polygon;var i=0;for(vertice_count=this.vertices.length;i<vertice_count;i++)polygon.vertices.push(this.vertices[i].clone());
polygon.calculateProperties();return polygon};ThreeBSP.Polygon.prototype.flip=function(){var i,vertices=[];this.normal.multiplyScalar(-1);this.w*=-1;for(i=this.vertices.length-1;0<=i;i--)vertices.push(this.vertices[i]);this.vertices=vertices;return this};ThreeBSP.Polygon.prototype.classifyVertex=function(vertex){vertex=this.normal.dot(vertex)-this.w;return-1E-5>vertex?2:1E-5<vertex?1:0};ThreeBSP.Polygon.prototype.classifySide=function(polygon){var i,num_positive=0,num_negative=0,vertice_count=polygon.vertices.length;
for(i=0;i<vertice_count;i++){var vertex=polygon.vertices[i];vertex=this.classifyVertex(vertex);1===vertex?num_positive++:2===vertex&&num_negative++}return 0<num_positive&&0===num_negative?1:0===num_positive&&0<num_negative?2:0===num_positive&&0===num_negative?0:3};ThreeBSP.Polygon.prototype.splitPolygon=function(polygon,coplanar_front,coplanar_back,front,back){var classification=this.classifySide(polygon);if(0===classification)(0<this.normal.dot(polygon.normal)?coplanar_front:coplanar_back).push(polygon);
else if(1===classification)front.push(polygon);else if(2===classification)back.push(polygon);else{classification=[];var b=[];coplanar_back=0;for(coplanar_front=polygon.vertices.length;coplanar_back<coplanar_front;coplanar_back++){var j=(coplanar_back+1)%coplanar_front;var vi=polygon.vertices[coplanar_back];j=polygon.vertices[j];var ti=this.classifyVertex(vi);var tj=this.classifyVertex(j);2!=ti&&classification.push(vi);1!=ti&&b.push(vi);3===(ti|tj)&&(ti=(this.w-this.normal.dot(vi))/this.normal.dot(j.clone().subtract(vi)),
vi=vi.interpolate(j,ti),classification.push(vi),b.push(vi))}3<=classification.length&&front.push((new ThreeBSP.Polygon(classification)).calculateProperties());3<=b.length&&back.push((new ThreeBSP.Polygon(b)).calculateProperties())}};ThreeBSP.Vertex=function(x,y,z,normal,uv){this.x=x;this.y=y;this.z=z;this.normal=normal||new THREE.Vector3;this.uv=uv||new THREE.Vector2};ThreeBSP.Vertex.prototype.clone=function(){return new ThreeBSP.Vertex(this.x,this.y,this.z,this.normal.clone(),this.uv.clone())};ThreeBSP.Vertex.prototype.add=
function(vertex){this.x+=vertex.x;this.y+=vertex.y;this.z+=vertex.z;return this};ThreeBSP.Vertex.prototype.subtract=function(vertex){this.x-=vertex.x;this.y-=vertex.y;this.z-=vertex.z;return this};ThreeBSP.Vertex.prototype.multiplyScalar=function(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;return this};ThreeBSP.Vertex.prototype.cross=function(vertex){var x=this.x,y=this.y,z=this.z;this.x=y*vertex.z-z*vertex.y;this.y=z*vertex.x-x*vertex.z;this.z=x*vertex.y-y*vertex.x;return this};ThreeBSP.Vertex.prototype.normalize=
function(){var length=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);this.x/=length;this.y/=length;this.z/=length;return this};ThreeBSP.Vertex.prototype.dot=function(vertex){return this.x*vertex.x+this.y*vertex.y+this.z*vertex.z};ThreeBSP.Vertex.prototype.lerp=function(a,t){this.add(a.clone().subtract(this).multiplyScalar(t));this.normal.add(a.normal.clone().sub(this.normal).multiplyScalar(t));this.uv.add(a.uv.clone().sub(this.uv).multiplyScalar(t));return this};ThreeBSP.Vertex.prototype.interpolate=
function(other,t){return this.clone().lerp(other,t)};ThreeBSP.Vertex.prototype.applyMatrix4=function(m){var x=this.x,y=this.y,z=this.z;m=m.elements;this.x=m[0]*x+m[4]*y+m[8]*z+m[12];this.y=m[1]*x+m[5]*y+m[9]*z+m[13];this.z=m[2]*x+m[6]*y+m[10]*z+m[14];return this};ThreeBSP.Node=function(polygons){var polygon_count,front=[],back=[];this.polygons=[];this.front=this.back=void 0;if(polygons instanceof Array&&0!==polygons.length){this.divider=polygons[0].clone();var i=0;for(polygon_count=polygons.length;i<
polygon_count;i++)this.divider.splitPolygon(polygons[i],this.polygons,this.polygons,front,back);0<front.length&&(this.front=new ThreeBSP.Node(front));0<back.length&&(this.back=new ThreeBSP.Node(back))}};ThreeBSP.Node.isConvex=function(polygons){var i,j;for(i=0;i<polygons.length;i++)for(j=0;j<polygons.length;j++)if(i!==j&&2!==polygons[i].classifySide(polygons[j]))return!1;return!0};ThreeBSP.Node.prototype.build=function(polygons){var polygon_count,front=[],back=[];this.divider||(this.divider=polygons[0].clone());
var i=0;for(polygon_count=polygons.length;i<polygon_count;i++)this.divider.splitPolygon(polygons[i],this.polygons,this.polygons,front,back);0<front.length&&(this.front||(this.front=new ThreeBSP.Node),this.front.build(front));0<back.length&&(this.back||(this.back=new ThreeBSP.Node),this.back.build(back))};ThreeBSP.Node.prototype.allPolygons=function(){var polygons=this.polygons.slice();this.front&&(polygons=polygons.concat(this.front.allPolygons()));this.back&&(polygons=polygons.concat(this.back.allPolygons()));
return polygons};ThreeBSP.Node.prototype.clone=function(){var node=new ThreeBSP.Node;node.divider=this.divider.clone();node.polygons=this.polygons.map(function(polygon){return polygon.clone()});node.front=this.front&&this.front.clone();node.back=this.back&&this.back.clone();return node};ThreeBSP.Node.prototype.invert=function(){var polygon_count;var i=0;for(polygon_count=this.polygons.length;i<polygon_count;i++)this.polygons[i].flip();this.divider.flip();this.front&&this.front.invert();this.back&&
this.back.invert();i=this.front;this.front=this.back;this.back=i;return this};ThreeBSP.Node.prototype.clipPolygons=function(polygons){var polygon_count;if(!this.divider)return polygons.slice();var front=[];var back=[];var i=0;for(polygon_count=polygons.length;i<polygon_count;i++)this.divider.splitPolygon(polygons[i],front,back,front,back);this.front&&(front=this.front.clipPolygons(front));back=this.back?this.back.clipPolygons(back):[];return front.concat(back)};ThreeBSP.Node.prototype.clipTo=function(node){this.polygons=
node.clipPolygons(this.polygons);this.front&&this.front.clipTo(node);this.back&&this.back.clipTo(node)};return ThreeBSP}}
//# sourceMappingURL=module$node_modules$three_js_csg$index.js.map
