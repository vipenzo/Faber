{"version":3,"sources":["thi/ng/geom/mesh/csg.cljc"],"mappings":"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","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k28478","else__4383__auto__","G__28482","cljs.core/Keyword","plane","polygons","front","back","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__28484","vec__28485","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__28477","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this28479","other28480","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__28489","cljs.core/keyword-identical?","expr__28490","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","thi.ng.geom.mesh.csg/CSGNode","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__28481","extmap__4419__auto__","G__28492","cljs.core/record?","thi.ng.geom.mesh.csg/->CSGNode","thi.ng.geom.mesh.csg/map->CSGNode","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","thi.ng.geom.mesh.csg/CSGPolygon","thi.ng.geom.mesh.csg/->CSGPolygon","vertices","shared","bsphere","_","thi.ng.geom.types.utils.bounding_sphere","thi.ng.geom.core/flip","cljs.core/reverse","thi.ng.geom.mesh.csg/compute-split-types","n","w","ieps","thi.ng.math.core/*eps*","ptype","types","t","thi.ng.geom.core/dot","cljs.core/first","pt","cljs.core.conj","cljs.core/next","thi.ng.geom.mesh.csg/split-poly*","nv","f","b","i","j","cljs.core/rem","vi","ti","vj","v","thi.ng.geom.core/mix","thi.ng.geom.core/-","p__28495","map__28496","cljs.core.apply","cljs.core/hash-map","thi.ng.geom.mesh.csg/split-poly","poly","state","s","r","d","vec__28498","G__28501","js/Error","vec__28502","G__28505","G__28506","thi.ng.geom.mesh.csg/csg-polygon","G__28507","G__28508","p__28509","map__28510","thi.ng.geom.mesh.csg/clip-polygons","node","ps","cljs.core/not","vec__28512","cp-front","cp-back","new-front","new-back","G__28516","G__28517","p__28518","map__28519","thi.ng.geom.mesh.csg/all-polygons","p__28521","map__28522","thi.ng.geom.mesh.csg/invert","cljs.core.mapv","p__28524","map__28525","thi.ng.geom.mesh.csg/clip","a","var_args","G__28528","thi.ng.geom.mesh.csg.csg_polygon","thi.ng.geom.plane.plane_from_points","cljs.core/vec","G__28530","thi.ng.geom.mesh.csg/csg-node","p__28532","map__28533","thi.ng.geom.mesh.csg.csg_node","vec__28535","or__4126__auto__","thi.ng.geom.mesh.csg/union","thi.ng.geom.mesh.csg/subtract","thi.ng.geom.mesh.csg/intersect","thi.ng.geom.mesh.csg/mesh->csg","m","thi.ng.geom.core/faces","cljs.core.map","thi.ng.geom.mesh.csg/csg->mesh","thi.ng.geom.core/into","thi.ng.geom.basicmesh/basic-mesh","G__28539","thi.ng.geom.mesh.csg/csg-cone","e","radius","res","thi.ng.geom.mesh.csg.csg_cone","r-south","r-north","dir","az","thi.ng.geom.core/normalize","ax","G__28540","thi.ng.math.core/abs","thi.ng.geom.core.vector/V3X","thi.ng.geom.core.vector/V3Y","ay","thi.ng.geom.core/cross","stack","theta","thi.ng.math.core/TWO_PI","out","thi.ng.geom.core/madd","Math/cos","thi.ng.geom.core/*","Math/sin","pos","thi.ng.geom.core/+","cljs.core.mapcat","t0","t1","cljs.core.range"],"sourcesContent":["(ns thi.ng.geom.mesh.csg\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.core.vector :as v :refer [vec3 V3X V3Y]]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.plane :as p]\n   [thi.ng.geom.types.utils :as tu]\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [PI TWO_PI *eps*]]\n   #?(:clj [thi.ng.math.macros :as mm])))\n\n(declare csg-polygon)\n\n(defrecord CSGNode [plane polygons front back])\n\n(deftype CSGPolygon [plane vertices shared ^:unsynchronized-mutable bsphere]\n  g/PBoundingSphere\n  (bounding-sphere\n    [_] (if bsphere\n          bsphere\n          (do\n            (set! bsphere (tu/bounding-sphere vertices))\n            bsphere)))\n  g/PFlip\n  (flip [_]\n    (CSGPolygon. (g/flip plane) (reverse vertices) shared bsphere)))\n\n(defn compute-split-types\n  [n w vertices]\n  (let [ieps (- *eps*)]\n    (loop [ptype 0, types [], vertices vertices]\n      (if vertices\n        (let [t (+ (g/dot n (first vertices)) w)\n              pt (if (< t ieps) 2 (if (> t *eps*) 1 0))]\n          (recur (bit-or ptype pt) (conj types pt) (next vertices)))\n        [ptype types]))))\n\n(defn split-poly*\n  [n w vertices types]\n  (let [nv (count vertices)]\n    (loop [f [], b [], i 0]\n      (if (< i nv)\n        (let [j (rem (inc i) nv)\n              vi (nth vertices i)\n              ti (types i)\n              f (if (== ti 2) f (conj f vi))\n              b (if (== ti 1) b (conj b vi))]\n          (if (== 3 (bit-or ti (types j)))\n            (let [vj (nth vertices j)\n                  v (g/mix vi vj (/ (- (- w) (g/dot n vi)) (g/dot n (g/- vj vi))))]\n              (recur (conj f v) (conj b v) (inc i)))\n            (recur f b (inc i))))\n        [f b]))))\n\n(defn split-poly\n  \"Takes a plane and splits the given polygon with it. Returns a 4-element vector\n    of classified sub-shapes: [coplanar-front coplanar-back front back].\"\n  [{:keys [n w]} ^CSGPolygon poly state]\n  (let [s (g/bounding-sphere poly)\n        r (+ (:r s) *eps*)\n        d (+ (g/dot n (:p s)) w)]\n    (cond\n     (> d r) (assoc state 2 (conj (state 2) poly))\n     (< d (- r)) (assoc state 3 (conj (state 3) poly))\n     :default\n     (let [[ptype types] (compute-split-types n w (.-vertices poly))]\n       (case (int ptype)\n         ;; co-planar\n         0 (if (pos? (g/dot n (:n (.-plane poly))))\n             (assoc state 0 (conj (state 0) poly))\n             (assoc state 1 (conj (state 1) poly)))\n         ;; front\n         1 (assoc state 2 (conj (state 2) poly))\n         ;; back\n         2 (assoc state 3 (conj (state 3) poly))\n         ;; both sides -> split\n         3 (let [[f b] (split-poly* n w (.-vertices poly) types)]\n             [(state 0) (state 1)\n              (if (>= (count f) 3) (conj (state 2) (csg-polygon f (.-shared poly))) f)\n              (if (>= (count b) 3) (conj (state 3) (csg-polygon b (.-shared poly))) b)]))))))\n\n(defn clip-polygons\n  \"Uses a CSG node's plane to recursively clip the given seq of polygons.\n  Returns a flat seq of polygons classified as in-front of the plane\n  or the original seq if no clipping plane is available.\"\n  [{:keys [plane front back] :as node} ps]\n  (if (not plane)\n    ps\n    (let [[cp-front cp-back new-front new-back]\n          (reduce\n           (fn [state poly] (split-poly plane poly state))\n           [[] [] [] []] ps)\n          new-front (concat new-front cp-front)\n          new-front (if front (clip-polygons front new-front) new-front)\n          new-back (if back (clip-polygons back (concat new-back cp-back)) [])]\n      (concat new-front new-back))))\n\n(defn all-polygons\n  \"Returns a lazy seq of all polygons of the given CSG node and its children.\"\n  [{:keys [front back] :as node}]\n  (concat\n   (:polygons node)\n   (if front (all-polygons front))\n   (if back (all-polygons back))))\n\n(defn invert\n  [{:keys [front back plane] :as node}]\n  (CSGNode.\n   (if plane (g/flip plane))\n   (mapv g/flip (:polygons node))\n   (if back (invert back))\n   (if front (invert front))))\n\n(defn clip\n  \"Clips the polygons of the first node with the ones from the second.\n  Returns the updated node.\"\n  [{:keys [front back] :as a} b]\n  (CSGNode.\n   (:plane a)\n   (clip-polygons b (:polygons a))\n   (if front (clip front b))\n   (if back (clip back b))))\n\n(defn csg-polygon\n  \"Creates a CSG polygon map from the given vertices and\n  computes a plane definition using the first 3 vertices.\"\n  ([vertices] (csg-polygon vertices nil))\n  ([vertices shared]\n     (CSGPolygon. (p/plane-from-points vertices) (vec vertices) shared nil)))\n\n(defn csg-node\n  \"Creates a new or refines a CSG tree node and recursively\n  adds the given polygons to it.\"\n  ([polygons] (csg-node nil polygons))\n  ([{:keys [polygons plane front back] :as node} ps]\n     (if (seq ps)\n       (let [plane (or plane (.-plane ^CSGPolygon (first ps)))\n             [cp-front cp-back new-front new-back]\n             (reduce\n              (fn [state poly] (split-poly plane poly state))\n              [[] [] [] []] ps)]\n         (CSGNode.\n          plane\n          (into (into polygons cp-front) cp-back)\n          (if (seq new-front) (csg-node front new-front) front)\n          (if (seq new-back) (csg-node back new-back) back)))\n       node)))\n\n(defn union\n  [a b]\n  (let [a (clip a b)\n        b (-> b (clip a) invert (clip a) invert)]\n    (csg-node a (all-polygons b))))\n\n(defn subtract\n  [a b]\n  (let [a (-> a invert (clip b))\n        b (-> b (clip a) invert (clip a) invert)]\n    (-> a (csg-node (all-polygons b)) invert)))\n\n(defn intersect\n  [a b]\n  (let [a (invert a)\n        b (-> b (clip a) invert)\n        a (clip a b)\n        b (clip b a)]\n    (-> a (csg-node (all-polygons b)) invert)))\n\n(defn mesh->csg\n  [m]\n  (->> (g/faces m)\n       (map (fn [f] (csg-polygon f nil)))\n       (csg-node nil)))\n\n(defn csg->mesh\n  [node]\n  (->> node\n       (all-polygons)\n       (map (fn [poly] (.-vertices ^CSGPolygon poly)))\n       (g/into (bm/basic-mesh))))\n  \n(defn csg-cone\n  ([s e radius res] (csg-cone s e radius radius res))\n  ([s e r-south r-north res]\n     (let [dir (g/- e s)\n           az (g/normalize dir)\n           ax (-> (if (> (m/abs (az 1)) 0.5) V3X V3Y)\n                  (g/cross az)\n                  (g/normalize))\n           ay (-> ax (g/cross az) g/normalize)\n           f (fn [stack i r]\n               (let [theta (* m/TWO_PI i)\n                     out   (g/madd ax (Math/cos theta) (g/* ay (Math/sin theta)))\n                     pos   (g/+ s (g/* dir stack) (g/* out r))]\n                 pos))\n           res (/ 1.0 res)]\n       (mapcat\n        (fn [i]\n          (let [t0 (* i res) t1 (* (inc i) res)]\n            [(csg-polygon [s (f 0 t0 r-south) (f 0 t1 r-south)])\n             (csg-polygon [(f 0 t1 r-south) (f 0 t0 r-south) (f 1 t0 r-north) (f 1 t1 r-north)])\n             (csg-polygon [e (f 1 t1 r-north) (f 1 t0 r-north)])]))\n        (range res)))))\n"]}