{"version":3,"sources":["re_db/core$macros.cljc"],"mappings":"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","names":["ret__4785__auto__","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-db.core$macros/peek","&form","&env","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","seq35314","G__35315","cljs.core/first","cljs.core/next","G__35316","self__4723__auto__","body","G__35327","re-db.core$macros/get-in*","js/Error","m","ks","cljs.core/vector?","iter__4529__auto__","s__35331","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__35333","cljs.core/chunk-buffer","i__35332","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35330","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","k","not-found","s__35336","b__35338","i__35337","iter__35335","cljs.core.drop_last","cljs.core/last","re-db.core$macros/db-log","cljs.core.apply","cljs.core/array-map","seq35340","G__35341","G__35342","cljs.core/chunk-first"],"sourcesContent":["(ns re-db.core\n  (:refer-clojure :exclude [peek]))\n\n(defmacro peek\n  \"Evaluates body without tracking read patterns.\"\n  [& body]\n  `(binding [~'re-db.core/*access-log* nil]\n     (do ~@body)))\n\n(defmacro get-in*\n  \"Compiled version of get-in, small performance boost over the `get-in` function.\"\n  ([m ks]\n   (if-not (vector? ks)\n     `(clojure.core/get-in ~m ~ks)\n     `(-> ~m\n          ~@(for [k ks]\n              (list 'clojure.core/get k)))))\n  ([m ks not-found]\n   (if-not (vector? ks)\n     `(clojure.core/get-in ~m ~ks ~not-found)\n     `(-> ~m\n          ~@(for [k (drop-last ks)]\n              (list 'clojure.core/get k))\n          (clojure.core/get ~(last ks) ~not-found)))))\n\n(defmacro db-log [& body]\n  `(binding [~'re-db.core/*db-log* (atom {})\n             ~'re-db.core/*prevent-notify* true]\n     (let [value# (do ~@body)]\n       {:tx-report @~'re-db.core/*db-log*\n        :value     value#})))"]}