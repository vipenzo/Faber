{"version":3,"sources":["shadow_eval/core.cljs"],"mappings":";AAyBA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AASL,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAQ,AAACC;;AAElB,AAAA,AAAMC,AAAUC,AAAOC;AAAvB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACCL,AACAG,AAEOG,AACA,AAACC,AAAQC,AAAUR,AACnB,AAAA,AAACS,AACRL;;AAIJ,AAAAM,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAEuB,AAAKY,AAAEpB;AAAP,AAAeA;AAFtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGuB,AAAKoB,AAAEpB;AAAP,AAAA,AAAA,AACWA;AAJlC,AAKuB,AAAKqB,AAAKrB;AAAV,AACE,AAACD,AAASC,AAAO,AAAA,AAACI,AAAQkB,AAAM,AAAA,AAAaD,AAAME;AAN5E,AAAA,AAAAd;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAOWc;AAPX,AAAA,AAAA,AAAAT,AAQE,AAAAU,AAAA,AAAAC,AAA+BF;AAA/BC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAd,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAC,AAAAY,AAAAA;AAAA,AAAAX,AAAAW,AAAA,AAAczB;AAAd,AAAAc,AAAAW,AAAA,AAAqBG;AAArB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAKiB,AAAA,AAAA,AAAAD,AAAUF,AACD,AAAA,AAAK,AAAA,AAAQ,AAAA,AAAU,AAACK,AAAM,AAAA,AAACC,AAAkB9B;AAN3E,AAOkB,AAAMA,AAAO,AAAA,AAAA2B;AAAb,AACE,AAAA,AAACI,AAAMP,AAAMD,AAAcvB;;AAC3B,AAACD,AAASC,AAAO,AAAA,AAACI,AAAQkB,AAAME,AAAMD;AAEvD,AAAAS,AAA4BJ;AAA5BI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAApB,AAAAC,AAAAmB,AAAAA;AAAA,AAAAlB,AAAAkB,AAAA,AAAcC;AAAd,AAAAnB,AAAAkB,AAAA,AAAoBE;AAApB,AAAA,AAAA,AAEG,AAAA,AAAA,AAAID,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAClB,AACc,AAACoB,AAAWF,AACX,AAAK,AAACG,AAAQH,AACpB,AAACI,AAAO,AAACC,AAASL,AAErB,AAACM,AAAmBL;;AA1B7C,AAAA,AAAAlB;AAAA,AAAA;AAAA,AAAA,AAAAC,AAAAV;;AAAA;;;AAAA,AAAAW,AAAAX,AAASY;AA4BT,AAAAZ,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAO,AAAA,AAAA,AAAAC,AAGE,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAQ,AAAA,AAAA,AAACC,AAGN,AAACC,AAAIzB,AAAa1B;AANvB,AAAA;AAAA,AAAA,AAAA+C,AAAAjC;;AAAA;;;AAAA,AAAAW,AAAAX,AAASkC;AAQT,AAAA,AAAA/C,AAAAC,AAAAkD;AAAA;AAAA,AAAA,AAASC,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAUlD,AAGA;AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACmD;;;AAEvB,AAAA,AAAMC;AAAN,AACE,AAAA,AAACC,AAAgB,AAACT;;AAMpB,AAAA,AAAA,AAAA,AAAA9B,AAAawC;;AAAb,AAAA,AAAA,AAAaA,AAEX,AAAa9B,AAAKa;AAAlB,AAAA,AAAA,AAAab;AAAb,AACE,AAAA,AAAA,AAAA,AAAA,AAAC2B,AAA6B,AAACI,AAAK/B,AAAMa;;;AAH9C,AAAA,AAAA,AAAaiB,AAIX,AAAY9B;AAAZ,AAAA,AAAA,AAAYA;AAAZ,AACE,AAAA,AAACsB,AAAa,AAACS,AAAK/B;;;AALxB,AAAA,AAAA,AAAa8B,AAMX,AAAc9B;AAAd,AAAA,AAAA,AAAcA;AAAd,AACE,AAAA,AAAA,AAAA,AAACgC,AAAqBC,AAAoB,AAACF,AAAK/B;;;AAPpD,AAAA,AAAA,AAAAV,AAAawC;;AAAb,AAAA,AAAA,AAAaA,AASX,AAAO9B;AAAP,AAAA,AAAA,AAAOA;AAAP,AAAa,AAAiBA;;AAEhC,AAAA,AAAA,AAAA,AAAA,AAAAV,AACE4C;;AADF,AAAA,AAAA,AACEA,AACA,AAAOlC;AAAP,AAAA,AAAA,AAAOA;AAAP,AAAa,AAAAmC,AAAA,AAAA9B,AAAEL;AAAF,AAAA,AAAAmC,AAAAA,AAAAA;;AAEf,AAAA,AAAA,AAAA,AAAA7C,AAAa8C;;AAAb,AAAA,AAAA,AAAaA,AAEX,AAAYpC;AAAZ,AAAA,AAAA,AAAYA;AAAZ,AAAkB,AAACqC,AAAiBrC;;AAEtC,AAAA,AAAA,AAAAsC,AAAAC,AAAA,AAAA;;AAAA,AAAAD,AAAAE,AAAA,AAEE,AAAgBxC;AAAhB,AAAsB,AAACN,AAA4BM","names":["shadow-eval.core/source-examples","js/shadow-eval","js/shadow-eval.core","js/shadow-eval.core.c-state","shadow-eval.core/c-state","cljs.js.empty_state","shadow-eval.core/eval-str","source","cb","cljs.js.eval_str","cljs.js/js-eval","cljs.core.partial","shadow.cljs.bootstrap.browser/load","cljs.core.symbol","the-class__42481__auto__","re-view.core/class*","p__57642","map__57643","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re_view.hiccup.core.element","re-view.core/wrap-props","shadow-eval.core/show-exampleClass","re-view.core/factory","shadow-eval.core/show-example","_","this","cljs.core/swap!","cljs.core/assoc","state","map__57645","cljs.core/deref","p1__57641#","result","cljs.core/count","cljs.core/re-seq","cljs.core.swap_BANG_","map__57647","error","value","cljs.core/ex-message","cljs.core/ex-data","cljs.core.pr_str","cljs.core/ex-cause","lark.value_viewer.core.format_value","shadow-eval.core/examplesClass","shadow-eval.core/examples","cljs.core/not","re-db.d/get","cljs.core.map","js/shadow-eval.core._","shadow-eval.core/_","shadow.cljs.bootstrap.browser/init","re-db.d/transact!","shadow-eval.core/render","re-view.core/render-to-dom","cells.cell/Cell","cljs.core/name","re-db.patterns/invalidate!","re-db.d/*db*","cljs.core/Var","fexpr__57649","shapes.core/Shape","shapes.core/to-hiccup","goog.object/set","cells.cell/IRenderHiccup","cells.cell/render-hiccup"],"sourcesContent":["(ns shadow-eval.core\n  (:require\n\n    ;; evaluate\n    [cljs.js :as cljs]\n    [shadow.cljs.bootstrap.browser :as boot]\n\n    ;; view\n    [re-view.core :as v :refer [defview]]\n    [re-view.hiccup.core :refer [element]]\n\n\n    ;; things to eval and display\n    [lark.value-viewer.core :as views]\n    [re-db.d :as d]\n    [re-db.patterns :as patterns]\n    [cells.cell :as cell]\n    [shapes.core :as shapes]\n    [thi.ng.geom.svg.core :as svg]\n\n    [clojure.string :as string]))\n\n\n;; Source text to eval\n\n(def source-examples [\"(circle 40)\"\n                      \"(for [n (range 10)] n)\"\n                      \"(defcell x 10)\"\n                      \"(defcell counter (interval 1000 inc))\"\n                      \"(defcell bigger-counter (* @counter 10))\"\n                      \"(require '[cljs.js :as cljs])\\n\\n(fn? cljs/eval-str)\"])\n\n;; Set up eval environment\n\n(defonce c-state (cljs/empty-state))\n\n(defn eval-str [source cb]\n  (cljs/eval-str\n    c-state\n    source\n    \"[test]\"\n    {:eval cljs/js-eval\n     :load (partial boot/load c-state)\n     :ns   (symbol \"shadow-eval.user\")}\n    cb))\n\n;; Views\n\n(defview show-example\n  \"Shows a single example, with an editable textarea and value-view.\"\n  {:key                (fn [_ source] source)\n   :view/initial-state (fn [_ source]\n                         {:source source})\n   :view/did-mount     (fn [this source]\n                         (eval-str source (partial swap! (:view/state this) assoc :result)))}\n  [{:keys [view/state]}]\n  (let [{:keys [source result]} @state]\n    [:.ma3.flex\n     [:.bg-near-white.pa3.flex-none\n      {:style {:width 450}}\n      [:textarea.bn.pre.w-100.f6.lh-copy.bg-near-white.outline-0.monospace.overflow-auto\n       {:value     (:source @state)\n        :style     {:height (str (+ 1.75 (* 1.3125 (count (re-seq #\"\\n|\\r\\n\" source)))) \"rem\")}\n        :on-change #(let [source (.. % -target -value)]\n                      (swap! state assoc :source source)\n                      (eval-str source (partial swap! state assoc :result)))}]]\n\n     (let [{:keys [error value]} result]\n       [:.pre-wrap\n        (if error (element [:.pa3.bg-washed-red\n                            [:.b (ex-message error)]\n                            [:div (str (ex-data error))]\n                            (pr-str (ex-cause error))\n                            ])\n                  [:.pa3 (views/format-value value)])])]))\n\n(defview examples\n  \"Root view for the page\"\n  []\n  (if-not (d/get ::eval-state :ready?)\n    \"Loading...\"\n    [:.monospace.f6\n     (map show-example source-examples)]))\n\n(defonce _\n         (boot/init c-state\n                    {:path         \"/js/bootstrap\"\n                     :load-on-init '#{shadow-eval.user }}\n                    (fn []\n                      (d/transact! [[:db/add ::eval-state :ready? true]]))))\n\n(defn render []\n  (v/render-to-dom (examples) \"shadow-eval\"))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Protocol extensions to enable rendering of cells and shapes\n\n(extend-type cells.cell/Cell\n  cells.cell/ICellStore\n  (put-value! [this value]\n    (d/transact! [[:db/add :cells (name this) value]]))\n  (get-value [this]\n    (d/get :cells (name this)))\n  (invalidate! [this]\n    (patterns/invalidate! d/*db* :ea_ [:cells (name this)]))\n  lark.value-viewer.core/IView\n  (view [this] (cells.cell/view this)))\n\n(extend-protocol lark.value-viewer.core/IView\n  Var\n  (view [this] (@this)))\n\n(extend-type shapes/Shape\n  re-view.hiccup.core/IEmitHiccup\n  (to-hiccup [this] (shapes/to-hiccup this)))\n\n(extend-protocol cells.cell/IRenderHiccup\n  object\n  (render-hiccup [this] (re-view.hiccup.core/element this)))"]}