{"version":3,"sources":["faber/threejs_scene.cljs"],"mappings":"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","names":["js/faber","js/faber.threejs-scene","js/faber.threejs-scene.makemesh","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__38545","cljs.core/MultiFn","cljs.core.symbol","faber.threejs-scene/makemesh","p__38546","vec__38547","seq__38548","cljs.core/seq","first__38549","cljs.core/first","cljs.core/next","form","args","cljs.core.println","cljs.core/vector?","cljs.core/Keyword","p__38558","vec__38563","seq__38564","cljs.core/count","cljs.core.apply","faber.operations-3d/union","cljs.core.map","p__38574","vec__38576","seq__38577","first__38578","vec__38582","cljs.core.nth","solids","holes","p1__38571#","p1__38572#","cljs.core.juxt","p1__38573#","cljs.core/group-by","cljs.core._EQ_","ufn","l","cljs.core/empty?","cljs.core/list","_","faber.operations_3d.difference","p__38593","vec__38596","seq__38597","first__38598","p__38608","vec__38609","seq__38610","first__38611","faber.operations-3d/hull","p__38619","vec__38620","seq__38621","first__38622","faber.operations-3d/difference","p__38630","vec__38633","seq__38634","first__38635","faber.operations-3d/intersection","p__38639","vec__38640","map__38643","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","x","y","z","center","faber.operations-3d/cube","p__38658","vec__38660","h","r","r2","faber.operations-3d/cylinder","p__38667","vec__38668","points","faces","faber.operations-3d/polyhedron","p__38672","vec__38679","faber.operations-3d/sphere","p__38682","vec__38684","seq__38685","first__38686","vec__38687","block","mesh","faber.operations-3d/translate","p__38696","vec__38697","seq__38698","first__38699","a","v","vec__38704","cljs.core.mapv","faber.model/deg->rad","faber.operations-3d/rotatev","p__38713","vec__38715","seq__38716","first__38717","vec__38721","faber.operations-3d/rotatec","p__38730","vec__38731","seq__38732","first__38733","faber.operations-3d/with-fn","p__38738","vec__38742","seq__38743","first__38744","faber.operations-3d/with-fa","p__38745","vec__38747","seq__38748","first__38749","faber.operations-3d/with-fs","p__38758","vec__38760","seq__38761","first__38762","vec__38763","faber.operations-3d/scale","p__38779","vec__38780","seq__38781","first__38782","options","faber.operations-3d/offset","p__38784","vec__38785","seq__38786","first__38787","faber.threejs-scene/pippo","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","faber.threejs-scene/model","seq38788","self__4724__auto__"],"sourcesContent":["(ns faber.threejs-scene\n  (:require [faber.operations-3d :as o3]\n            [faber.canvas3d :as canvas]))\n\n\n(defmulti makemesh\n          (fn [[form & args]]\n            (println \"multi makemesh form=\" form \" args=\" args)\n            (cond (:hole form) :hole\n                  (vector? form) :compose\n                  (keyword? form) form\n                  :default :list))\n            #_(cond\n              (and (list? form) (nil? args) (keyword? (first form))) (first form)\n              (list? form) :vector\n              (vector? form) :vector\n              (keyword? form) form\n              )\n            )\n\n(defmethod makemesh :default [form & args]\n  (println \"unknown:\" form args)\n  )\n\n(defmethod makemesh :list [[& args]]\n  (println \":list args=\" args)\n  ;(println \":list (map makemesh args)=\" (map makemesh args))\n  (if (> (count args) 1)\n    (apply o3/union (map makemesh args))\n    (makemesh (first args))))\n\n(defmethod makemesh :compose [[form & args]]\n  (println \":compose args=\" args)\n  (let [[solids holes] ((juxt #(% false) #(% true))\n                        (group-by #(= :hole (first %)) args))\n        ufn (fn [l] (if (empty? l) nil (makemesh (apply list l))))\n        _ (println \":compose-2 solids=\" solids \" holes=\" holes)\n        holes (ufn  holes)\n        solids (ufn solids)]\n    (println \":compose solids=\" solids \" holes=\" holes)\n    (cond\n      (nil? holes) solids\n      (nil? solids) solids\n      :default (o3/difference solids holes))))\n\n\n(defmethod makemesh :union [[form & args]]\n  (makemesh args))\n\n(defmethod makemesh :hull [[form & args]]\n  (apply o3/hull (map makemesh args)))\n\n(defmethod makemesh :difference [[form & args]]\n  (apply o3/difference (map makemesh args)))\n\n(defmethod makemesh :intersection [[form & args]]\n  (apply o3/intersection (map makemesh args)))\n\n\n(defmethod makemesh :cube [[form {:keys [x y z center]}]]\n  (println \"makemesh :cube form=\" form \" y=\" y)\n  (o3/cube x y z)\n  ;(three/Mesh. (three/BoxGeometry. x y z) canvas/default-material)\n  ; TODO handle center\n  )\n\n(defmethod makemesh :cylinder [[form h r r2]]\n  (println \"makemesh :cylinder form=\" form \" h=\" h \" r=\" r \" r2=\" r2)\n  (o3/cylinder h r r2)\n  ;(three/Mesh. (three/BoxGeometry. x y z) canvas/default-material)\n  ; TODO handle center\n  )\n\n(defmethod makemesh :polyhedron [[form points faces]]\n  (o3/polyhedron points faces)\n  ;(three/Mesh. (three/BoxGeometry. x y z) canvas/default-material)\n  ; TODO handle center\n  )\n\n\n(defmethod makemesh :sphere [[form r]]\n  (o3/sphere r)\n\n  ; TODO handle center\n  )\n\n\n\n(defmethod makemesh :translate [[form [x y z] & block]]\n  (let [mesh (apply makemesh block)]\n    (println \":translate mesh=\" mesh)\n    (o3/translate mesh x y z)))\n\n(defmethod makemesh :rotatev [[form a v & block]]\n  (let [mesh (apply makemesh block)\n        [x y z] (mapv faber.model/deg->rad v)]\n    (o3/rotatev mesh 10 x y z)))\n\n(defmethod makemesh :rotatec [[form v & block]]\n  (let [mesh (apply makemesh block)\n        [x y z] (mapv faber.model/deg->rad v)]\n    (o3/rotatec mesh x y z)))\n\n(defmethod makemesh :with-fn [[form x & block]]\n  (o3/with-fn x (fn [] (apply makemesh block))))\n\n(defmethod makemesh :with-fa [[form x & block]]\n  (o3/with-fa x (fn [] (apply makemesh block))))\n\n(defmethod makemesh :with-fs [[form x & block]]\n  (o3/with-fs x (fn [] (apply makemesh block))))\n\n(defmethod makemesh :scale [[form [x y z] & block]]\n  (let [mesh (apply makemesh block)]\n    (println \":scale mesh=\" mesh)\n    (o3/scale mesh x y z)))\n\n(defmethod makemesh :offset [[form options & block]]\n  (o3/offset options  (apply makemesh block)))\n\n(defmethod makemesh :hole [[form & block]]\n  (apply makemesh block))\n\n\n(def pippo 34)\n\n(defn model [& args]\n  (println \"model. args=\" args)\n  (let [mesh (apply makemesh args)]\n    {:3dmodel mesh}))\n\n"]}