{"version":3,"sources":["faber/core.cljs"],"mappings":"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","names":["faber.core/source-examples","js/faber","js/faber.core","js/faber.core.c-state","faber.core/c-state","cljs.js.empty_state","faber.core/eval-str","source","cb","cljs.js.eval_str","cljs.js/js-eval","cljs.core.partial","shadow.cljs.bootstrap.browser/load","cljs.core.symbol","faber.core/format-value","value","faber.core/visible-pane?","visible","the-class__27590__auto__","re-view.core/class*","p__54847","map__54852","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","map__54853","cljs.core.get","re_view.hiccup.core.element","re-view.core/wrap-props","faber.core/error-paneClass","re-view.core/factory","faber.core/error-pane","cljs.core.println","js/Error","cljs.core/ex-message","cljs.core/ex-data","cljs.core.pr_str","cljs.core/ex-cause","p__54879","map__54880","map__54881","faber.core/result-paneClass","faber.core/result-pane","p__54896","map__54897","map__54898","faber.core/canvas3d-paneClass","faber.core/canvas3d-pane","faber.canvas3d/canvas3d","p__54923","map__54924","state","faber.core/model-editorClass","faber.core/model-editor","_","this","textarea","js/document","codearea","js/module$node_modules$codemirror$lib$codemirror.fromTextArea","js/Infinity","js/module$node_modules$parinfer_codemirror$parinfer_codemirror","re-db.d/transact!","cljs.core/swap!","cljs.core/assoc","map__54926","cljs.core/deref","model-source","result","p__54938","map__54939","faber.core/right-paneClass","faber.core/right-pane","current","make-pane-value","kind","cljs.core._EQ_","faber.core/parse-result","res","vec__54958","cljs.core.nth","toolbar","re-db.d/get","right-pane","cljs.core.swap_BANG_","m","cljs.core.assoc","cljs.core.not_EQ_","faber.core/compile","code","js/console","p__54983","map__54984","faber.core/stlsavebuttonClass","faber.core/stlsavebutton","temp__5733__auto__","blob","node","re-view.core/dom-node","js/URL","faber.core/toolbarClass","faber.core/toolbar","faber.core/example","faber.core/main-pageClass","faber.core/main-page","cljs.core/not","js/faber.core._","faber.core/_","shadow.cljs.bootstrap.browser/init","faber.core/render","re-view.core/render-to-dom"],"sourcesContent":["(ns faber.core\n  (:require\n    ;; evaluate\n    [cljs.js :as cljs]\n    [\"codemirror\" :refer [fromTextArea] :as codemirror]\n    [\"codemirror/mode/clojure/clojure\"]\n    [\"codemirror/addon/edit/closebrackets\"]\n    [\"codemirror/addon/edit/matchbrackets\"]\n    [\"parinfer-codemirror\" :as parinfer]\n    [shadow.cljs.bootstrap.browser :as boot]\n\n    ;; view\n    [re-view.core :as v :refer [defview]]\n    [re-view.hiccup.core :refer [element]]\n\n    [faber.canvas3d :refer [canvas3d is3dmodel? make-stl-blob]]\n    ;; things to eval and display\n    ;[lark.value-viewer.core :as views]\n    [re-db.d :as d]\n    [re-db.patterns :as patterns]\n\n    [faber.model :as m]\n    [faber.threejs-scene :refer [model]]\n\n    [clojure.string :as string]))\n\n\n;; Source text to eval\n\n(def source-examples [\"(circle 40)\"\n                      \"(for [n (range 10)] n)\"\n                      \"(defcell x 10)\"\n                      \"(defcell counter (interval 1000 inc))\"\n                      \"(defcell bigger-counter (* @counter 10))\"\n                      \"(require '[cljs.js :as cljs])\\n\\n(fn? cljs/eval-str)\"])\n\n;; Set up eval environment\n\n(defonce c-state (cljs/empty-state))\n\n(defn eval-str [source cb]\n  (cljs/eval-str\n    c-state\n    source\n    \"[test]\"\n    {:eval cljs/js-eval\n     :load (partial boot/load c-state)\n     :ns   (symbol \"faber.user\")}\n    cb))\n\n(defn format-value [value]\n  (str value))\n\n(defn visible-pane? [visible]\n  {:style {:display (if visible \"block\" \"none\")}})\n\n(defview error-pane\n         [{{:keys [visible value]} :view/props}]\n\n         (println \"render error-pane visible=\" visible \" value=\" value)\n         [:div (visible-pane? visible)\n          (if (instance? js/Error (:error value))\n            (element [:.pa3.bg-washed-red\n                      [:.b (ex-message (:error value))]\n                      [:div (str (ex-data (:error value)))]\n                      (pr-str (ex-cause (:error value)))\n                      ])\n            [:p (str \"Error: \" value)])])\n\n(defview result-pane\n         [{{:keys [visible value]} :view/props}]\n         (println \"render result-pane visible=\" visible \" value=\" value)\n         (element [:.pa3.bg-washed-green (visible-pane? visible)\n                   [:b \"Result:\"]\n                   [:.pa3 (format-value value)]]))\n\n(defview canvas3d-pane\n         [{{:keys [visible value]} :view/props}]\n         (println \"render 3d-pane visible=\" visible \" value=\" value)\n         [:div (visible-pane? visible)\n          (println \"(:3Dmodel value)=\" (:3dmodel value))\n          (canvas3d value)]\n         )\n;; Views\n(defview model-editor\n         {:key                (fn [_ source] source)\n          :view/initial-state (fn [_ source]\n                                {:model-source source})\n          :view/did-mount     (fn [this source]\n                                (let [textarea (.getElementById js/document \"codearea\")\n                                      codearea (fromTextArea textarea #js {:lineNumbers       true\n                                                                           :viewportMargin    js/Infinity\n                                                                           :matchBrackets     true\n                                                                           :closebrackets     true\n                                                                           :autofocus         true\n                                                                           :autoCloseBrackets true\n                                                                           :mode              \"clojure\"\n                                                                           })]\n                                  (.init parinfer codearea)\n                                  (d/transact! [[:db/add :editor :codearea codearea]])\n                                  ;(d/transact! [[:db/add :editor :result-set-fn (partial swap! (:view/state this) assoc :result)]])\n                                  (eval-str source (partial swap! (:view/state this) assoc :result))))}\n         [{:keys [:view/state]}]\n         (let [{:keys [model-source result]} @state]\n           [:textarea#codearea.f6.bg-near-white.monospace\n            (:model-source @state)]\n           ))\n\n\n(defview right-pane\n         {:view/initial-state (fn [_]\n                                {:current :3d\n                                 :value   \"press Run\"})\n          :view/did-mount     (fn [this]\n                                (d/transact! [[:db/add :faber :right-pane this]])\n                                )}\n         [{:keys [:view/state]}]\n         (let [current (:current @state)\n               value (:value @state)\n               make-pane-value (fn [kind]\n                                 {:visible (= current kind) :value value})]\n           (println \"render right-pane\" \"current=\" current \"value=\" value)\n           [:div\n            (canvas3d-pane (make-pane-value :3d))\n            (result-pane (make-pane-value :result))\n            (error-pane (make-pane-value :error))]\n           )\n         )\n\n(defn parse-result [res]\n  (let [toolbar (d/get :faber :stlbutton)\n        [kind value] (cond\n                       (:error res) [:error res]\n                       (:3dmodel (:value res)) [:3d (:value res)]\n                       true [:result (:value res)])\n        right-pane (d/get :faber :right-pane)]\n    (println \"value=\" value \" kind=\" kind)\n\n    (swap! (:view/state right-pane)\n           (fn [m]\n             (-> m\n                 (assoc :value value)\n                 (assoc :current kind))))\n    ;(v/flush!)\n    (if (not= kind :3d)\n      (swap! (:view/state toolbar) assoc :stl-blob nil))\n    ))\n\n\n(defn compile []\n  (let [codearea (d/get :editor :codearea)\n        code (.getValue codearea)]\n    (.log js/console \"Value:\" code)\n    (eval-str code (fn [res]\n                     (parse-result res)\n                     ;(create-scene (get-in res [:value :3dmodel]) )\n                     ))\n    ))\n\n(defview stlsavebutton\n         {:view/initial-state (fn [_]\n                                {:stl-blob nil\n                                 })\n          :view/did-mount     (fn [this]\n                                (d/transact! [[:db/add :faber :stlbutton this]])\n                                )\n          :view/did-update    (fn [this]\n                                (println \"toolbar did update:\" (:view/state this))\n                                (if-let [blob (:stl-blob @(:view/state this))]\n                                  (let [node (v/dom-node this)]\n                                    (set! (.-href node) (.createObjectURL js/URL blob))\n                                    (set! (.-download node) \"model.stl\")\n                                    )))}\n         [{:keys [:view/state]}]\n         [:a.link.f6.dim.ba.bw1.ph3.pv2.ma3.dib.purple#stlsavebutton {:style {:display (if (:stl-blob @state) \"inline-block\" \"none\" )}} \"Save STL\"]\n         )\n\n(defview toolbar\n         []\n         [:div\n          [:a.f6.link.dim.ba.bw1.ph3.pv2.ma3.dib.purple {:on-click (fn [] (compile))} \"Run\"]\n          (stlsavebutton)\n          ])\n\n#_(def example \"(model (map #(m/translate [% 0 0] (m/cube 0.1 1 1)) (range 5)))\")\n#_(def example \"(model\n               (m/rotate 10 [1 0 0] (cube 1 2 3)))\")\n#_(def example \"\n  (model\n    (with-fn 50\n      (union\n        (sphere 1)\n        (cube 0.5 1 3))))\")\n#_(def example \"\n  (model\n    (with-fn 50\n      (hull\n        (sphere 0.5)\n        (translate [0 1 0] (cube 0.5 1 3)))))\")\n\n#_(def example \"(model\\n    (m/offset 2 (cube 1 1 1)))\")\n\n#_(def example \"\n  (model\n    (with-fn 150\n        (cylinder [2 0.6] 1)))\")\n\n#_(def example \"\n  (model\n      (polyhedron [[0.5 1 1] [0.5 1 -1] [0.5 -1 1] [0.5 -1 -1] [-0.5 1 -1] [-0.5 1 1] [-0.5 -1 -1] [-0.5 -1 1]]\n                   [[0 2 1] [2 3 1] [4 6 5] [6 7 5] [4 5 1] [5 0 1] [7 6 2] [6 3 2] [5 7 0] [7 2 0] [1 3 4] [3 6 4]]))\")\n\n(def example \"\n  (model\n      (polyhedron [[0,0,0], [0,1,0], [1,0,0], [0,0,1]]\n                   [[0,2,1], [0,1,3], [1,2,3], [0,3,2]]))\")\n\n\n#_(def example \"\n  (model\n      (polyhedron [[  0,  0,  0 ] [ 10,  0,  0 ] [ 10,  7,  0 ] [  0,  7,  0 ] [  0,  0,  5 ] [ 10,  0,  5 ] [ 10,  7,  5 ] [  0,  7,  5 ]]\n                   [[0,1,2,3] [4,5,1,0] [7,6,5,4] [5,6,2,1] [6,7,3,2] [7,4,0,3]]))\")\n\n\n\n(defview main-page\n         \"Root view for the page\"\n         []\n         (if-not (d/get ::eval-state :ready?)\n           \"Loading...\"\n           [:div.h-100\n            [:h1.f1 \"Faber\"]\n            (toolbar)\n            [:div.monospace.f6.h-75\n             [:div.bg-near-white.h-100.flex\n              [:div.h-100.w-50\n               (model-editor example)]\n              [:.w-50\n               (right-pane)\n               #_(let [current (d/get :right-pane :current)]\n                   (d/get :right-pane current))\n               ]]\n\n\n             ]]))\n\n(defonce _\n         (boot/init c-state\n                    {:path         \"/js/bootstrap\"\n                     :load-on-init '#{faber.user}}\n                    (fn []\n                      (d/transact! [[:db/add ::eval-state :ready? true]]))))\n\n(defn render []\n  #_(d/transact! [{:db/id   :right-pane\n                   :current :result}])\n  ;(.log js/console \"codemirror:\" fromTextArea)\n  (v/render-to-dom (main-page) \"faber\"))\n\n\n"]}