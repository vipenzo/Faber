{"version":3,"sources":["cells/eval_context.cljs"],"mappings":";AAEA,AAAA;AAAA;;;;;;AAAA,AAAaS;;AAAb,AAAAT,AAAA,AAIeU,AAAQC;AAJvB,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAIeS,AAAAA;AAJfR,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIeQ,AAAAA,AAAQC,AAAAA;;AAJvB,AAAAN,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIeK,AAAAA,AAAQC,AAAAA;;AAJvB,AAAA,AAAAL,AAAA,AAIeI;;;;AAJf,AAAA;;;AAAA,AAIGP,AAAYO,AAAQC;AAJvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIeD,AAAAA;AAJf,AAIeA,AAAAA,AAAQC;;AAJvB,AAAAX,AAIeU,AAAQC;;;;AAJvB,AAAAJ,AAAA,AAKcG;AALd,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAA,AAKcS,AAAAA;AALdR,AAAA,AAAAM,AAAA,AAAAJ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKcQ,AAAAA;;AALd,AAAAL,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKcK,AAAAA;;AALd,AAAA,AAAAJ,AAAA,AAKcI;;;;AALd,AAAA,AAAA,AAKGF,AAAWE;AALd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKcA,AAAAA;AALd,AAKcA,AAAAA;;AALd,AAAAH,AAKcG;;;;AALd,AAOA,AAAA,AAAME,AAAUC;AAAhB,AACE,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYN,AAAAA,AAASI,AAAAA,AAAAA,AAAAA,AAAAA;AAA3B,AACE,AAACL,AAAUK;;AADb;;;AAGF,AAAA;AAAA;;;AAAA,AAAaK;;AAAb,AAAAF,AAAA,AACiBG,AAAKC;AADtB,AAAA,AAAAnB,AAAA,AAAA,AAAA,AAAA,AACiBkB,AAAAA;AADjBjB,AAAA,AAAAe,AAAA,AAAAb,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACiBiB,AAAAA,AAAKC,AAAAA;;AADtB,AAAAf,AAAA,AAAAY,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACiBc,AAAAA,AAAKC,AAAAA;;AADtB,AAAA,AAAAd,AAAA,AACiBa;;;;AADjB,AAAA,AAAA,AACGF,AAAcE,AAAKC;AADtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACiBD,AAAAA;AADjB,AACiBA,AAAAA,AAAKC;;AADtB,AAAAJ,AACiBG,AAAKC;;;;AADtB,AAGA,AAAA,AAAMC;AAAN,AACE,AAAMC,AAAe,AAAA,AAAA,AAAA,AAACC;AAAtB,AACE,AAAA,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AADIN,AACJ,AAAA,AAAAK,AAAAE;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAAb;;AAAA,AAAA,AAAA,AAAAa,AAAA,AAEejB,AAAQC;;AAFvB,AAAA,AAAA,AAEeD;AAFf,AAGI,AAAAyB,AAAA,AAAA,AAAAC,AAAA,AAAQd,AAAAA,AAAee,AAAoBC,AAAK3B;;;AAHpD,AAAA,AAAA,AAAAgB,AAAA,AAIcjB;;AAJd,AAAA,AAAA,AAIcA;AAJd,AAKI,AAAA6B,AAAA,AAAAC,AAAU,AAAA,AAAA,AAAAY,AAAe9B;AAAzBmB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQhC;AAAR,AAAA,AACE,AAACA,AAAAA,AAAAA;;AADH;AAAA,AAAA4B;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAX,AAAQ5B;AAAR,AAAA,AACE,AAACA,AAAAA,AAAAA;;AADH;AAAA,AAAA,AAAAwC,AAAAZ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEA,AAAAJ,AAAA,AAAA,AAAAC,AAAA,AAAQd,AAAAA,AAAee,AAAoBgB;;;AAP/C,AAAA,AAAA,AAAA1B,AAAAb;;AAAA,AAAA,AAAA,AAAAa,AAAA,AASiBR,AAAKC;;AATtB,AAAA,AAAA,AASiBD;AATjB,AASyB,AAAOC;;;AAThC,AAAA,AAAAO,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAG,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AADIT,AACJY,AAAA,AAAAL;AADIP,AACJ,AAAA,AAAAK,AAAAE;;;AAAAF;;AADIL,AACJ,AAAAK,AAAA","names":["cells$eval-context$IDispose$on_dispose$dyn","x__4428__auto__","m__4429__auto__","cells.eval-context/on-dispose","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","cells$eval-context$IDispose$_dispose_BANG_$dyn","cells.eval-context/-dispose!","cells.eval-context/IDispose","context","f","cells.eval-context/dispose!","value","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cells$eval-context$IHandleError$handle_error$dyn","cells.eval-context/handle-error","cells.eval-context/IHandleError","this","e","cells.eval-context/new-context","-context-state","cljs.core/volatile!","js/cells","js/cells.eval-context","js/cells.eval-context.t_cells$eval_context43301","cells.eval-context/t_cells$eval_context43301","_43303","meta43302","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","cells.eval-context/->t_cells$eval_context43301","cljs.core/-vreset!","cljs.core/-deref","cljs.core.update","cljs.core/conj","seq__43309","cljs.core/seq","chunk__43310","count__43311","i__43312","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/deref","cljs.core/empty"],"sourcesContent":["(ns cells.eval-context)\n\n(defprotocol IDispose\n  \"Cells are designed to be used within interactive interfaces where users re-evaluate\n   code frequently. Implement the IDispose protocol on an editor context to control the\n    'disposal' of side-effects like intervals when code is (re)-evaluated.\"\n  (on-dispose [context f] \"Register a callback to be fired when context is disposed.\")\n  (-dispose! [context]))\n\n(defn dispose! [value]\n  (when (satisfies? IDispose value)\n    (-dispose! value)))\n\n(defprotocol IHandleError\n  (handle-error [this e]))\n\n(defn new-context []\n  (let [-context-state (volatile! {:dispose-fns #{}})]\n    (reify\n      IDispose\n      (on-dispose [context f]\n        (vswap! -context-state update :dispose-fns conj f))\n      (-dispose! [context]\n        (doseq [f (:dispose-fns @-context-state)]\n          (f))\n        (vswap! -context-state update :dispose-fns empty))\n      IHandleError\n      (handle-error [this e] (throw e)))))"]}